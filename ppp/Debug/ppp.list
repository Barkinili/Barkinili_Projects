
ppp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e6c  08002e6c  00003e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002e7c  08002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e84  08002e84  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e84  08002e84  00003e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e88  08002e88  00003e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e8c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000118  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a568  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f7  00000000  00000000  0000e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0000fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085b  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237e1  00000000  00000000  000111c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbb7  00000000  00000000  000349a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e08d7  00000000  00000000  0004055b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120e32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d38  00000000  00000000  00120e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00123bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002e54 	.word	0x08002e54

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002e54 	.word	0x08002e54

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_ADCEx_InjectedConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a27      	ldr	r2, [pc, #156]	@ (80005c4 <HAL_ADCEx_InjectedConvCpltCallback+0xac>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d148      	bne.n	80005bc <HAL_ADCEx_InjectedConvCpltCallback+0xa4>
    {

        adc1_value[0] = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 800052a:	2101      	movs	r1, #1
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f001 f83b 	bl	80015a8 <HAL_ADCEx_InjectedGetValue>
 8000532:	4603      	mov	r3, r0
 8000534:	b29a      	uxth	r2, r3
 8000536:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>)
 8000538:	801a      	strh	r2, [r3, #0]
        adc1_value[1] = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2);
 800053a:	2102      	movs	r1, #2
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f001 f833 	bl	80015a8 <HAL_ADCEx_InjectedGetValue>
 8000542:	4603      	mov	r3, r0
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>)
 8000548:	805a      	strh	r2, [r3, #2]

        Vdda   = 3.3f * (*VREFIN_CAL) / adc1_value[0];
 800054a:	4b20      	ldr	r3, [pc, #128]	@ (80005cc <HAL_ADCEx_InjectedConvCpltCallback+0xb4>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	ee07 3a90 	vmov	s15, r3
 8000552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000556:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80005d0 <HAL_ADCEx_InjectedConvCpltCallback+0xb8>
 800055a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800055e:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	ee07 3a90 	vmov	s15, r3
 8000566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800056a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800056e:	4b19      	ldr	r3, [pc, #100]	@ (80005d4 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8000570:	edc3 7a00 	vstr	s15, [r3]
        Vsense = Vdda * adc1_value[1] / 4095.0f;
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>)
 8000576:	885b      	ldrh	r3, [r3, #2]
 8000578:	ee07 3a90 	vmov	s15, r3
 800057c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000580:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <HAL_ADCEx_InjectedConvCpltCallback+0xbc>)
 8000582:	edd3 7a00 	vldr	s15, [r3]
 8000586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800058a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80005d8 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>
 800058e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8000594:	edc3 7a00 	vstr	s15, [r3]
        temp   = ((Vsense - V25) / Avg_slope) + 25.0f;
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 800059a:	edd3 7a00 	vldr	s15, [r3]
 800059e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80005e0 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>
 80005a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80005a6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80005e4 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>
 80005aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005ae:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80005b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 80005b8:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40012000 	.word	0x40012000
 80005c8:	20000028 	.word	0x20000028
 80005cc:	1fff7a2a 	.word	0x1fff7a2a
 80005d0:	40533333 	.word	0x40533333
 80005d4:	20000030 	.word	0x20000030
 80005d8:	457ff000 	.word	0x457ff000
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	3f428f5c 	.word	0x3f428f5c
 80005e4:	3b23d70a 	.word	0x3b23d70a
 80005e8:	20000034 	.word	0x20000034

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 faf6 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f81a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f990 	bl	800091c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005fc:	f000 f882 	bl	8000704 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000600:	f000 f908 	bl	8000814 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000604:	f000 f956 	bl	80008b4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);
 8000608:	4805      	ldr	r0, [pc, #20]	@ (8000620 <main+0x34>)
 800060a:	f001 ffcd 	bl	80025a8 <HAL_TIM_Base_Start_IT>


  HAL_TIM_Base_Start(&htim1);
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <main+0x38>)
 8000610:	f001 ff62 	bl	80024d8 <HAL_TIM_Base_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <main+0x3c>)
 8000616:	f000 fef5 	bl	8001404 <HAL_ADCEx_InjectedStart_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0x2e>
 800061e:	bf00      	nop
 8000620:	200000c8 	.word	0x200000c8
 8000624:	20000080 	.word	0x20000080
 8000628:	20000038 	.word	0x20000038

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fbde 	bl	8002dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a28      	ldr	r2, [pc, #160]	@ (80006fc <SystemClock_Config+0xd0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xd4>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006a4:	2354      	movs	r3, #84	@ 0x54
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fa5b 	bl	8001b70 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 f946 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fcbc 	bl	8002060 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f92f 	bl	8000950 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fb6c 	bl	8002dfc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000724:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000726:	4a38      	ldr	r2, [pc, #224]	@ (8000808 <MX_ADC1_Init+0x104>)
 8000728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800072a:	4b36      	ldr	r3, [pc, #216]	@ (8000804 <MX_ADC1_Init+0x100>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000730:	4b34      	ldr	r3, [pc, #208]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000736:	4b33      	ldr	r3, [pc, #204]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073c:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <MX_ADC1_Init+0x100>)
 800073e:	2201      	movs	r2, #1
 8000740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b30      	ldr	r3, [pc, #192]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <MX_ADC1_Init+0x100>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b2c      	ldr	r3, [pc, #176]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000752:	4a2e      	ldr	r2, [pc, #184]	@ (800080c <MX_ADC1_Init+0x108>)
 8000754:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <MX_ADC1_Init+0x100>)
 800075e:	2201      	movs	r2, #1
 8000760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_ADC1_Init+0x100>)
 800076c:	2201      	movs	r2, #1
 800076e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	4824      	ldr	r0, [pc, #144]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000772:	f000 faa7 	bl	8000cc4 <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800077c:	f000 f8e8 	bl	8000950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000780:	2311      	movs	r3, #17
 8000782:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000788:	2303      	movs	r3, #3
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4619      	mov	r1, r3
 8000792:	481c      	ldr	r0, [pc, #112]	@ (8000804 <MX_ADC1_Init+0x100>)
 8000794:	f000 fc08 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800079e:	f000 f8d7 	bl	8000950 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 80007a2:	2311      	movs	r3, #17
 80007a4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80007b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80007b6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80007b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007bc:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	@ (8000804 <MX_ADC1_Init+0x100>)
 80007d0:	f000 ff22 	bl	8001618 <HAL_ADCEx_InjectedConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80007da:	f000 f8b9 	bl	8000950 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_ADC1_Init+0x10c>)
 80007e0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_ADC1_Init+0x100>)
 80007ec:	f000 ff14 	bl	8001618 <HAL_ADCEx_InjectedConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80007f6:	f000 f8ab 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3730      	adds	r7, #48	@ 0x30
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000038 	.word	0x20000038
 8000808:	40012000 	.word	0x40012000
 800080c:	0f000001 	.word	0x0f000001
 8000810:	10000012 	.word	0x10000012

08000814 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_TIM1_Init+0x98>)
 8000832:	4a1f      	ldr	r2, [pc, #124]	@ (80008b0 <MX_TIM1_Init+0x9c>)
 8000834:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000836:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <MX_TIM1_Init+0x98>)
 8000838:	2253      	movs	r2, #83	@ 0x53
 800083a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_TIM1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_TIM1_Init+0x98>)
 8000844:	220a      	movs	r2, #10
 8000846:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_TIM1_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_TIM1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_TIM1_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800085a:	4814      	ldr	r0, [pc, #80]	@ (80008ac <MX_TIM1_Init+0x98>)
 800085c:	f001 fdec 	bl	8002438 <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000866:	f000 f873 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_TIM1_Init+0x98>)
 8000878:	f001 fff6 	bl	8002868 <HAL_TIM_ConfigClockSource>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000882:	f000 f865 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000886:	2320      	movs	r3, #32
 8000888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	@ (80008ac <MX_TIM1_Init+0x98>)
 8000894:	f002 fa22 	bl	8002cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800089e:	f000 f857 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000080 	.word	0x20000080
 80008b0:	40010000 	.word	0x40010000

080008b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_TIM7_Init+0x60>)
 80008c4:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <MX_TIM7_Init+0x64>)
 80008c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_TIM7_Init+0x60>)
 80008ca:	2253      	movs	r2, #83	@ 0x53
 80008cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_TIM7_Init+0x60>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_TIM7_Init+0x60>)
 80008d6:	2209      	movs	r2, #9
 80008d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_TIM7_Init+0x60>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_TIM7_Init+0x60>)
 80008e2:	f001 fda9 	bl	8002438 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80008ec:	f000 f830 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_TIM7_Init+0x60>)
 80008fe:	f002 f9ed 	bl	8002cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f822 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000c8 	.word	0x200000c8
 8000918:	40001400 	.word	0x40001400

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_GPIO_Init+0x30>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <MX_GPIO_Init+0x30>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_GPIO_Init+0x30>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000970:	6453      	str	r3, [r2, #68]	@ 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <HAL_ADC_MspInit+0x48>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d115      	bne.n	80009ea <HAL_ADC_MspInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_ADC_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <HAL_ADC_MspInit+0x4c>)
 80009c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_ADC_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2012      	movs	r0, #18
 80009e0:	f001 f88f 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009e4:	2012      	movs	r0, #18
 80009e6:	f001 f8a8 	bl	8001b3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40012000 	.word	0x40012000
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <HAL_TIM_Base_MspInit+0x80>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d116      	bne.n	8000a3c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <HAL_TIM_Base_MspInit+0x84>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a1a      	ldr	r2, [pc, #104]	@ (8000a80 <HAL_TIM_Base_MspInit+0x84>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <HAL_TIM_Base_MspInit+0x84>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2019      	movs	r0, #25
 8000a30:	f001 f867 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a34:	2019      	movs	r0, #25
 8000a36:	f001 f880 	bl	8001b3a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000a3a:	e01a      	b.n	8000a72 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a10      	ldr	r2, [pc, #64]	@ (8000a84 <HAL_TIM_Base_MspInit+0x88>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d115      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <HAL_TIM_Base_MspInit+0x84>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a80 <HAL_TIM_Base_MspInit+0x84>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_TIM_Base_MspInit+0x84>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2037      	movs	r0, #55	@ 0x37
 8000a68:	f001 f84b 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a6c:	2037      	movs	r0, #55	@ 0x37
 8000a6e:	f001 f864 	bl	8001b3a <HAL_NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010000 	.word	0x40010000
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40001400 	.word	0x40001400

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f8d1 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <ADC_IRQHandler>:
  */
static uint32_t adc_last_time = 0;
static uint32_t adc_current_time= 0;
uint32_t adc_period;
void ADC_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  adc_current_time = second;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <ADC_IRQHandler+0x38>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <ADC_IRQHandler+0x3c>)
 8000af4:	601a      	str	r2, [r3, #0]
  adc_period = (adc_current_time - adc_last_time)*10;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <ADC_IRQHandler+0x3c>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <ADC_IRQHandler+0x40>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1ad2      	subs	r2, r2, r3
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <ADC_IRQHandler+0x44>)
 8000b0c:	601a      	str	r2, [r3, #0]
  adc_last_time = adc_current_time;
 8000b0e:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <ADC_IRQHandler+0x3c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <ADC_IRQHandler+0x40>)
 8000b14:	6013      	str	r3, [r2, #0]
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <ADC_IRQHandler+0x48>)
 8000b18:	f000 f917 	bl	8000d4a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000110 	.word	0x20000110
 8000b24:	20000118 	.word	0x20000118
 8000b28:	20000114 	.word	0x20000114
 8000b2c:	2000011c 	.word	0x2000011c
 8000b30:	20000038 	.word	0x20000038

08000b34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */



  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b3a:	f001 fda5 	bl	8002688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000080 	.word	0x20000080

08000b48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	second++;
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <TIM7_IRQHandler+0x18>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a03      	ldr	r2, [pc, #12]	@ (8000b60 <TIM7_IRQHandler+0x18>)
 8000b54:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000b56:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <TIM7_IRQHandler+0x1c>)
 8000b58:	f001 fd96 	bl	8002688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000110 	.word	0x20000110
 8000b64:	200000c8 	.word	0x200000c8

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 f927 	bl	8002e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fd15 	bl	80005ec <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	08002e8c 	.word	0x08002e8c
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	20000124 	.word	0x20000124

08000bdc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <CAN1_RX0_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 ff6f 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fea2 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 ff87 	bl	8001b56 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 ff4f 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000120 	.word	0x20000120

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000120 	.word	0x20000120

08000cc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e033      	b.n	8000d42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d109      	bne.n	8000cf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fe62 	bl	80009ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 0310 	and.w	r3, r3, #16
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d118      	bne.n	8000d34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d0a:	f023 0302 	bic.w	r3, r3, #2
 8000d0e:	f043 0202 	orr.w	r2, r3, #2
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fa78 	bl	800120c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	f043 0201 	orr.w	r2, r3, #1
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d32:	e001      	b.n	8000d38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d049      	beq.n	8000e14 <HAL_ADC_IRQHandler+0xca>
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d046      	beq.n	8000e14 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d105      	bne.n	8000d9e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d12b      	bne.n	8000e04 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d127      	bne.n	8000e04 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d119      	bne.n	8000e04 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0220 	bic.w	r2, r2, #32
 8000dde:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f8b0 	bl	8000f6a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f06f 0212 	mvn.w	r2, #18
 8000e12:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e22:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d057      	beq.n	8000eda <HAL_ADC_IRQHandler+0x190>
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d054      	beq.n	8000eda <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d105      	bne.n	8000e48 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d139      	bne.n	8000eca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e5c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d12b      	bne.n	8000eca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d124      	bne.n	8000eca <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d11d      	bne.n	8000eca <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d119      	bne.n	8000eca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ea4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	f043 0201 	orr.w	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fb24 	bl	8000518 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f06f 020c 	mvn.w	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d017      	beq.n	8000f20 <HAL_ADC_IRQHandler+0x1d6>
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d014      	beq.n	8000f20 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d10d      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f834 	bl	8000f7e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f06f 0201 	mvn.w	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f2e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d015      	beq.n	8000f62 <HAL_ADC_IRQHandler+0x218>
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d012      	beq.n	8000f62 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f40:	f043 0202 	orr.w	r2, r3, #2
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f06f 0220 	mvn.w	r2, #32
 8000f50:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f81d 	bl	8000f92 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f06f 0220 	mvn.w	r2, #32
 8000f60:	601a      	str	r2, [r3, #0]
  }
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1c>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e113      	b.n	80011ec <HAL_ADC_ConfigChannel+0x244>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b09      	cmp	r3, #9
 8000fd2:	d925      	bls.n	8001020 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68d9      	ldr	r1, [r3, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3b1e      	subs	r3, #30
 8000fea:	2207      	movs	r2, #7
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68d9      	ldr	r1, [r3, #12]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	4603      	mov	r3, r0
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4403      	add	r3, r0
 8001012:	3b1e      	subs	r3, #30
 8001014:	409a      	lsls	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	e022      	b.n	8001066 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6919      	ldr	r1, [r3, #16]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	2207      	movs	r2, #7
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	400a      	ands	r2, r1
 8001042:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6919      	ldr	r1, [r3, #16]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	4603      	mov	r3, r0
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4403      	add	r3, r0
 800105c:	409a      	lsls	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b06      	cmp	r3, #6
 800106c:	d824      	bhi.n	80010b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b05      	subs	r3, #5
 8001080:	221f      	movs	r2, #31
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	400a      	ands	r2, r1
 800108e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b05      	subs	r3, #5
 80010aa:	fa00 f203 	lsl.w	r2, r0, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010b6:	e04c      	b.n	8001152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	d824      	bhi.n	800110a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	3b23      	subs	r3, #35	@ 0x23
 80010d2:	221f      	movs	r2, #31
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43da      	mvns	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	400a      	ands	r2, r1
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	3b23      	subs	r3, #35	@ 0x23
 80010fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
 8001108:	e023      	b.n	8001152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	3b41      	subs	r3, #65	@ 0x41
 800111c:	221f      	movs	r2, #31
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	400a      	ands	r2, r1
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	3b41      	subs	r3, #65	@ 0x41
 8001146:	fa00 f203 	lsl.w	r2, r0, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001152:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <HAL_ADC_ConfigChannel+0x250>)
 8001154:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a28      	ldr	r2, [pc, #160]	@ (80011fc <HAL_ADC_ConfigChannel+0x254>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d10f      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1d8>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b12      	cmp	r3, #18
 8001166:	d10b      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_ADC_ConfigChannel+0x254>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12b      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x23a>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <HAL_ADC_ConfigChannel+0x258>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_ADC_ConfigChannel+0x1f4>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b11      	cmp	r3, #17
 800119a:	d122      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_ADC_ConfigChannel+0x258>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d111      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_ADC_ConfigChannel+0x25c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <HAL_ADC_ConfigChannel+0x260>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	0c9a      	lsrs	r2, r3, #18
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40012300 	.word	0x40012300
 80011fc:	40012000 	.word	0x40012000
 8001200:	10000012 	.word	0x10000012
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83

0800120c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001214:	4b79      	ldr	r3, [pc, #484]	@ (80013fc <ADC_Init+0x1f0>)
 8001216:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	431a      	orrs	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6859      	ldr	r1, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	021a      	lsls	r2, r3, #8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6859      	ldr	r1, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6899      	ldr	r1, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129e:	4a58      	ldr	r2, [pc, #352]	@ (8001400 <ADC_Init+0x1f4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d022      	beq.n	80012ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6899      	ldr	r1, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6899      	ldr	r1, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	e00f      	b.n	800130a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001308:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0202 	bic.w	r2, r2, #2
 8001318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6899      	ldr	r1, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e1b      	ldrb	r3, [r3, #24]
 8001324:	005a      	lsls	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01b      	beq.n	8001370 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001346:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001356:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6859      	ldr	r1, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	3b01      	subs	r3, #1
 8001364:	035a      	lsls	r2, r3, #13
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	e007      	b.n	8001380 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800137e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800138e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	3b01      	subs	r3, #1
 800139c:	051a      	lsls	r2, r3, #20
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6899      	ldr	r1, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013c2:	025a      	lsls	r2, r3, #9
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6899      	ldr	r1, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	029a      	lsls	r2, r3, #10
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	609a      	str	r2, [r3, #8]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40012300 	.word	0x40012300
 8001400:	0f000001 	.word	0x0f000001

08001404 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_ADCEx_InjectedStart_IT+0x22>
 8001422:	2302      	movs	r3, #2
 8001424:	e0b2      	b.n	800158c <HAL_ADCEx_InjectedStart_IT+0x188>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d018      	beq.n	800146e <HAL_ADCEx_InjectedStart_IT+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0201 	orr.w	r2, r2, #1
 800144a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800144c:	4b52      	ldr	r3, [pc, #328]	@ (8001598 <HAL_ADCEx_InjectedStart_IT+0x194>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a52      	ldr	r2, [pc, #328]	@ (800159c <HAL_ADCEx_InjectedStart_IT+0x198>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9a      	lsrs	r2, r3, #18
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001460:	e002      	b.n	8001468 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3b01      	subs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f9      	bne.n	8001462 <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d17a      	bne.n	8001572 <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f06f 0204 	mvn.w	r2, #4
 80014b2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014c2:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c4:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 80014c6:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d124      	bne.n	800151e <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d041      	beq.n	800158a <HAL_ADCEx_InjectedStart_IT+0x186>
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d03e      	beq.n	800158a <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e035      	b.n	800158a <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf0c      	ite	eq
 8001542:	2301      	moveq	r3, #1
 8001544:	2300      	movne	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a15      	ldr	r2, [pc, #84]	@ (80015a4 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d11a      	bne.n	800158a <HAL_ADCEx_InjectedStart_IT+0x186>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d017      	beq.n	800158a <HAL_ADCEx_InjectedStart_IT+0x186>
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d014      	beq.n	800158a <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	e00b      	b.n	800158a <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f043 0210 	orr.w	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f043 0201 	orr.w	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	20000000 	.word	0x20000000
 800159c:	431bde83 	.word	0x431bde83
 80015a0:	40012300 	.word	0x40012300
 80015a4:	40012000 	.word	0x40012000

080015a8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f06f 0204 	mvn.w	r2, #4
 80015be:	601a      	str	r2, [r3, #0]

  /* Return the selected ADC converted value */
  switch (InjectedRank)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d81f      	bhi.n	8001608 <HAL_ADCEx_InjectedGetValue+0x60>
 80015c8:	a201      	add	r2, pc, #4	@ (adr r2, 80015d0 <HAL_ADCEx_InjectedGetValue+0x28>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	080015ff 	.word	0x080015ff
 80015d4:	080015f5 	.word	0x080015f5
 80015d8:	080015eb 	.word	0x080015eb
 80015dc:	080015e1 	.word	0x080015e1
  {
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e6:	60fb      	str	r3, [r7, #12]
    }
    break;
 80015e8:	e00f      	b.n	800160a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
    {
      tmp =  hadc->Instance->JDR3;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f0:	60fb      	str	r3, [r7, #12]
    }
    break;
 80015f2:	e00a      	b.n	800160a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
    {
      tmp =  hadc->Instance->JDR2;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	60fb      	str	r3, [r7, #12]
    }
    break;
 80015fc:	e005      	b.n	800160a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001604:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001606:	e000      	b.n	800160a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
      break;
 8001608:	bf00      	nop
  }
  return tmp;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800162c:	2302      	movs	r3, #2
 800162e:	e17e      	b.n	800192e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d925      	bls.n	800168c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	3b1e      	subs	r3, #30
 8001656:	2207      	movs	r2, #7
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43da      	mvns	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68d9      	ldr	r1, [r3, #12]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	4603      	mov	r3, r0
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4403      	add	r3, r0
 800167e:	3b1e      	subs	r3, #30
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	e022      	b.n	80016d2 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6919      	ldr	r1, [r3, #16]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	2207      	movs	r2, #7
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6919      	ldr	r1, [r3, #16]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4403      	add	r3, r0
 80016c8:	409a      	lsls	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	051a      	lsls	r2, r3, #20
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3303      	adds	r3, #3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	221f      	movs	r2, #31
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43da      	mvns	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	400a      	ands	r2, r1
 8001728:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3303      	adds	r3, #3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	fa00 f203 	lsl.w	r2, r0, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a75      	ldr	r2, [pc, #468]	@ (800193c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d022      	beq.n	80017b0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8001778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	699a      	ldr	r2, [r3, #24]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800179a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6899      	ldr	r1, [r3, #8]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	e00f      	b.n	80017d0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80017be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80017ce:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	7d5b      	ldrb	r3, [r3, #21]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	e007      	b.n	80017fa <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017f8:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	7d1b      	ldrb	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	e007      	b.n	8001824 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001822:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d02e      	beq.n	800188a <HAL_ADCEx_InjectedConfigChannel+0x272>
 800182c:	2b03      	cmp	r3, #3
 800182e:	d840      	bhi.n	80018b2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8001830:	2b01      	cmp	r3, #1
 8001832:	d002      	beq.n	800183a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8001834:	2b02      	cmp	r3, #2
 8001836:	d014      	beq.n	8001862 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8001838:	e03b      	b.n	80018b2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001848:	f023 030f 	bic.w	r3, r3, #15
 800184c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6959      	ldr	r1, [r3, #20]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	615a      	str	r2, [r3, #20]
      break;
 8001860:	e03b      	b.n	80018da <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001870:	f023 030f 	bic.w	r3, r3, #15
 8001874:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6999      	ldr	r1, [r3, #24]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	619a      	str	r2, [r3, #24]
      break;
 8001888:	e027      	b.n	80018da <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001898:	f023 030f 	bic.w	r3, r3, #15
 800189c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69d9      	ldr	r1, [r3, #28]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	61da      	str	r2, [r3, #28]
      break;
 80018b0:	e013      	b.n	80018da <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80018c0:	f023 030f 	bic.w	r3, r3, #15
 80018c4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a19      	ldr	r1, [r3, #32]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	621a      	str	r2, [r3, #32]
      break;
 80018d8:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018da:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80018dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a18      	ldr	r2, [pc, #96]	@ (8001944 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d109      	bne.n	80018fc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b12      	cmp	r3, #18
 80018ee:	d105      	bne.n	80018fc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a10      	ldr	r2, [pc, #64]	@ (8001944 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10e      	bne.n	8001924 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d003      	beq.n	8001918 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b11      	cmp	r3, #17
 8001916:	d105      	bne.n	8001924 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	000f0001 	.word	0x000f0001
 8001940:	40012300 	.word	0x40012300
 8001944:	40012000 	.word	0x40012000
 8001948:	10000012 	.word	0x10000012

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	@ (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	@ (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	@ 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	@ 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff3e 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff31 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e267      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d075      	beq.n	8001c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b8e:	4b88      	ldr	r3, [pc, #544]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d00c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4b85      	ldr	r3, [pc, #532]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b82      	ldr	r3, [pc, #520]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b7e      	ldr	r3, [pc, #504]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x108>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e242      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x74>
 8001bd6:	4b76      	ldr	r3, [pc, #472]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a75      	ldr	r2, [pc, #468]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x98>
 8001bee:	4b70      	ldr	r3, [pc, #448]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6f      	ldr	r2, [pc, #444]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6c      	ldr	r2, [pc, #432]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001c08:	4b69      	ldr	r3, [pc, #420]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a68      	ldr	r2, [pc, #416]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b66      	ldr	r3, [pc, #408]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a65      	ldr	r2, [pc, #404]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff f840 	bl	8000cac <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff f83c 	bl	8000cac <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e207      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b5b      	ldr	r3, [pc, #364]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xc0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f82c 	bl	8000cac <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff f828 	bl	8000cac <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	@ 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1f3      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b51      	ldr	r3, [pc, #324]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0xe8>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d063      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c86:	4b4a      	ldr	r3, [pc, #296]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b44      	ldr	r3, [pc, #272]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b41      	ldr	r3, [pc, #260]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1c7      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4937      	ldr	r1, [pc, #220]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e03a      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b34      	ldr	r3, [pc, #208]	@ (8001db4 <HAL_RCC_OscConfig+0x244>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7fe ffe1 	bl	8000cac <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cee:	f7fe ffdd 	bl	8000cac <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1a8      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b28      	ldr	r3, [pc, #160]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4925      	ldr	r1, [pc, #148]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <HAL_RCC_OscConfig+0x244>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7fe ffc0 	bl	8000cac <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d30:	f7fe ffbc 	bl	8000cac <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e187      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d036      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d016      	beq.n	8001d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_RCC_OscConfig+0x248>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7fe ffa0 	bl	8000cac <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d70:	f7fe ff9c 	bl	8000cac <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e167      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x200>
 8001d8e:	e01b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_OscConfig+0x248>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe ff89 	bl	8000cac <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	e00e      	b.n	8001dbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7fe ff85 	bl	8000cac <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d907      	bls.n	8001dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e150      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470000 	.word	0x42470000
 8001db8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	4b88      	ldr	r3, [pc, #544]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ea      	bne.n	8001d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8097 	beq.w	8001f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dda:	4b81      	ldr	r3, [pc, #516]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	4b7d      	ldr	r3, [pc, #500]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a7c      	ldr	r2, [pc, #496]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e02:	2301      	movs	r3, #1
 8001e04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e06:	4b77      	ldr	r3, [pc, #476]	@ (8001fe4 <HAL_RCC_OscConfig+0x474>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e12:	4b74      	ldr	r3, [pc, #464]	@ (8001fe4 <HAL_RCC_OscConfig+0x474>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a73      	ldr	r2, [pc, #460]	@ (8001fe4 <HAL_RCC_OscConfig+0x474>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe ff45 	bl	8000cac <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7fe ff41 	bl	8000cac <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e10c      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe4 <HAL_RCC_OscConfig+0x474>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2ea>
 8001e4c:	4b64      	ldr	r3, [pc, #400]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e50:	4a63      	ldr	r2, [pc, #396]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e58:	e01c      	b.n	8001e94 <HAL_RCC_OscConfig+0x324>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x30c>
 8001e62:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	4a5e      	ldr	r2, [pc, #376]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e72:	4a5b      	ldr	r2, [pc, #364]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0x324>
 8001e7c:	4b58      	ldr	r3, [pc, #352]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e80:	4a57      	ldr	r2, [pc, #348]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e88:	4b55      	ldr	r3, [pc, #340]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8c:	4a54      	ldr	r2, [pc, #336]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 0304 	bic.w	r3, r3, #4
 8001e92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d015      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7fe ff06 	bl	8000cac <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7fe ff02 	bl	8000cac <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0cb      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eba:	4b49      	ldr	r3, [pc, #292]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0ee      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x334>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7fe fef0 	bl	8000cac <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7fe feec 	bl	8000cac <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0b5      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ee      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef8:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	4a38      	ldr	r2, [pc, #224]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001efe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a1 	beq.w	8002050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0e:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d05c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d141      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_RCC_OscConfig+0x478>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7fe fec0 	bl	8000cac <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe febc 	bl	8000cac <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e087      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b27      	ldr	r3, [pc, #156]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	3b01      	subs	r3, #1
 8001f68:	041b      	lsls	r3, r3, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	491b      	ldr	r1, [pc, #108]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <HAL_RCC_OscConfig+0x478>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fe95 	bl	8000cac <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7fe fe91 	bl	8000cac <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e05c      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x416>
 8001fa4:	e054      	b.n	8002050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <HAL_RCC_OscConfig+0x478>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe fe7e 	bl	8000cac <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe fe7a 	bl	8000cac <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e045      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x444>
 8001fd2:	e03d      	b.n	8002050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e038      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d028      	beq.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d121      	bne.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d11a      	bne.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002024:	4293      	cmp	r3, r2
 8002026:	d111      	bne.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002032:	085b      	lsrs	r3, r3, #1
 8002034:	3b01      	subs	r3, #1
 8002036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cc      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b68      	ldr	r3, [pc, #416]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d90c      	bls.n	800209c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a58      	ldr	r2, [pc, #352]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a52      	ldr	r2, [pc, #328]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d044      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	2b03      	cmp	r3, #3
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b3f      	ldr	r3, [pc, #252]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e06f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e067      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b37      	ldr	r3, [pc, #220]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4934      	ldr	r1, [pc, #208]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7fe fdac 	bl	8000cac <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fda8 	bl	8000cac <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2b      	ldr	r3, [pc, #172]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d20c      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f821 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd0c 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00
 800221c:	40023800 	.word	0x40023800
 8002220:	08002e6c 	.word	0x08002e6c
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002230:	b094      	sub	sp, #80	@ 0x50
 8002232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002244:	4b79      	ldr	r3, [pc, #484]	@ (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d00d      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x40>
 8002250:	2b08      	cmp	r3, #8
 8002252:	f200 80e1 	bhi.w	8002418 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x34>
 800225a:	2b04      	cmp	r3, #4
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x3a>
 800225e:	e0db      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b73      	ldr	r3, [pc, #460]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x204>)
 8002262:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002264:	e0db      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002266:	4b73      	ldr	r3, [pc, #460]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x208>)
 8002268:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800226a:	e0d8      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226c:	4b6f      	ldr	r3, [pc, #444]	@ (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002274:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002276:	4b6d      	ldr	r3, [pc, #436]	@ (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d063      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002282:	4b6a      	ldr	r3, [pc, #424]	@ (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	2200      	movs	r2, #0
 800228a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800228c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800228e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002294:	633b      	str	r3, [r7, #48]	@ 0x30
 8002296:	2300      	movs	r3, #0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
 800229a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800229e:	4622      	mov	r2, r4
 80022a0:	462b      	mov	r3, r5
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	0159      	lsls	r1, r3, #5
 80022ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b0:	0150      	lsls	r0, r2, #5
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4621      	mov	r1, r4
 80022b8:	1a51      	subs	r1, r2, r1
 80022ba:	6139      	str	r1, [r7, #16]
 80022bc:	4629      	mov	r1, r5
 80022be:	eb63 0301 	sbc.w	r3, r3, r1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022d0:	4659      	mov	r1, fp
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	4651      	mov	r1, sl
 80022d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022da:	4651      	mov	r1, sl
 80022dc:	018a      	lsls	r2, r1, #6
 80022de:	4651      	mov	r1, sl
 80022e0:	ebb2 0801 	subs.w	r8, r2, r1
 80022e4:	4659      	mov	r1, fp
 80022e6:	eb63 0901 	sbc.w	r9, r3, r1
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022fe:	4690      	mov	r8, r2
 8002300:	4699      	mov	r9, r3
 8002302:	4623      	mov	r3, r4
 8002304:	eb18 0303 	adds.w	r3, r8, r3
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	462b      	mov	r3, r5
 800230c:	eb49 0303 	adc.w	r3, r9, r3
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800231e:	4629      	mov	r1, r5
 8002320:	024b      	lsls	r3, r1, #9
 8002322:	4621      	mov	r1, r4
 8002324:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002328:	4621      	mov	r1, r4
 800232a:	024a      	lsls	r2, r1, #9
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002332:	2200      	movs	r2, #0
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800233c:	f7fd ff56 	bl	80001ec <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4613      	mov	r3, r2
 8002346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002348:	e058      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234a:	4b38      	ldr	r3, [pc, #224]	@ (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	099b      	lsrs	r3, r3, #6
 8002350:	2200      	movs	r2, #0
 8002352:	4618      	mov	r0, r3
 8002354:	4611      	mov	r1, r2
 8002356:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002360:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	0159      	lsls	r1, r3, #5
 8002372:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002376:	0150      	lsls	r0, r2, #5
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4641      	mov	r1, r8
 800237e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002382:	4649      	mov	r1, r9
 8002384:	eb63 0b01 	sbc.w	fp, r3, r1
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002394:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002398:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800239c:	ebb2 040a 	subs.w	r4, r2, sl
 80023a0:	eb63 050b 	sbc.w	r5, r3, fp
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	00eb      	lsls	r3, r5, #3
 80023ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023b2:	00e2      	lsls	r2, r4, #3
 80023b4:	4614      	mov	r4, r2
 80023b6:	461d      	mov	r5, r3
 80023b8:	4643      	mov	r3, r8
 80023ba:	18e3      	adds	r3, r4, r3
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	464b      	mov	r3, r9
 80023c0:	eb45 0303 	adc.w	r3, r5, r3
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023d2:	4629      	mov	r1, r5
 80023d4:	028b      	lsls	r3, r1, #10
 80023d6:	4621      	mov	r1, r4
 80023d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023dc:	4621      	mov	r1, r4
 80023de:	028a      	lsls	r2, r1, #10
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e6:	2200      	movs	r2, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	61fa      	str	r2, [r7, #28]
 80023ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f0:	f7fd fefc 	bl	80001ec <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4613      	mov	r3, r2
 80023fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	3301      	adds	r3, #1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800240c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800240e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002416:	e002      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x204>)
 800241a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800241c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002420:	4618      	mov	r0, r3
 8002422:	3750      	adds	r7, #80	@ 0x50
 8002424:	46bd      	mov	sp, r7
 8002426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	00f42400 	.word	0x00f42400
 8002434:	007a1200 	.word	0x007a1200

08002438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe facc 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 faf0 	bl	8002a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e046      	b.n	800257e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a23      	ldr	r2, [pc, #140]	@ (800258c <HAL_TIM_Base_Start+0xb4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800250a:	d01d      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <HAL_TIM_Base_Start+0xb8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1e      	ldr	r2, [pc, #120]	@ (8002594 <HAL_TIM_Base_Start+0xbc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_TIM_Base_Start+0xc0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1b      	ldr	r2, [pc, #108]	@ (800259c <HAL_TIM_Base_Start+0xc4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <HAL_TIM_Base_Start+0xc8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <HAL_TIM_Base_Start+0xcc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d111      	bne.n	800256c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d010      	beq.n	800257c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	e007      	b.n	800257c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40010400 	.word	0x40010400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40001800 	.word	0x40001800

080025a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d001      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e04e      	b.n	800265e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a23      	ldr	r2, [pc, #140]	@ (800266c <HAL_TIM_Base_Start_IT+0xc4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d022      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x80>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ea:	d01d      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x80>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <HAL_TIM_Base_Start_IT+0xc8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d018      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x80>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <HAL_TIM_Base_Start_IT+0xcc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d013      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x80>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_TIM_Base_Start_IT+0xd0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00e      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x80>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <HAL_TIM_Base_Start_IT+0xd4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x80>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_TIM_Base_Start_IT+0xd8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x80>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a18      	ldr	r2, [pc, #96]	@ (8002684 <HAL_TIM_Base_Start_IT+0xdc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d111      	bne.n	800264c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d010      	beq.n	800265c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264a:	e007      	b.n	800265c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40010400 	.word	0x40010400
 8002680:	40014000 	.word	0x40014000
 8002684:	40001800 	.word	0x40001800

08002688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d020      	beq.n	80026ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01b      	beq.n	80026ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0202 	mvn.w	r2, #2
 80026bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f9a3 	bl	8002a1e <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f995 	bl	8002a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f9a6 	bl	8002a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0204 	mvn.w	r2, #4
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f97d 	bl	8002a1e <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f96f 	bl	8002a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f980 	bl	8002a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d020      	beq.n	8002784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0208 	mvn.w	r2, #8
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2204      	movs	r2, #4
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f957 	bl	8002a1e <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f949 	bl	8002a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f95a 	bl	8002a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	d020      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01b      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0210 	mvn.w	r2, #16
 80027a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2208      	movs	r2, #8
 80027a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f931 	bl	8002a1e <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f923 	bl	8002a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f934 	bl	8002a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0201 	mvn.w	r2, #1
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f901 	bl	80029f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fae8 	bl	8002de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f905 	bl	8002a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0220 	mvn.w	r2, #32
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 faba 	bl	8002dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_TIM_ConfigClockSource+0x1c>
 8002880:	2302      	movs	r3, #2
 8002882:	e0b4      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x186>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028bc:	d03e      	beq.n	800293c <HAL_TIM_ConfigClockSource+0xd4>
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c2:	f200 8087 	bhi.w	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ca:	f000 8086 	beq.w	80029da <HAL_TIM_ConfigClockSource+0x172>
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028d2:	d87f      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b70      	cmp	r3, #112	@ 0x70
 80028d6:	d01a      	beq.n	800290e <HAL_TIM_ConfigClockSource+0xa6>
 80028d8:	2b70      	cmp	r3, #112	@ 0x70
 80028da:	d87b      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b60      	cmp	r3, #96	@ 0x60
 80028de:	d050      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x11a>
 80028e0:	2b60      	cmp	r3, #96	@ 0x60
 80028e2:	d877      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028e4:	2b50      	cmp	r3, #80	@ 0x50
 80028e6:	d03c      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0xfa>
 80028e8:	2b50      	cmp	r3, #80	@ 0x50
 80028ea:	d873      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028ec:	2b40      	cmp	r3, #64	@ 0x40
 80028ee:	d058      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x13a>
 80028f0:	2b40      	cmp	r3, #64	@ 0x40
 80028f2:	d86f      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028f4:	2b30      	cmp	r3, #48	@ 0x30
 80028f6:	d064      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x15a>
 80028f8:	2b30      	cmp	r3, #48	@ 0x30
 80028fa:	d86b      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d060      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002900:	2b20      	cmp	r3, #32
 8002902:	d867      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05c      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002908:	2b10      	cmp	r3, #16
 800290a:	d05a      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x15a>
 800290c:	e062      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800291e:	f000 f9bd 	bl	8002c9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	609a      	str	r2, [r3, #8]
      break;
 800293a:	e04f      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800294c:	f000 f9a6 	bl	8002c9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800295e:	609a      	str	r2, [r3, #8]
      break;
 8002960:	e03c      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800296e:	461a      	mov	r2, r3
 8002970:	f000 f91a 	bl	8002ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2150      	movs	r1, #80	@ 0x50
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f973 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002980:	e02c      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f939 	bl	8002c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2160      	movs	r1, #96	@ 0x60
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f963 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e01c      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 f8fa 	bl	8002ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2140      	movs	r1, #64	@ 0x40
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f953 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e00c      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f000 f94a 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 80029d2:	e003      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      break;
 80029d8:	e000      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a43      	ldr	r2, [pc, #268]	@ (8002b7c <TIM_Base_SetConfig+0x120>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a7a:	d00f      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a40      	ldr	r2, [pc, #256]	@ (8002b80 <TIM_Base_SetConfig+0x124>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a3f      	ldr	r2, [pc, #252]	@ (8002b84 <TIM_Base_SetConfig+0x128>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b88 <TIM_Base_SetConfig+0x12c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3d      	ldr	r2, [pc, #244]	@ (8002b8c <TIM_Base_SetConfig+0x130>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d108      	bne.n	8002aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a32      	ldr	r2, [pc, #200]	@ (8002b7c <TIM_Base_SetConfig+0x120>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d02b      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002abc:	d027      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8002b80 <TIM_Base_SetConfig+0x124>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d023      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b84 <TIM_Base_SetConfig+0x128>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01f      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <TIM_Base_SetConfig+0x12c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01b      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8002b8c <TIM_Base_SetConfig+0x130>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d017      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b90 <TIM_Base_SetConfig+0x134>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <TIM_Base_SetConfig+0x138>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00f      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a29      	ldr	r2, [pc, #164]	@ (8002b98 <TIM_Base_SetConfig+0x13c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a28      	ldr	r2, [pc, #160]	@ (8002b9c <TIM_Base_SetConfig+0x140>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a27      	ldr	r2, [pc, #156]	@ (8002ba0 <TIM_Base_SetConfig+0x144>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <TIM_Base_SetConfig+0x148>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a0e      	ldr	r2, [pc, #56]	@ (8002b7c <TIM_Base_SetConfig+0x120>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0xf2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a10      	ldr	r2, [pc, #64]	@ (8002b8c <TIM_Base_SetConfig+0x130>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d103      	bne.n	8002b56 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	601a      	str	r2, [r3, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800
 8002b88:	40000c00 	.word	0x40000c00
 8002b8c:	40010400 	.word	0x40010400
 8002b90:	40014000 	.word	0x40014000
 8002b94:	40014400 	.word	0x40014400
 8002b98:	40014800 	.word	0x40014800
 8002b9c:	40001800 	.word	0x40001800
 8002ba0:	40001c00 	.word	0x40001c00
 8002ba4:	40002000 	.word	0x40002000

08002ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f023 030a 	bic.w	r3, r3, #10
 8002be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	621a      	str	r2, [r3, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b087      	sub	sp, #28
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f023 0210 	bic.w	r2, r3, #16
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	031b      	lsls	r3, r3, #12
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 0307 	orr.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	021a      	lsls	r2, r3, #8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e05a      	b.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	@ (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d40:	d01d      	beq.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d018      	beq.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00e      	beq.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	@ (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a15      	ldr	r2, [pc, #84]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10c      	bne.n	8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	40010400 	.word	0x40010400
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40001800 	.word	0x40001800

08002dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <memset>:
 8002dfc:	4402      	add	r2, r0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d100      	bne.n	8002e06 <memset+0xa>
 8002e04:	4770      	bx	lr
 8002e06:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0a:	e7f9      	b.n	8002e00 <memset+0x4>

08002e0c <__libc_init_array>:
 8002e0c:	b570      	push	{r4, r5, r6, lr}
 8002e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002e44 <__libc_init_array+0x38>)
 8002e10:	4c0d      	ldr	r4, [pc, #52]	@ (8002e48 <__libc_init_array+0x3c>)
 8002e12:	1b64      	subs	r4, r4, r5
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	2600      	movs	r6, #0
 8002e18:	42a6      	cmp	r6, r4
 8002e1a:	d109      	bne.n	8002e30 <__libc_init_array+0x24>
 8002e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8002e4c <__libc_init_array+0x40>)
 8002e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8002e50 <__libc_init_array+0x44>)
 8002e20:	f000 f818 	bl	8002e54 <_init>
 8002e24:	1b64      	subs	r4, r4, r5
 8002e26:	10a4      	asrs	r4, r4, #2
 8002e28:	2600      	movs	r6, #0
 8002e2a:	42a6      	cmp	r6, r4
 8002e2c:	d105      	bne.n	8002e3a <__libc_init_array+0x2e>
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e34:	4798      	blx	r3
 8002e36:	3601      	adds	r6, #1
 8002e38:	e7ee      	b.n	8002e18 <__libc_init_array+0xc>
 8002e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3e:	4798      	blx	r3
 8002e40:	3601      	adds	r6, #1
 8002e42:	e7f2      	b.n	8002e2a <__libc_init_array+0x1e>
 8002e44:	08002e84 	.word	0x08002e84
 8002e48:	08002e84 	.word	0x08002e84
 8002e4c:	08002e84 	.word	0x08002e84
 8002e50:	08002e88 	.word	0x08002e88

08002e54 <_init>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr

08002e60 <_fini>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr
