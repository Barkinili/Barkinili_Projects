
ASIS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003264  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080033ec  080033ec  000043ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800341c  0800341c  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800341c  0800341c  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800341c  0800341c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800341c  0800341c  0000441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003420  08003420  00004420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003424  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005014  2**0
                  CONTENTS
 10 .bss          00000100  20000014  20000014  00005014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  00005014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089fa  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001476  00000000  00000000  0000da3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0000eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063b  00000000  00000000  0000f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f5c8  00000000  00000000  0000fd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ab9  00000000  00000000  0002f2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c594c  00000000  00000000  00038d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe6e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021d0  00000000  00000000  000fe72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001008fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033d4 	.word	0x080033d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080033d4 	.word	0x080033d4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fc15 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f927 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fae1 	bl	800079c <MX_GPIO_Init>
  MX_HRTIM1_Init();
 80001da:	f000 f977 	bl	80004cc <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 80001de:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80001e2:	488b      	ldr	r0, [pc, #556]	@ (8000410 <main+0x248>)
 80001e4:	f001 fa4b 	bl	800167e <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_C);
 80001e8:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80001ec:	4888      	ldr	r0, [pc, #544]	@ (8000410 <main+0x248>)
 80001ee:	f001 fa46 	bl	800167e <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_D);
 80001f2:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 80001f6:	4886      	ldr	r0, [pc, #536]	@ (8000410 <main+0x248>)
 80001f8:	f001 fa41 	bl	800167e <HAL_HRTIM_WaveformCountStart>
	  //HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg;


	  //pTimeBaseCfg.Period = periode_ayar_1;

	  pCompareCfg.CompareValue = periode_ayar_1* TIM_DUTY_CYCLE;
 80001fc:	4b85      	ldr	r3, [pc, #532]	@ (8000414 <main+0x24c>)
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	ee07 3a90 	vmov	s15, r3
 8000204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000208:	4b83      	ldr	r3, [pc, #524]	@ (8000418 <main+0x250>)
 800020a:	edd3 7a00 	vldr	s15, [r3]
 800020e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000216:	ee17 3a90 	vmov	r3, s15
 800021a:	60fb      	str	r3, [r7, #12]
	  pCompareCfg1.CompareValue = periode_ayar_1 * (1 - TIM_DUTY_CYCLE);
 800021c:	4b7d      	ldr	r3, [pc, #500]	@ (8000414 <main+0x24c>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	ee07 3a90 	vmov	s15, r3
 8000224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000228:	4b7b      	ldr	r3, [pc, #492]	@ (8000418 <main+0x250>)
 800022a:	edd3 7a00 	vldr	s15, [r3]
 800022e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000232:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800023a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800023e:	ee17 3a90 	vmov	r3, s15
 8000242:	603b      	str	r3, [r7, #0]





	  HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	2201      	movs	r2, #1
 800024a:	2100      	movs	r1, #0
 800024c:	4870      	ldr	r0, [pc, #448]	@ (8000410 <main+0x248>)
 800024e:	f001 f81d 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
	  HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg);
 8000252:	f107 030c 	add.w	r3, r7, #12
 8000256:	2201      	movs	r2, #1
 8000258:	2102      	movs	r1, #2
 800025a:	486d      	ldr	r0, [pc, #436]	@ (8000410 <main+0x248>)
 800025c:	f001 f816 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
	  HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg);
 8000260:	f107 030c 	add.w	r3, r7, #12
 8000264:	2201      	movs	r2, #1
 8000266:	2103      	movs	r1, #3
 8000268:	4869      	ldr	r0, [pc, #420]	@ (8000410 <main+0x248>)
 800026a:	f001 f80f 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
	  HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg1);
 800026e:	463b      	mov	r3, r7
 8000270:	2202      	movs	r2, #2
 8000272:	2100      	movs	r1, #0
 8000274:	4866      	ldr	r0, [pc, #408]	@ (8000410 <main+0x248>)
 8000276:	f001 f809 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
	  HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg1);
 800027a:	463b      	mov	r3, r7
 800027c:	2202      	movs	r2, #2
 800027e:	2102      	movs	r1, #2
 8000280:	4863      	ldr	r0, [pc, #396]	@ (8000410 <main+0x248>)
 8000282:	f001 f803 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
	  HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg1);
 8000286:	463b      	mov	r3, r7
 8000288:	2202      	movs	r2, #2
 800028a:	2103      	movs	r1, #3
 800028c:	4860      	ldr	r0, [pc, #384]	@ (8000410 <main+0x248>)
 800028e:	f000 fffd 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>


	  switch(step) {
 8000292:	4b62      	ldr	r3, [pc, #392]	@ (800041c <main+0x254>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b05      	cmp	r3, #5
 8000298:	f200 80a6 	bhi.w	80003e8 <main+0x220>
 800029c:	a201      	add	r2, pc, #4	@ (adr r2, 80002a4 <main+0xdc>)
 800029e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a2:	bf00      	nop
 80002a4:	080002bd 	.word	0x080002bd
 80002a8:	080002ef 	.word	0x080002ef
 80002ac:	08000321 	.word	0x08000321
 80002b0:	08000353 	.word	0x08000353
 80002b4:	08000385 	.word	0x08000385
 80002b8:	080003b7 	.word	0x080003b7
	    case 0:

	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA2);
 80002bc:	2102      	movs	r1, #2
 80002be:	4854      	ldr	r0, [pc, #336]	@ (8000410 <main+0x248>)
 80002c0:	f001 f9b0 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC1);
 80002c4:	2110      	movs	r1, #16
 80002c6:	4852      	ldr	r0, [pc, #328]	@ (8000410 <main+0x248>)
 80002c8:	f001 f9ac 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TD1);
 80002cc:	2140      	movs	r1, #64	@ 0x40
 80002ce:	4850      	ldr	r0, [pc, #320]	@ (8000410 <main+0x248>)
 80002d0:	f001 f9a8 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TD2);
 80002d4:	2180      	movs	r1, #128	@ 0x80
 80002d6:	484e      	ldr	r0, [pc, #312]	@ (8000410 <main+0x248>)
 80002d8:	f001 f9a4 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>

	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1);
 80002dc:	2101      	movs	r1, #1
 80002de:	484c      	ldr	r0, [pc, #304]	@ (8000410 <main+0x248>)
 80002e0:	f001 f973 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC2);
 80002e4:	2120      	movs	r1, #32
 80002e6:	484a      	ldr	r0, [pc, #296]	@ (8000410 <main+0x248>)
 80002e8:	f001 f96f 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      break;
 80002ec:	e07c      	b.n	80003e8 <main+0x220>

	    case 1:

	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA2);
 80002ee:	2102      	movs	r1, #2
 80002f0:	4847      	ldr	r0, [pc, #284]	@ (8000410 <main+0x248>)
 80002f2:	f001 f997 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC1);
 80002f6:	2110      	movs	r1, #16
 80002f8:	4845      	ldr	r0, [pc, #276]	@ (8000410 <main+0x248>)
 80002fa:	f001 f993 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC2);
 80002fe:	2120      	movs	r1, #32
 8000300:	4843      	ldr	r0, [pc, #268]	@ (8000410 <main+0x248>)
 8000302:	f001 f98f 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TD1);
 8000306:	2140      	movs	r1, #64	@ 0x40
 8000308:	4841      	ldr	r0, [pc, #260]	@ (8000410 <main+0x248>)
 800030a:	f001 f98b 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>

	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1);
 800030e:	2101      	movs	r1, #1
 8000310:	483f      	ldr	r0, [pc, #252]	@ (8000410 <main+0x248>)
 8000312:	f001 f95a 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TD2);
 8000316:	2180      	movs	r1, #128	@ 0x80
 8000318:	483d      	ldr	r0, [pc, #244]	@ (8000410 <main+0x248>)
 800031a:	f001 f956 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      break;
 800031e:	e063      	b.n	80003e8 <main+0x220>

	    case 2:
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1);
 8000320:	2101      	movs	r1, #1
 8000322:	483b      	ldr	r0, [pc, #236]	@ (8000410 <main+0x248>)
 8000324:	f001 f97e 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA2);
 8000328:	2102      	movs	r1, #2
 800032a:	4839      	ldr	r0, [pc, #228]	@ (8000410 <main+0x248>)
 800032c:	f001 f97a 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
   		  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC2);
 8000330:	2120      	movs	r1, #32
 8000332:	4837      	ldr	r0, [pc, #220]	@ (8000410 <main+0x248>)
 8000334:	f001 f976 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
   		  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TD1);
 8000338:	2140      	movs	r1, #64	@ 0x40
 800033a:	4835      	ldr	r0, [pc, #212]	@ (8000410 <main+0x248>)
 800033c:	f001 f972 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>

	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1);
 8000340:	2110      	movs	r1, #16
 8000342:	4833      	ldr	r0, [pc, #204]	@ (8000410 <main+0x248>)
 8000344:	f001 f941 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TD2);
 8000348:	2180      	movs	r1, #128	@ 0x80
 800034a:	4831      	ldr	r0, [pc, #196]	@ (8000410 <main+0x248>)
 800034c:	f001 f93d 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      break;
 8000350:	e04a      	b.n	80003e8 <main+0x220>

	    case 3:
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1);
 8000352:	2101      	movs	r1, #1
 8000354:	482e      	ldr	r0, [pc, #184]	@ (8000410 <main+0x248>)
 8000356:	f001 f965 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC2);
 800035a:	2120      	movs	r1, #32
 800035c:	482c      	ldr	r0, [pc, #176]	@ (8000410 <main+0x248>)
 800035e:	f001 f961 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TD1);
 8000362:	2140      	movs	r1, #64	@ 0x40
 8000364:	482a      	ldr	r0, [pc, #168]	@ (8000410 <main+0x248>)
 8000366:	f001 f95d 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TD2);
 800036a:	2180      	movs	r1, #128	@ 0x80
 800036c:	4828      	ldr	r0, [pc, #160]	@ (8000410 <main+0x248>)
 800036e:	f001 f959 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>

	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1);
 8000372:	2110      	movs	r1, #16
 8000374:	4826      	ldr	r0, [pc, #152]	@ (8000410 <main+0x248>)
 8000376:	f001 f928 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA2);
 800037a:	2102      	movs	r1, #2
 800037c:	4824      	ldr	r0, [pc, #144]	@ (8000410 <main+0x248>)
 800037e:	f001 f924 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      break;
 8000382:	e031      	b.n	80003e8 <main+0x220>

	    case 4:
	      HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1);
 8000384:	2101      	movs	r1, #1
 8000386:	4822      	ldr	r0, [pc, #136]	@ (8000410 <main+0x248>)
 8000388:	f001 f94c 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
   		  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC1);
 800038c:	2110      	movs	r1, #16
 800038e:	4820      	ldr	r0, [pc, #128]	@ (8000410 <main+0x248>)
 8000390:	f001 f948 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
   		  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC2);
 8000394:	2120      	movs	r1, #32
 8000396:	481e      	ldr	r0, [pc, #120]	@ (8000410 <main+0x248>)
 8000398:	f001 f944 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
   		  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TD2);
 800039c:	2180      	movs	r1, #128	@ 0x80
 800039e:	481c      	ldr	r0, [pc, #112]	@ (8000410 <main+0x248>)
 80003a0:	f001 f940 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>

	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TD1);
 80003a4:	2140      	movs	r1, #64	@ 0x40
 80003a6:	481a      	ldr	r0, [pc, #104]	@ (8000410 <main+0x248>)
 80003a8:	f001 f90f 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA2);
 80003ac:	2102      	movs	r1, #2
 80003ae:	4818      	ldr	r0, [pc, #96]	@ (8000410 <main+0x248>)
 80003b0:	f001 f90b 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      break;
 80003b4:	e018      	b.n	80003e8 <main+0x220>

	    case 5:
    	  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1);
 80003b6:	2101      	movs	r1, #1
 80003b8:	4815      	ldr	r0, [pc, #84]	@ (8000410 <main+0x248>)
 80003ba:	f001 f933 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
   		  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA2);
 80003be:	2102      	movs	r1, #2
 80003c0:	4813      	ldr	r0, [pc, #76]	@ (8000410 <main+0x248>)
 80003c2:	f001 f92f 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
   		  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC1);
 80003c6:	2110      	movs	r1, #16
 80003c8:	4811      	ldr	r0, [pc, #68]	@ (8000410 <main+0x248>)
 80003ca:	f001 f92b 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>
   		  HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TD2);
 80003ce:	2180      	movs	r1, #128	@ 0x80
 80003d0:	480f      	ldr	r0, [pc, #60]	@ (8000410 <main+0x248>)
 80003d2:	f001 f927 	bl	8001624 <HAL_HRTIM_WaveformOutputStop>

	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TD1);
 80003d6:	2140      	movs	r1, #64	@ 0x40
 80003d8:	480d      	ldr	r0, [pc, #52]	@ (8000410 <main+0x248>)
 80003da:	f001 f8f6 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC2);
 80003de:	2120      	movs	r1, #32
 80003e0:	480b      	ldr	r0, [pc, #44]	@ (8000410 <main+0x248>)
 80003e2:	f001 f8f2 	bl	80015ca <HAL_HRTIM_WaveformOutputStart>
	      break;
 80003e6:	bf00      	nop
	  }
	  HAL_Delay(100);
 80003e8:	2064      	movs	r0, #100	@ 0x64
 80003ea:	f000 fb6d 	bl	8000ac8 <HAL_Delay>
	  step = (step+1) % 6;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <main+0x254>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <main+0x258>)
 80003f6:	fb83 3102 	smull	r3, r1, r3, r2
 80003fa:	17d3      	asrs	r3, r2, #31
 80003fc:	1ac9      	subs	r1, r1, r3
 80003fe:	460b      	mov	r3, r1
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	440b      	add	r3, r1
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	1ad1      	subs	r1, r2, r3
 8000408:	b2ca      	uxtb	r2, r1
 800040a:	4b04      	ldr	r3, [pc, #16]	@ (800041c <main+0x254>)
 800040c:	701a      	strb	r2, [r3, #0]
  {
 800040e:	e6f5      	b.n	80001fc <main+0x34>
 8000410:	20000030 	.word	0x20000030
 8000414:	20000004 	.word	0x20000004
 8000418:	20000000 	.word	0x20000000
 800041c:	2000010c 	.word	0x2000010c
 8000420:	2aaaaaab 	.word	0x2aaaaaab

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b096      	sub	sp, #88	@ 0x58
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800042e:	2228      	movs	r2, #40	@ 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f002 ffa2 	bl	800337c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	f107 031c 	add.w	r3, r7, #28
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000448:	463b      	mov	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045a:	2302      	movs	r3, #2
 800045c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045e:	2301      	movs	r3, #1
 8000460:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000462:	2310      	movs	r3, #16
 8000464:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000466:	2300      	movs	r3, #0
 8000468:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fc80 	bl	8001d74 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800047a:	f000 f9b3 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f002 fc79 	bl	8002d90 <HAL_RCC_ClockConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004a4:	f000 f99e 	bl	80007e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80004a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80004ac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b2:	463b      	mov	r3, r7
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 fe2d 	bl	8003114 <HAL_RCCEx_PeriphCLKConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004c0:	f000 f990 	bl	80007e4 <Error_Handler>
  }
}
 80004c4:	bf00      	nop
 80004c6:	3758      	adds	r7, #88	@ 0x58
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b0a4      	sub	sp, #144	@ 0x90
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80004d2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80004e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004e4:	2254      	movs	r2, #84	@ 0x54
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 ff47 	bl	800337c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2220      	movs	r2, #32
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f002 ff3b 	bl	800337c <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000506:	4ba2      	ldr	r3, [pc, #648]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000508:	4aa2      	ldr	r2, [pc, #648]	@ (8000794 <MX_HRTIM1_Init+0x2c8>)
 800050a:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800050c:	4ba0      	ldr	r3, [pc, #640]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000512:	4b9f      	ldr	r3, [pc, #636]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000518:	489d      	ldr	r0, [pc, #628]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 800051a:	f000 fd51 	bl	8000fc0 <HAL_HRTIM_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_HRTIM1_Init+0x5c>
  {
    Error_Handler();
 8000524:	f000 f95e 	bl	80007e4 <Error_Handler>
  }
  pTimeBaseCfg.Period = periode_ayar_1;
 8000528:	4b9b      	ldr	r3, [pc, #620]	@ (8000798 <MX_HRTIM1_Init+0x2cc>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000536:	2305      	movs	r3, #5
 8000538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800053c:	2308      	movs	r3, #8
 800053e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000542:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000546:	461a      	mov	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	4891      	ldr	r0, [pc, #580]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 800054c:	f000 fe04 	bl	8001158 <HAL_HRTIM_TimeBaseConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_HRTIM1_Init+0x8e>
  {
    Error_Handler();
 8000556:	f000 f945 	bl	80007e4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800055a:	2300      	movs	r3, #0
 800055c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800055e:	2300      	movs	r3, #0
 8000560:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8000562:	2300      	movs	r3, #0
 8000564:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000566:	2300      	movs	r3, #0
 8000568:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 800056a:	2301      	movs	r3, #1
 800056c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800056e:	2300      	movs	r3, #0
 8000570:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000572:	2300      	movs	r3, #0
 8000574:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000576:	2300      	movs	r3, #0
 8000578:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800057e:	2300      	movs	r3, #0
 8000580:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000582:	2300      	movs	r3, #0
 8000584:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000586:	2300      	movs	r3, #0
 8000588:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800058a:	2300      	movs	r3, #0
 800058c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800058e:	2300      	movs	r3, #0
 8000590:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000596:	2300      	movs	r3, #0
 8000598:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800059a:	2300      	movs	r3, #0
 800059c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800059e:	2300      	movs	r3, #0
 80005a0:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80005aa:	2300      	movs	r3, #0
 80005ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80005ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005b2:	461a      	mov	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	4876      	ldr	r0, [pc, #472]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 80005b8:	f000 fdf6 	bl	80011a8 <HAL_HRTIM_WaveformTimerConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_HRTIM1_Init+0xfa>
  {
    Error_Handler();
 80005c2:	f000 f90f 	bl	80007e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80005c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005ca:	461a      	mov	r2, r3
 80005cc:	2102      	movs	r1, #2
 80005ce:	4870      	ldr	r0, [pc, #448]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 80005d0:	f000 fdea 	bl	80011a8 <HAL_HRTIM_WaveformTimerConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_HRTIM1_Init+0x112>
  {
    Error_Handler();
 80005da:	f000 f903 	bl	80007e4 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80005de:	2300      	movs	r3, #0
 80005e0:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80005e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005e6:	461a      	mov	r2, r3
 80005e8:	2103      	movs	r1, #3
 80005ea:	4869      	ldr	r0, [pc, #420]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 80005ec:	f000 fddc 	bl	80011a8 <HAL_HRTIM_WaveformTimerConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_HRTIM1_Init+0x12e>
  {
    Error_Handler();
 80005f6:	f000 f8f5 	bl	80007e4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0xFFDF ;
 80005fa:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 80005fe:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	2201      	movs	r2, #1
 8000606:	2100      	movs	r1, #0
 8000608:	4861      	ldr	r0, [pc, #388]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 800060a:	f000 fe3f 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_HRTIM1_Init+0x14c>
  {
    Error_Handler();
 8000614:	f000 f8e6 	bl	80007e4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0xFFFD;
 8000618:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800061c:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000622:	2300      	movs	r3, #0
 8000624:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2202      	movs	r2, #2
 800062c:	2100      	movs	r1, #0
 800062e:	4858      	ldr	r0, [pc, #352]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000630:	f000 fe2c 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_HRTIM1_Init+0x172>
  {
    Error_Handler();
 800063a:	f000 f8d3 	bl	80007e4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2202      	movs	r2, #2
 8000644:	2102      	movs	r1, #2
 8000646:	4852      	ldr	r0, [pc, #328]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000648:	f000 fe20 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_HRTIM1_Init+0x18a>
  {
    Error_Handler();
 8000652:	f000 f8c7 	bl	80007e4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2202      	movs	r2, #2
 800065c:	2103      	movs	r1, #3
 800065e:	484c      	ldr	r0, [pc, #304]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000660:	f000 fe14 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_HRTIM1_Init+0x1a2>
  {
    Error_Handler();
 800066a:	f000 f8bb 	bl	80007e4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8000672:	2304      	movs	r3, #4
 8000674:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000676:	2308      	movs	r3, #8
 8000678:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	2201      	movs	r2, #1
 8000692:	2100      	movs	r1, #0
 8000694:	483e      	ldr	r0, [pc, #248]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000696:	f000 ff67 	bl	8001568 <HAL_HRTIM_WaveformOutputConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 80006a0:	f000 f8a0 	bl	80007e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	2210      	movs	r2, #16
 80006a8:	2102      	movs	r1, #2
 80006aa:	4839      	ldr	r0, [pc, #228]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 80006ac:	f000 ff5c 	bl	8001568 <HAL_HRTIM_WaveformOutputConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_HRTIM1_Init+0x1ee>
  {
    Error_Handler();
 80006b6:	f000 f895 	bl	80007e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	2240      	movs	r2, #64	@ 0x40
 80006be:	2103      	movs	r1, #3
 80006c0:	4833      	ldr	r0, [pc, #204]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 80006c2:	f000 ff51 	bl	8001568 <HAL_HRTIM_WaveformOutputConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_HRTIM1_Init+0x204>
  {
    Error_Handler();
 80006cc:	f000 f88a 	bl	80007e4 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 80006d0:	2310      	movs	r3, #16
 80006d2:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 80006d4:	2304      	movs	r3, #4
 80006d6:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	2202      	movs	r2, #2
 80006dc:	2100      	movs	r1, #0
 80006de:	482c      	ldr	r0, [pc, #176]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 80006e0:	f000 ff42 	bl	8001568 <HAL_HRTIM_WaveformOutputConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_HRTIM1_Init+0x222>
  {
    Error_Handler();
 80006ea:	f000 f87b 	bl	80007e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2220      	movs	r2, #32
 80006f2:	2102      	movs	r1, #2
 80006f4:	4826      	ldr	r0, [pc, #152]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 80006f6:	f000 ff37 	bl	8001568 <HAL_HRTIM_WaveformOutputConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_HRTIM1_Init+0x238>
  {
    Error_Handler();
 8000700:	f000 f870 	bl	80007e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	2103      	movs	r1, #3
 800070a:	4821      	ldr	r0, [pc, #132]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 800070c:	f000 ff2c 	bl	8001568 <HAL_HRTIM_WaveformOutputConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_HRTIM1_Init+0x24e>
  {
    Error_Handler();
 8000716:	f000 f865 	bl	80007e4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 800071a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800071e:	461a      	mov	r2, r3
 8000720:	2102      	movs	r1, #2
 8000722:	481b      	ldr	r0, [pc, #108]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000724:	f000 fd18 	bl	8001158 <HAL_HRTIM_TimeBaseConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_HRTIM1_Init+0x266>
  {
    Error_Handler();
 800072e:	f000 f859 	bl	80007e4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0xFFFD ;
 8000732:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8000736:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	2201      	movs	r2, #1
 800073e:	2102      	movs	r1, #2
 8000740:	4813      	ldr	r0, [pc, #76]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000742:	f000 fda3 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_HRTIM1_Init+0x284>
  {
    Error_Handler();
 800074c:	f000 f84a 	bl	80007e4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000750:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000754:	461a      	mov	r2, r3
 8000756:	2103      	movs	r1, #3
 8000758:	480d      	ldr	r0, [pc, #52]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 800075a:	f000 fcfd 	bl	8001158 <HAL_HRTIM_TimeBaseConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_HRTIM1_Init+0x29c>
  {
    Error_Handler();
 8000764:	f000 f83e 	bl	80007e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	2201      	movs	r2, #1
 800076e:	2103      	movs	r1, #3
 8000770:	4807      	ldr	r0, [pc, #28]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000772:	f000 fd8b 	bl	800128c <HAL_HRTIM_WaveformCompareConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_HRTIM1_Init+0x2b4>
  {
    Error_Handler();
 800077c:	f000 f832 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <MX_HRTIM1_Init+0x2c4>)
 8000782:	f000 f879 	bl	8000878 <HAL_HRTIM_MspPostInit>

}
 8000786:	bf00      	nop
 8000788:	3790      	adds	r7, #144	@ 0x90
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000030 	.word	0x20000030
 8000794:	40017400 	.word	0x40017400
 8000798:	20000004 	.word	0x20000004

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_GPIO_Init+0x44>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <MX_GPIO_Init+0x44>)
 80007a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_GPIO_Init+0x44>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_GPIO_Init+0x44>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <MX_GPIO_Init+0x44>)
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_GPIO_Init+0x44>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x44>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_MspInit+0x44>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_MspInit+0x44>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_MspInit+0x44>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <HAL_HRTIM_MspInit+0x38>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d10b      	bne.n	8000862 <HAL_HRTIM_MspInit+0x2a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_HRTIM_MspInit+0x3c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a09      	ldr	r2, [pc, #36]	@ (8000874 <HAL_HRTIM_MspInit+0x3c>)
 8000850:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <HAL_HRTIM_MspInit+0x3c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40017400 	.word	0x40017400
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a20      	ldr	r2, [pc, #128]	@ (8000918 <HAL_HRTIM_MspPostInit+0xa0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d13a      	bne.n	8000910 <HAL_HRTIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <HAL_HRTIM_MspPostInit+0xa4>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a1f      	ldr	r2, [pc, #124]	@ (800091c <HAL_HRTIM_MspPostInit+0xa4>)
 80008a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <HAL_HRTIM_MspPostInit+0xa4>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_HRTIM_MspPostInit+0xa4>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a19      	ldr	r2, [pc, #100]	@ (800091c <HAL_HRTIM_MspPostInit+0xa4>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_HRTIM_MspPostInit+0xa4>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> HRTIM1_CHD1
    PB15     ------> HRTIM1_CHD2
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008ca:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80008dc:	230d      	movs	r3, #13
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <HAL_HRTIM_MspPostInit+0xa8>)
 80008e8:	f000 f9f8 	bl	8000cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80008fe:	230d      	movs	r3, #13
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090c:	f000 f9e6 	bl	8000cdc <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	@ 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40017400 	.word	0x40017400
 800091c:	40021000 	.word	0x40021000
 8000920:	48000400 	.word	0x48000400

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <NMI_Handler+0x4>

0800092c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <MemManage_Handler+0x4>

0800093c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <UsageFault_Handler+0x4>

0800094c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 f885 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ac:	f7ff ffea 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f002 fcd9 	bl	800338c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009da:	f7ff fbf5 	bl	80001c8 <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009ec:	08003424 	.word	0x08003424
  ldr r2, =_sbss
 80009f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009f4:	20000114 	.word	0x20000114

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <HAL_Init+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <HAL_Init+0x28>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f931 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	200f      	movs	r0, #15
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff feea 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f93b 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f911 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000010 	.word	0x20000010
 8000a84:	2000000c 	.word	0x2000000c

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000010 	.word	0x20000010
 8000aac:	20000110 	.word	0x20000110

08000ab0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000110 	.word	0x20000110

08000ac8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff ffee 	bl	8000ab0 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_Delay+0x44>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffde 	bl	8000ab0 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000010 	.word	0x20000010

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff47 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff5c 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff8e 	bl	8000bc8 <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffb0 	bl	8000c30 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	e14e      	b.n	8000f8a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 8140 	beq.w	8000f84 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d005      	beq.n	8000d1c <HAL_GPIO_Init+0x40>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d130      	bne.n	8000d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	f003 0201 	and.w	r2, r3, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d017      	beq.n	8000dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d123      	bne.n	8000e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	220f      	movs	r2, #15
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	6939      	ldr	r1, [r7, #16]
 8000e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0203 	and.w	r2, r3, #3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 809a 	beq.w	8000f84 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	4b55      	ldr	r3, [pc, #340]	@ (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a54      	ldr	r2, [pc, #336]	@ (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b52      	ldr	r3, [pc, #328]	@ (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e68:	4a50      	ldr	r2, [pc, #320]	@ (8000fac <HAL_GPIO_Init+0x2d0>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x1e0>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a46      	ldr	r2, [pc, #280]	@ (8000fb0 <HAL_GPIO_Init+0x2d4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1dc>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a45      	ldr	r2, [pc, #276]	@ (8000fb4 <HAL_GPIO_Init+0x2d8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1d8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a44      	ldr	r2, [pc, #272]	@ (8000fb8 <HAL_GPIO_Init+0x2dc>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1d4>
 8000eac:	2303      	movs	r3, #3
 8000eae:	e006      	b.n	8000ebe <HAL_GPIO_Init+0x1e2>
 8000eb0:	2305      	movs	r3, #5
 8000eb2:	e004      	b.n	8000ebe <HAL_GPIO_Init+0x1e2>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e002      	b.n	8000ebe <HAL_GPIO_Init+0x1e2>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <HAL_GPIO_Init+0x1e2>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	f002 0203 	and.w	r2, r2, #3
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	4093      	lsls	r3, r2
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ece:	4937      	ldr	r1, [pc, #220]	@ (8000fac <HAL_GPIO_Init+0x2d0>)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000edc:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f00:	4a2e      	ldr	r2, [pc, #184]	@ (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f06:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f2a:	4a24      	ldr	r2, [pc, #144]	@ (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f47f aea9 	bne.w	8000cec <HAL_GPIO_Init+0x10>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	371c      	adds	r7, #28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	48000c00 	.word	0x48000c00
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0ba      	b.n	8001148 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d02e      	beq.n	8001074 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a4d      	ldr	r2, [pc, #308]	@ (8001150 <HAL_HRTIM_Init+0x190>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d10b      	bne.n	8001038 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001020:	4b4c      	ldr	r3, [pc, #304]	@ (8001154 <HAL_HRTIM_Init+0x194>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a4b      	ldr	r2, [pc, #300]	@ (8001154 <HAL_HRTIM_Init+0x194>)
 8001026:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <HAL_HRTIM_Init+0x194>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001046:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800105c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fbdf 	bl	8000838 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d012      	beq.n	80010ac <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001094:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80010bc:	2300      	movs	r3, #0
 80010be:	75fb      	strb	r3, [r7, #23]
 80010c0:	e03e      	b.n	8001140 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80010c2:	7dfa      	ldrb	r2, [r7, #23]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	3318      	adds	r3, #24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	331c      	adds	r3, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80010ea:	7dfa      	ldrb	r2, [r7, #23]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	3320      	adds	r3, #32
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80010fe:	7dfa      	ldrb	r2, [r7, #23]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	3324      	adds	r3, #36	@ 0x24
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001112:	7dfa      	ldrb	r2, [r7, #23]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3328      	adds	r3, #40	@ 0x28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001126:	7dfa      	ldrb	r2, [r7, #23]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	1a9b      	subs	r3, r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3330      	adds	r3, #48	@ 0x30
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	3301      	adds	r3, #1
 800113e:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b05      	cmp	r3, #5
 8001144:	d9bd      	bls.n	80010c2 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40017400 	.word	0x40017400
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d101      	bne.n	8001174 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8001170:	2302      	movs	r3, #2
 8001172:	e015      	b.n	80011a0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2202      	movs	r2, #2
 8001178:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d104      	bne.n	800118c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 faa5 	bl	80016d4 <HRTIM_MasterBase_Config>
 800118a:	e004      	b.n	8001196 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 face 	bl	8001732 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d101      	bne.n	80011c4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80011c0:	2302      	movs	r3, #2
 80011c2:	e05f      	b.n	8001284 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e058      	b.n	8001284 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d104      	bne.n	80011f2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 fae1 	bl	80017b2 <HRTIM_MasterWaveform_Config>
 80011f0:	e004      	b.n	80011fc <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 fb42 	bl	8001880 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4403      	add	r3, r0
 800120e:	3320      	adds	r3, #32
 8001210:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6859      	ldr	r1, [r3, #4]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4403      	add	r3, r0
 8001224:	3324      	adds	r3, #36	@ 0x24
 8001226:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6899      	ldr	r1, [r3, #8]
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4403      	add	r3, r0
 800123a:	3328      	adds	r3, #40	@ 0x28
 800123c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68d9      	ldr	r1, [r3, #12]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4403      	add	r3, r0
 8001250:	332c      	adds	r3, #44	@ 0x2c
 8001252:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6919      	ldr	r1, [r3, #16]
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4403      	add	r3, r0
 8001266:	3330      	adds	r3, #48	@ 0x30
 8001268:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 fd1f 	bl	8001cb0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d101      	bne.n	80012aa <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
 80012a8:	e157      	b.n	800155a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e150      	b.n	800155a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2202      	movs	r2, #2
 80012c4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d140      	bne.n	8001350 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	2b07      	cmp	r3, #7
 80012d4:	d82a      	bhi.n	800132c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80012d6:	a201      	add	r2, pc, #4	@ (adr r2, 80012dc <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080012fd 	.word	0x080012fd
 80012e0:	08001309 	.word	0x08001309
 80012e4:	0800132d 	.word	0x0800132d
 80012e8:	08001315 	.word	0x08001315
 80012ec:	0800132d 	.word	0x0800132d
 80012f0:	0800132d 	.word	0x0800132d
 80012f4:	0800132d 	.word	0x0800132d
 80012f8:	08001321 	.word	0x08001321
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	61da      	str	r2, [r3, #28]
        break;
 8001306:	e01a      	b.n	800133e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8001312:	e014      	b.n	800133e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 800131e:	e00e      	b.n	800133e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800132a:	e008      	b.n	800133e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2207      	movs	r2, #7
 8001330:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 800133c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b07      	cmp	r3, #7
 8001348:	f040 80fe 	bne.w	8001548 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e104      	b.n	800155a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	2b07      	cmp	r3, #7
 8001356:	f200 80e3 	bhi.w	8001520 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800135a:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	08001381 	.word	0x08001381
 8001364:	08001395 	.word	0x08001395
 8001368:	08001521 	.word	0x08001521
 800136c:	08001451 	.word	0x08001451
 8001370:	08001521 	.word	0x08001521
 8001374:	08001521 	.word	0x08001521
 8001378:	08001521 	.word	0x08001521
 800137c:	08001465 	.word	0x08001465
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6819      	ldr	r1, [r3, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	01db      	lsls	r3, r3, #7
 800138c:	440b      	add	r3, r1
 800138e:	339c      	adds	r3, #156	@ 0x9c
 8001390:	601a      	str	r2, [r3, #0]
        break;
 8001392:	e0d1      	b.n	8001538 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6819      	ldr	r1, [r3, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	01db      	lsls	r3, r3, #7
 80013a0:	440b      	add	r3, r1
 80013a2:	33a4      	adds	r3, #164	@ 0xa4
 80013a4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d03f      	beq.n	800142e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	01db      	lsls	r3, r3, #7
 80013b8:	4413      	add	r3, r2
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	6811      	ldr	r1, [r2, #0]
 80013c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3301      	adds	r3, #1
 80013c8:	01db      	lsls	r3, r3, #7
 80013ca:	440b      	add	r3, r1
 80013cc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	01db      	lsls	r3, r3, #7
 80013d8:	4413      	add	r3, r2
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	68f9      	ldr	r1, [r7, #12]
 80013e2:	6809      	ldr	r1, [r1, #0]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	01db      	lsls	r3, r3, #7
 80013ec:	440b      	add	r3, r1
 80013ee:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013f8:	d109      	bne.n	800140e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	01db      	lsls	r3, r3, #7
 8001406:	440b      	add	r3, r1
 8001408:	339c      	adds	r3, #156	@ 0x9c
 800140a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800140c:	e091      	b.n	8001532 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001416:	f040 808c 	bne.w	8001532 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	01db      	lsls	r3, r3, #7
 8001426:	440b      	add	r3, r1
 8001428:	33a8      	adds	r3, #168	@ 0xa8
 800142a:	601a      	str	r2, [r3, #0]
         break;
 800142c:	e081      	b.n	8001532 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3301      	adds	r3, #1
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	6811      	ldr	r1, [r2, #0]
 8001440:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3301      	adds	r3, #1
 8001448:	01db      	lsls	r3, r3, #7
 800144a:	440b      	add	r3, r1
 800144c:	601a      	str	r2, [r3, #0]
         break;
 800144e:	e070      	b.n	8001532 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	440b      	add	r3, r1
 800145e:	33a8      	adds	r3, #168	@ 0xa8
 8001460:	601a      	str	r2, [r3, #0]
        break;
 8001462:	e069      	b.n	8001538 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	01db      	lsls	r3, r3, #7
 8001470:	440b      	add	r3, r1
 8001472:	33ac      	adds	r3, #172	@ 0xac
 8001474:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d03f      	beq.n	80014fe <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3301      	adds	r3, #1
 8001486:	01db      	lsls	r3, r3, #7
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	6811      	ldr	r1, [r2, #0]
 8001490:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	3301      	adds	r3, #1
 8001498:	01db      	lsls	r3, r3, #7
 800149a:	440b      	add	r3, r1
 800149c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3301      	adds	r3, #1
 80014a6:	01db      	lsls	r3, r3, #7
 80014a8:	4413      	add	r3, r2
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	68f9      	ldr	r1, [r7, #12]
 80014b4:	6809      	ldr	r1, [r1, #0]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	3301      	adds	r3, #1
 80014bc:	01db      	lsls	r3, r3, #7
 80014be:	440b      	add	r3, r1
 80014c0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014ca:	d109      	bne.n	80014e0 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6819      	ldr	r1, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	440b      	add	r3, r1
 80014da:	339c      	adds	r3, #156	@ 0x9c
 80014dc:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80014de:	e02a      	b.n	8001536 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80014e8:	d125      	bne.n	8001536 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6819      	ldr	r1, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	01db      	lsls	r3, r3, #7
 80014f6:	440b      	add	r3, r1
 80014f8:	33a8      	adds	r3, #168	@ 0xa8
 80014fa:	601a      	str	r2, [r3, #0]
         break;
 80014fc:	e01b      	b.n	8001536 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	01db      	lsls	r3, r3, #7
 8001508:	4413      	add	r3, r2
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	6811      	ldr	r1, [r2, #0]
 8001510:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3301      	adds	r3, #1
 8001518:	01db      	lsls	r3, r3, #7
 800151a:	440b      	add	r3, r1
 800151c:	601a      	str	r2, [r3, #0]
         break;
 800151e:	e00a      	b.n	8001536 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2207      	movs	r2, #7
 8001524:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8001530:	e002      	b.n	8001538 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8001532:	bf00      	nop
 8001534:	e000      	b.n	8001538 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8001536:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b07      	cmp	r3, #7
 8001542:	d101      	bne.n	8001548 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e008      	b.n	800155a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop

08001568 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d101      	bne.n	8001586 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	e01d      	b.n	80015c2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8001590:	2302      	movs	r3, #2
 8001592:	e016      	b.n	80015c2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2202      	movs	r2, #2
 80015a0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 faa8 	bl	8001b00 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_HRTIM_WaveformOutputStart+0x18>
 80015de:	2302      	movs	r3, #2
 80015e0:	e01a      	b.n	8001618 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2202      	movs	r2, #2
 80015ee:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_HRTIM_WaveformOutputStop+0x18>
 8001638:	2302      	movs	r3, #2
 800163a:	e01a      	b.n	8001672 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 1398 	ldr.w	r1, [r3, #920]	@ 0x398
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	f8c3 2398 	str.w	r2, [r3, #920]	@ 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_HRTIM_WaveformCountStart+0x18>
 8001692:	2302      	movs	r3, #2
 8001694:	e018      	b.n	80016c8 <HAL_HRTIM_WaveformCountStart+0x4a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2202      	movs	r2, #2
 80016a2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6819      	ldr	r1, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f023 0307 	bic.w	r3, r3, #7
 80016ec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f023 0318 	bic.w	r3, r3, #24
 80016fe:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	6852      	ldr	r2, [r2, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001732:	b480      	push	{r7}
 8001734:	b087      	sub	sp, #28
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3301      	adds	r3, #1
 8001746:	01db      	lsls	r3, r3, #7
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f023 0307 	bic.w	r3, r3, #7
 8001754:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f023 0318 	bic.w	r3, r3, #24
 8001766:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4313      	orrs	r3, r2
 8001770:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3301      	adds	r3, #1
 800177a:	01db      	lsls	r3, r3, #7
 800177c:	4413      	add	r3, r2
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	01db      	lsls	r3, r3, #7
 800178e:	440b      	add	r3, r1
 8001790:	3394      	adds	r3, #148	@ 0x94
 8001792:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	01db      	lsls	r3, r3, #7
 80017a0:	440b      	add	r3, r1
 80017a2:	3398      	adds	r3, #152	@ 0x98
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80017cc:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f023 0320 	bic.w	r3, r3, #32
 80017d4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80017e6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80017f8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800180a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800181c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800182e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001842:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001854:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	4313      	orrs	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	3301      	adds	r3, #1
 8001894:	01db      	lsls	r3, r3, #7
 8001896:	4413      	add	r3, r2
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	6811      	ldr	r1, [r2, #0]
 800189e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3301      	adds	r3, #1
 80018a6:	01db      	lsls	r3, r3, #7
 80018a8:	440b      	add	r3, r1
 80018aa:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3301      	adds	r3, #1
 80018b4:	01db      	lsls	r3, r3, #7
 80018b6:	4413      	add	r3, r2
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	4413      	add	r3, r2
 80018c6:	33e8      	adds	r3, #232	@ 0xe8
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	01db      	lsls	r3, r3, #7
 80018d4:	4413      	add	r3, r2
 80018d6:	33e4      	adds	r3, #228	@ 0xe4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80018e4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	f023 0320 	bic.w	r3, r3, #32
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f4:	4313      	orrs	r3, r2
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001906:	4313      	orrs	r3, r2
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001918:	4313      	orrs	r3, r2
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800192a:	4313      	orrs	r3, r2
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193c:	4313      	orrs	r3, r2
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800194e:	4313      	orrs	r3, r2
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001962:	d103      	bne.n	800196c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197a:	4313      	orrs	r3, r2
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800198a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198c:	4313      	orrs	r3, r2
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800199c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199e:	4313      	orrs	r3, r2
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f023 031f 	bic.w	r3, r3, #31
 80019a8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019be:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d108      	bne.n	80019e4 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019d8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	6a3a      	ldr	r2, [r7, #32]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e8:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80019ec:	d004      	beq.n	80019f8 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80019f6:	d103      	bne.n	8001a00 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	2b40      	cmp	r3, #64	@ 0x40
 80019fe:	d108      	bne.n	8001a12 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8001a06:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0c:	6a3a      	ldr	r2, [r7, #32]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d843      	bhi.n	8001aa6 <HRTIM_TimingUnitWaveform_Config+0x226>
 8001a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a39 	.word	0x08001a39
 8001a28:	08001a4f 	.word	0x08001a4f
 8001a2c:	08001a65 	.word	0x08001a65
 8001a30:	08001a7b 	.word	0x08001a7b
 8001a34:	08001a91 	.word	0x08001a91
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001a3e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61fb      	str	r3, [r7, #28]
      break;
 8001a4c:	e02c      	b.n	8001aa8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a54:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61fb      	str	r3, [r7, #28]
      break;
 8001a62:	e021      	b.n	8001aa8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001a6a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61fb      	str	r3, [r7, #28]
      break;
 8001a78:	e016      	b.n	8001aa8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a80:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61fb      	str	r3, [r7, #28]
      break;
 8001a8e:	e00b      	b.n	8001aa8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a96:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61fb      	str	r3, [r7, #28]
      break;
 8001aa4:	e000      	b.n	8001aa8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8001aa6:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	01db      	lsls	r3, r3, #7
 8001ab2:	4413      	add	r3, r2
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	01db      	lsls	r3, r3, #7
 8001ac0:	4413      	add	r3, r2
 8001ac2:	33e8      	adds	r3, #232	@ 0xe8
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	01db      	lsls	r3, r3, #7
 8001ad0:	4413      	add	r3, r2
 8001ad2:	33e4      	adds	r3, #228	@ 0xe4
 8001ad4:	6a3a      	ldr	r2, [r7, #32]
 8001ad6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4413      	add	r3, r2
 8001ae2:	33d4      	adds	r3, #212	@ 0xd4
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8001af2:	bf00      	nop
 8001af4:	372c      	adds	r7, #44	@ 0x2c
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop

08001b00 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	01db      	lsls	r3, r3, #7
 8001b1a:	4413      	add	r3, r2
 8001b1c:	33e4      	adds	r3, #228	@ 0xe4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	01db      	lsls	r3, r3, #7
 8001b2a:	4413      	add	r3, r2
 8001b2c:	33b8      	adds	r3, #184	@ 0xb8
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	617b      	str	r3, [r7, #20]

  switch (Output)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b38:	d04d      	beq.n	8001bd6 <HRTIM_OutputConfig+0xd6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b40:	d85e      	bhi.n	8001c00 <HRTIM_OutputConfig+0x100>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b48:	d032      	beq.n	8001bb0 <HRTIM_OutputConfig+0xb0>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b50:	d856      	bhi.n	8001c00 <HRTIM_OutputConfig+0x100>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b80      	cmp	r3, #128	@ 0x80
 8001b56:	d03e      	beq.n	8001bd6 <HRTIM_OutputConfig+0xd6>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b80      	cmp	r3, #128	@ 0x80
 8001b5c:	d850      	bhi.n	8001c00 <HRTIM_OutputConfig+0x100>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b40      	cmp	r3, #64	@ 0x40
 8001b62:	d025      	beq.n	8001bb0 <HRTIM_OutputConfig+0xb0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b40      	cmp	r3, #64	@ 0x40
 8001b68:	d84a      	bhi.n	8001c00 <HRTIM_OutputConfig+0x100>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d01f      	beq.n	8001bb0 <HRTIM_OutputConfig+0xb0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d044      	beq.n	8001c00 <HRTIM_OutputConfig+0x100>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d841      	bhi.n	8001c00 <HRTIM_OutputConfig+0x100>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d33e      	bcc.n	8001c00 <HRTIM_OutputConfig+0x100>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3b02      	subs	r3, #2
 8001b86:	2201      	movs	r2, #1
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <HRTIM_OutputConfig+0x1ac>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bf14      	ite	ne
 8001b92:	2301      	movne	r3, #1
 8001b94:	2300      	moveq	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11c      	bne.n	8001bd6 <HRTIM_OutputConfig+0xd6>
 8001b9c:	f244 0304 	movw	r3, #16388	@ 0x4004
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d027      	beq.n	8001c00 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6819      	ldr	r1, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	01db      	lsls	r3, r3, #7
 8001bbc:	440b      	add	r3, r1
 8001bbe:	33bc      	adds	r3, #188	@ 0xbc
 8001bc0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	440b      	add	r3, r1
 8001bd0:	33c0      	adds	r3, #192	@ 0xc0
 8001bd2:	601a      	str	r2, [r3, #0]
      break;
 8001bd4:	e015      	b.n	8001c02 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	01db      	lsls	r3, r3, #7
 8001be2:	440b      	add	r3, r1
 8001be4:	33c4      	adds	r3, #196	@ 0xc4
 8001be6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	01db      	lsls	r3, r3, #7
 8001bf4:	440b      	add	r3, r1
 8001bf6:	33c8      	adds	r3, #200	@ 0xc8
 8001bf8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	61bb      	str	r3, [r7, #24]
      break;
 8001bfe:	e000      	b.n	8001c02 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8001c00:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8001c02:	22fe      	movs	r2, #254	@ 0xfe
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d111      	bne.n	8001c8e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10c      	bne.n	8001c8e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	01db      	lsls	r3, r3, #7
 8001c96:	4413      	add	r3, r2
 8001c98:	33e4      	adds	r3, #228	@ 0xe4
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	601a      	str	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40000041 	.word	0x40000041

08001cb0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d851      	bhi.n	8001d64 <HRTIM_ForceRegistersUpdate+0xb4>
 8001cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <HRTIM_ForceRegistersUpdate+0x18>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001cf7 	.word	0x08001cf7
 8001ccc:	08001d0d 	.word	0x08001d0d
 8001cd0:	08001d23 	.word	0x08001d23
 8001cd4:	08001d39 	.word	0x08001d39
 8001cd8:	08001d4f 	.word	0x08001d4f
 8001cdc:	08001ce1 	.word	0x08001ce1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8001cf4:	e037      	b.n	8001d66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0202 	orr.w	r2, r2, #2
 8001d06:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8001d0a:	e02c      	b.n	8001d66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0204 	orr.w	r2, r2, #4
 8001d1c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8001d20:	e021      	b.n	8001d66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0208 	orr.w	r2, r2, #8
 8001d32:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8001d36:	e016      	b.n	8001d66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0210 	orr.w	r2, r2, #16
 8001d48:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8001d4c:	e00b      	b.n	8001d66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8001d62:	e000      	b.n	8001d66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8001d64:	bf00      	nop
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop

08001d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f000 bff4 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 816d 	beq.w	800208a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001db0:	4bb4      	ldr	r3, [pc, #720]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d00c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dbc:	4bb1      	ldr	r3, [pc, #708]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d157      	bne.n	8001e78 <HAL_RCC_OscConfig+0x104>
 8001dc8:	4bae      	ldr	r3, [pc, #696]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd4:	d150      	bne.n	8001e78 <HAL_RCC_OscConfig+0x104>
 8001dd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dda:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001df6:	d802      	bhi.n	8001dfe <HAL_RCC_OscConfig+0x8a>
 8001df8:	4ba2      	ldr	r3, [pc, #648]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0xb6>
 8001dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e02:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e16:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001e26:	4b97      	ldr	r3, [pc, #604]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e2e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001e32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001e36:	fa92 f2a2 	rbit	r2, r2
 8001e3a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001e3e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 021f 	and.w	r2, r2, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8114 	beq.w	8002088 <HAL_RCC_OscConfig+0x314>
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 810b 	bne.w	8002088 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f000 bf85 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x124>
 8001e8a:	4b7e      	ldr	r3, [pc, #504]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e036      	b.n	8001f06 <HAL_RCC_OscConfig+0x192>
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x14e>
 8001ea8:	4b76      	ldr	r3, [pc, #472]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a75      	ldr	r2, [pc, #468]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b73      	ldr	r3, [pc, #460]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a72      	ldr	r2, [pc, #456]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e021      	b.n	8001f06 <HAL_RCC_OscConfig+0x192>
 8001ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x17a>
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001eda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b68      	ldr	r3, [pc, #416]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a67      	ldr	r2, [pc, #412]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x192>
 8001eee:	4b65      	ldr	r3, [pc, #404]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a64      	ldr	r2, [pc, #400]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b62      	ldr	r3, [pc, #392]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a61      	ldr	r2, [pc, #388]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f06:	4b5f      	ldr	r3, [pc, #380]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0a:	f023 020f 	bic.w	r2, r3, #15
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	495a      	ldr	r1, [pc, #360]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d054      	beq.n	8001fda <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe fdbe 	bl	8000ab0 <HAL_GetTick>
 8001f34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3a:	f7fe fdb9 	bl	8000ab0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	@ 0x64
 8001f48:	d902      	bls.n	8001f50 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	f000 bf19 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>
 8001f50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f54:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001f64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f70:	d802      	bhi.n	8001f78 <HAL_RCC_OscConfig+0x204>
 8001f72:	4b44      	ldr	r3, [pc, #272]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e015      	b.n	8001fa4 <HAL_RCC_OscConfig+0x230>
 8001f78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f7c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001f8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f90:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001f94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001fa0:	4b38      	ldr	r3, [pc, #224]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fa8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001fac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001fb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f042 0220 	orr.w	r2, r2, #32
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f002 021f 	and.w	r2, r2, #31
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0b0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1c6>
 8001fd8:	e057      	b.n	800208a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fd69 	bl	8000ab0 <HAL_GetTick>
 8001fde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fd64 	bl	8000ab0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	@ 0x64
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f000 bec4 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>
 8001ffa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ffe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800200e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b3f      	cmp	r3, #63	@ 0x3f
 800201a:	d802      	bhi.n	8002022 <HAL_RCC_OscConfig+0x2ae>
 800201c:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x2da>
 8002022:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002026:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002036:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800203a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800203e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <HAL_RCC_OscConfig+0x310>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002052:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002056:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800205a:	fa92 f2a2 	rbit	r2, r2
 800205e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002062:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002066:	fab2 f282 	clz	r2, r2
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	f042 0220 	orr.w	r2, r2, #32
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f002 021f 	and.w	r2, r2, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f202 	lsl.w	r2, r1, r2
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1b0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x270>
 8002082:	e002      	b.n	800208a <HAL_RCC_OscConfig+0x316>
 8002084:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 816c 	beq.w	8002378 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020a0:	4bcc      	ldr	r3, [pc, #816]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020ac:	4bc9      	ldr	r3, [pc, #804]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d16d      	bne.n	8002194 <HAL_RCC_OscConfig+0x420>
 80020b8:	4bc6      	ldr	r3, [pc, #792]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d167      	bne.n	8002194 <HAL_RCC_OscConfig+0x420>
 80020c4:	2302      	movs	r3, #2
 80020c6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80020d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80020e2:	d802      	bhi.n	80020ea <HAL_RCC_OscConfig+0x376>
 80020e4:	4bbb      	ldr	r3, [pc, #748]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	e013      	b.n	8002112 <HAL_RCC_OscConfig+0x39e>
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80020fc:	2302      	movs	r3, #2
 80020fe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002102:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800210e:	4bb1      	ldr	r3, [pc, #708]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002112:	2202      	movs	r2, #2
 8002114:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002118:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800211c:	fa92 f2a2 	rbit	r2, r2
 8002120:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002124:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002128:	fab2 f282 	clz	r2, r2
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	f042 0220 	orr.w	r2, r2, #32
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	f002 021f 	and.w	r2, r2, #31
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f202 	lsl.w	r2, r1, r2
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCC_OscConfig+0x3e6>
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d002      	beq.n	800215a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	f000 be14 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b9e      	ldr	r3, [pc, #632]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002166:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	21f8      	movs	r1, #248	@ 0xf8
 8002170:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002178:	fa91 f1a1 	rbit	r1, r1
 800217c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002180:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002184:	fab1 f181 	clz	r1, r1
 8002188:	b2c9      	uxtb	r1, r1
 800218a:	408b      	lsls	r3, r1
 800218c:	4991      	ldr	r1, [pc, #580]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e0f1      	b.n	8002378 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002198:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8083 	beq.w	80022ac <HAL_RCC_OscConfig+0x538>
 80021a6:	2301      	movs	r3, #1
 80021a8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80021b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	461a      	mov	r2, r3
 80021ce:	2301      	movs	r3, #1
 80021d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe fc6d 	bl	8000ab0 <HAL_GetTick>
 80021d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021dc:	f7fe fc68 	bl	8000ab0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d902      	bls.n	80021f2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	f000 bdc8 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002204:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002210:	d802      	bhi.n	8002218 <HAL_RCC_OscConfig+0x4a4>
 8002212:	4b70      	ldr	r3, [pc, #448]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e013      	b.n	8002240 <HAL_RCC_OscConfig+0x4cc>
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002230:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800223c:	4b65      	ldr	r3, [pc, #404]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	2202      	movs	r2, #2
 8002242:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002246:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002252:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0b4      	beq.n	80021dc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b58      	ldr	r3, [pc, #352]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	21f8      	movs	r1, #248	@ 0xf8
 8002288:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002290:	fa91 f1a1 	rbit	r1, r1
 8002294:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002298:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800229c:	fab1 f181 	clz	r1, r1
 80022a0:	b2c9      	uxtb	r1, r1
 80022a2:	408b      	lsls	r3, r1
 80022a4:	494b      	ldr	r1, [pc, #300]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
 80022aa:	e065      	b.n	8002378 <HAL_RCC_OscConfig+0x604>
 80022ac:	2301      	movs	r3, #1
 80022ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80022be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	461a      	mov	r2, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fbea 	bl	8000ab0 <HAL_GetTick>
 80022dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e2:	f7fe fbe5 	bl	8000ab0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d902      	bls.n	80022f8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f000 bd45 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800230a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b3f      	cmp	r3, #63	@ 0x3f
 8002316:	d802      	bhi.n	800231e <HAL_RCC_OscConfig+0x5aa>
 8002318:	4b2e      	ldr	r3, [pc, #184]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e013      	b.n	8002346 <HAL_RCC_OscConfig+0x5d2>
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002330:	2302      	movs	r3, #2
 8002332:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002336:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002342:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <HAL_RCC_OscConfig+0x660>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	2202      	movs	r2, #2
 8002348:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800234c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002350:	fa92 f2a2 	rbit	r2, r2
 8002354:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002358:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800235c:	fab2 f282 	clz	r2, r2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	f042 0220 	orr.w	r2, r2, #32
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f002 021f 	and.w	r2, r2, #31
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f202 	lsl.w	r2, r1, r2
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1b4      	bne.n	80022e2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8115 	beq.w	80025b8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d07e      	beq.n	800249c <HAL_RCC_OscConfig+0x728>
 800239e:	2301      	movs	r3, #1
 80023a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80023b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCC_OscConfig+0x664>)
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	461a      	mov	r2, r3
 80023c4:	2301      	movs	r3, #1
 80023c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7fe fb72 	bl	8000ab0 <HAL_GetTick>
 80023cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d0:	e00f      	b.n	80023f2 <HAL_RCC_OscConfig+0x67e>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fb68 	bl	8000ab0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d902      	bls.n	80023f2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	f000 bcc8 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800240c:	2202      	movs	r2, #2
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	fa93 f2a3 	rbit	r2, r3
 8002442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002446:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800244a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244c:	4bb0      	ldr	r3, [pc, #704]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 800244e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002458:	2102      	movs	r1, #2
 800245a:	6019      	str	r1, [r3, #0]
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f1a3 	rbit	r1, r3
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002472:	6019      	str	r1, [r3, #0]
  return result;
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0a0      	beq.n	80023dc <HAL_RCC_OscConfig+0x668>
 800249a:	e08d      	b.n	80025b8 <HAL_RCC_OscConfig+0x844>
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f2a3 	rbit	r2, r3
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024be:	601a      	str	r2, [r3, #0]
  return result;
 80024c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b90      	ldr	r3, [pc, #576]	@ (8002714 <HAL_RCC_OscConfig+0x9a0>)
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	2300      	movs	r3, #0
 80024dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fe fae7 	bl	8000ab0 <HAL_GetTick>
 80024e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe fae2 	bl	8000ab0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d902      	bls.n	80024fe <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f000 bc42 	b.w	8002d82 <HAL_RCC_OscConfig+0x100e>
 80024fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002502:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800252a:	2202      	movs	r2, #2
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800254e:	2202      	movs	r2, #2
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002556:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002568:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256a:	4b69      	ldr	r3, [pc, #420]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 800256c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002576:	2102      	movs	r1, #2
 8002578:	6019      	str	r1, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f1a3 	rbit	r1, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002590:	6019      	str	r1, [r3, #0]
  return result;
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d197      	bne.n	80024e8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 819e 	beq.w	800290a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d116      	bne.n	800260e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	61d3      	str	r3, [r2, #28]
 80025ec:	4b48      	ldr	r3, [pc, #288]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002606:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b42      	ldr	r3, [pc, #264]	@ (8002718 <HAL_RCC_OscConfig+0x9a4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b3f      	ldr	r3, [pc, #252]	@ (8002718 <HAL_RCC_OscConfig+0x9a4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a3e      	ldr	r2, [pc, #248]	@ (8002718 <HAL_RCC_OscConfig+0x9a4>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002624:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fa43 	bl	8000ab0 <HAL_GetTick>
 800262a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	e009      	b.n	8002644 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002630:	f7fe fa3e 	bl	8000ab0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	@ 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e39e      	b.n	8002d82 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b34      	ldr	r3, [pc, #208]	@ (8002718 <HAL_RCC_OscConfig+0x9a4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x8fa>
 8002660:	4b2b      	ldr	r3, [pc, #172]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a2a      	ldr	r2, [pc, #168]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e035      	b.n	80026da <HAL_RCC_OscConfig+0x966>
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x924>
 800267e:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a23      	ldr	r2, [pc, #140]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a20      	ldr	r2, [pc, #128]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	6213      	str	r3, [r2, #32]
 8002696:	e020      	b.n	80026da <HAL_RCC_OscConfig+0x966>
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x94e>
 80026a8:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a15      	ldr	r2, [pc, #84]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6213      	str	r3, [r2, #32]
 80026c0:	e00b      	b.n	80026da <HAL_RCC_OscConfig+0x966>
 80026c2:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a12      	ldr	r2, [pc, #72]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <HAL_RCC_OscConfig+0x99c>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8087 	beq.w	80027fa <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7fe f9e0 	bl	8000ab0 <HAL_GetTick>
 80026f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	e012      	b.n	800271c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe f9db 	bl	8000ab0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d908      	bls.n	800271c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e339      	b.n	8002d82 <HAL_RCC_OscConfig+0x100e>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	10908120 	.word	0x10908120
 8002718:	40007000 	.word	0x40007000
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002724:	2202      	movs	r2, #2
 8002726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002762:	601a      	str	r2, [r3, #0]
  return result;
 8002764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002768:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800276c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_RCC_OscConfig+0xa10>
 800277e:	4b98      	ldr	r3, [pc, #608]	@ (80029e0 <HAL_RCC_OscConfig+0xc6c>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	e013      	b.n	80027ac <HAL_RCC_OscConfig+0xa38>
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800278c:	2202      	movs	r2, #2
 800278e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	4b8d      	ldr	r3, [pc, #564]	@ (80029e0 <HAL_RCC_OscConfig+0xc6c>)
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80027b4:	2102      	movs	r1, #2
 80027b6:	6011      	str	r1, [r2, #0]
 80027b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	fa92 f1a2 	rbit	r1, r2
 80027c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80027ce:	6011      	str	r1, [r2, #0]
  return result;
 80027d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	fab2 f282 	clz	r2, r2
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f002 021f 	and.w	r2, r2, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f43f af7f 	beq.w	80026f6 <HAL_RCC_OscConfig+0x982>
 80027f8:	e07d      	b.n	80028f6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fe f959 	bl	8000ab0 <HAL_GetTick>
 80027fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7fe f954 	bl	8000ab0 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e2b2      	b.n	8002d82 <HAL_RCC_OscConfig+0x100e>
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002824:	2202      	movs	r2, #2
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002848:	2202      	movs	r2, #2
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002862:	601a      	str	r2, [r3, #0]
  return result;
 8002864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002868:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800286c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <HAL_RCC_OscConfig+0xb10>
 800287e:	4b58      	ldr	r3, [pc, #352]	@ (80029e0 <HAL_RCC_OscConfig+0xc6c>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	e013      	b.n	80028ac <HAL_RCC_OscConfig+0xb38>
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800288c:	2202      	movs	r2, #2
 800288e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	4b4d      	ldr	r3, [pc, #308]	@ (80029e0 <HAL_RCC_OscConfig+0xc6c>)
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80028b4:	2102      	movs	r1, #2
 80028b6:	6011      	str	r1, [r2, #0]
 80028b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028bc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	fa92 f1a2 	rbit	r1, r2
 80028c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80028ce:	6011      	str	r1, [r2, #0]
  return result;
 80028d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	fab2 f282 	clz	r2, r2
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f002 021f 	and.w	r2, r2, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d186      	bne.n	8002804 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b38      	ldr	r3, [pc, #224]	@ (80029e0 <HAL_RCC_OscConfig+0xc6c>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a37      	ldr	r2, [pc, #220]	@ (80029e0 <HAL_RCC_OscConfig+0xc6c>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8232 	beq.w	8002d80 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800291c:	4b30      	ldr	r3, [pc, #192]	@ (80029e0 <HAL_RCC_OscConfig+0xc6c>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	f000 8201 	beq.w	8002d2c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 8157 	bne.w	8002bea <HAL_RCC_OscConfig+0xe76>
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002944:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002960:	601a      	str	r2, [r3, #0]
  return result;
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800296a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002976:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	461a      	mov	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe f895 	bl	8000ab0 <HAL_GetTick>
 8002986:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	e009      	b.n	80029a0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe f890 	bl	8000ab0 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1f0      	b.n	8002d82 <HAL_RCC_OscConfig+0x100e>
 80029a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80029c4:	601a      	str	r2, [r3, #0]
  return result;
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80029ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80029d8:	d804      	bhi.n	80029e4 <HAL_RCC_OscConfig+0xc70>
 80029da:	4b01      	ldr	r3, [pc, #4]	@ (80029e0 <HAL_RCC_OscConfig+0xc6c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e029      	b.n	8002a34 <HAL_RCC_OscConfig+0xcc0>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a04:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4bc3      	ldr	r3, [pc, #780]	@ (8002d40 <HAL_RCC_OscConfig+0xfcc>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a38:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a3c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a46:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a54:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a58:	6011      	str	r1, [r2, #0]
  return result;
 8002a5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a5e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d185      	bne.n	800298c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a80:	4baf      	ldr	r3, [pc, #700]	@ (8002d40 <HAL_RCC_OscConfig+0xfcc>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	49a7      	ldr	r1, [pc, #668]	@ (8002d40 <HAL_RCC_OscConfig+0xfcc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
 8002aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ab0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	fa93 f2a3 	rbit	r2, r3
 8002ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002acc:	601a      	str	r2, [r3, #0]
  return result;
 8002ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ad6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ae2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2301      	movs	r3, #1
 8002aec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fd ffdf 	bl	8000ab0 <HAL_GetTick>
 8002af2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af6:	e009      	b.n	8002b0c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fd ffda 	bl	8000ab0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e13a      	b.n	8002d82 <HAL_RCC_OscConfig+0x100e>
 8002b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b10:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fa93 f2a3 	rbit	r2, r3
 8002b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b30:	601a      	str	r2, [r3, #0]
  return result;
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b44:	d802      	bhi.n	8002b4c <HAL_RCC_OscConfig+0xdd8>
 8002b46:	4b7e      	ldr	r3, [pc, #504]	@ (8002d40 <HAL_RCC_OscConfig+0xfcc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e027      	b.n	8002b9c <HAL_RCC_OscConfig+0xe28>
 8002b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b50:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b84:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4b69      	ldr	r3, [pc, #420]	@ (8002d40 <HAL_RCC_OscConfig+0xfcc>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ba0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ba4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	fa92 f1a2 	rbit	r1, r2
 8002bb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bbc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002bc0:	6011      	str	r1, [r2, #0]
  return result;
 8002bc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bc6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f002 021f 	and.w	r2, r2, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d087      	beq.n	8002af8 <HAL_RCC_OscConfig+0xd84>
 8002be8:	e0ca      	b.n	8002d80 <HAL_RCC_OscConfig+0x100c>
 8002bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002bf2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c0e:	601a      	str	r2, [r3, #0]
  return result;
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd ff3e 	bl	8000ab0 <HAL_GetTick>
 8002c34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fd ff39 	bl	8000ab0 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e099      	b.n	8002d82 <HAL_RCC_OscConfig+0x100e>
 8002c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c52:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c72:	601a      	str	r2, [r3, #0]
  return result;
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c86:	d802      	bhi.n	8002c8e <HAL_RCC_OscConfig+0xf1a>
 8002c88:	4b2d      	ldr	r3, [pc, #180]	@ (8002d40 <HAL_RCC_OscConfig+0xfcc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	e027      	b.n	8002cde <HAL_RCC_OscConfig+0xf6a>
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002cbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <HAL_RCC_OscConfig+0xfcc>)
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ce6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cea:	6011      	str	r1, [r2, #0]
 8002cec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cf0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	fa92 f1a2 	rbit	r1, r2
 8002cfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cfe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d02:	6011      	str	r1, [r2, #0]
  return result;
 8002d04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	fab2 f282 	clz	r2, r2
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f042 0220 	orr.w	r2, r2, #32
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f002 021f 	and.w	r2, r2, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d187      	bne.n	8002c3a <HAL_RCC_OscConfig+0xec6>
 8002d2a:	e029      	b.n	8002d80 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d103      	bne.n	8002d44 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e020      	b.n	8002d82 <HAL_RCC_OscConfig+0x100e>
 8002d40:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <HAL_RCC_OscConfig+0x1018>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d4c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d10b      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d68:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b09e      	sub	sp, #120	@ 0x78
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e154      	b.n	8003052 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b89      	ldr	r3, [pc, #548]	@ (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b86      	ldr	r3, [pc, #536]	@ (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4984      	ldr	r1, [pc, #528]	@ (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b82      	ldr	r3, [pc, #520]	@ (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e13c      	b.n	8003052 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4978      	ldr	r1, [pc, #480]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80cd 	beq.w	8002f9e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d137      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xec>
 8002e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e24:	d802      	bhi.n	8002e2c <HAL_RCC_ClockConfig+0x9c>
 8002e26:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCC_ClockConfig+0xbc>
 8002e2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e48:	4b62      	ldr	r3, [pc, #392]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e54:	fa92 f2a2 	rbit	r2, r2
 8002e58:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002e5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e5c:	fab2 f282 	clz	r2, r2
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f042 0220 	orr.w	r2, r2, #32
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f002 021f 	and.w	r2, r2, #31
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d171      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0ea      	b.n	8003052 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d137      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x164>
 8002e84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e9c:	d802      	bhi.n	8002ea4 <HAL_RCC_ClockConfig+0x114>
 8002e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	e00f      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x134>
 8002ea4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec0:	4b44      	ldr	r3, [pc, #272]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ec8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002eca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ecc:	fa92 f2a2 	rbit	r2, r2
 8002ed0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ed2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ed4:	fab2 f282 	clz	r2, r2
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f042 0220 	orr.w	r2, r2, #32
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f002 021f 	and.w	r2, r2, #31
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d135      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0ae      	b.n	8003052 <HAL_RCC_ClockConfig+0x2c2>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f0a:	d802      	bhi.n	8002f12 <HAL_RCC_ClockConfig+0x182>
 8002f0c:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	e00d      	b.n	8002f2e <HAL_RCC_ClockConfig+0x19e>
 8002f12:	2302      	movs	r3, #2
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1e:	2302      	movs	r3, #2
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	2202      	movs	r2, #2
 8002f30:	61ba      	str	r2, [r7, #24]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	fa92 f2a2 	rbit	r2, r2
 8002f38:	617a      	str	r2, [r7, #20]
  return result;
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e07a      	b.n	8003052 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 0203 	bic.w	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	491a      	ldr	r1, [pc, #104]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f6e:	f7fd fd9f 	bl	8000ab0 <HAL_GetTick>
 8002f72:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f76:	f7fd fd9b 	bl	8000ab0 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e062      	b.n	8003052 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 020c 	and.w	r2, r3, #12
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d1eb      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d215      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 0207 	bic.w	r2, r3, #7
 8002fb4:	4906      	ldr	r1, [pc, #24]	@ (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbc:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d006      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e041      	b.n	8003052 <HAL_RCC_ClockConfig+0x2c2>
 8002fce:	bf00      	nop
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCC_ClockConfig+0x2cc>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	491a      	ldr	r1, [pc, #104]	@ (800305c <HAL_RCC_ClockConfig+0x2cc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003002:	4b16      	ldr	r3, [pc, #88]	@ (800305c <HAL_RCC_ClockConfig+0x2cc>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4912      	ldr	r1, [pc, #72]	@ (800305c <HAL_RCC_ClockConfig+0x2cc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003016:	f000 f829 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800301a:	4601      	mov	r1, r0
 800301c:	4b0f      	ldr	r3, [pc, #60]	@ (800305c <HAL_RCC_ClockConfig+0x2cc>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003024:	22f0      	movs	r2, #240	@ 0xf0
 8003026:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	fa92 f2a2 	rbit	r2, r2
 800302e:	60fa      	str	r2, [r7, #12]
  return result;
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	fab2 f282 	clz	r2, r2
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	40d3      	lsrs	r3, r2
 800303a:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <HAL_RCC_ClockConfig+0x2d0>)
 800303c:	5cd3      	ldrb	r3, [r2, r3]
 800303e:	fa21 f303 	lsr.w	r3, r1, r3
 8003042:	4a08      	ldr	r2, [pc, #32]	@ (8003064 <HAL_RCC_ClockConfig+0x2d4>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_RCC_ClockConfig+0x2d8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fcec 	bl	8000a28 <HAL_InitTick>
  
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3778      	adds	r7, #120	@ 0x78
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	080033ec 	.word	0x080033ec
 8003064:	20000008 	.word	0x20000008
 8003068:	2000000c 	.word	0x2000000c

0800306c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003086:	4b1e      	ldr	r3, [pc, #120]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x30>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x36>
 800309a:	e026      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 800309e:	613b      	str	r3, [r7, #16]
      break;
 80030a0:	e026      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a17      	ldr	r2, [pc, #92]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80030b0:	4b13      	ldr	r3, [pc, #76]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	4a14      	ldr	r2, [pc, #80]	@ (800310c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ba:	5cd3      	ldrb	r3, [r2, r3]
 80030bc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e004      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
      break;
 80030e8:	e002      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ec:	613b      	str	r3, [r7, #16]
      break;
 80030ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f0:	693b      	ldr	r3, [r7, #16]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	080033fc 	.word	0x080033fc
 800310c:	0800340c 	.word	0x0800340c
 8003110:	003d0900 	.word	0x003d0900

08003114 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b092      	sub	sp, #72	@ 0x48
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80cb 	beq.w	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003138:	4b8d      	ldr	r3, [pc, #564]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10e      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003144:	4b8a      	ldr	r3, [pc, #552]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	4a89      	ldr	r2, [pc, #548]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800314a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314e:	61d3      	str	r3, [r2, #28]
 8003150:	4b87      	ldr	r3, [pc, #540]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	4b84      	ldr	r3, [pc, #528]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d118      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316e:	4b81      	ldr	r3, [pc, #516]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a80      	ldr	r2, [pc, #512]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003178:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317a:	f7fd fc99 	bl	8000ab0 <HAL_GetTick>
 800317e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	e008      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003182:	f7fd fc95 	bl	8000ab0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b64      	cmp	r3, #100	@ 0x64
 800318e:	d901      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0e8      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x252>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	4b77      	ldr	r3, [pc, #476]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a0:	4b73      	ldr	r3, [pc, #460]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d07b      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d074      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031be:	4b6c      	ldr	r3, [pc, #432]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031cc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	4b65      	ldr	r3, [pc, #404]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	461a      	mov	r2, r3
 80031e8:	2301      	movs	r3, #1
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80031fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	4b5c      	ldr	r3, [pc, #368]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	461a      	mov	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003210:	4a57      	ldr	r2, [pc, #348]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003214:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d043      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fd fc46 	bl	8000ab0 <HAL_GetTick>
 8003224:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fd fc42 	bl	8000ab0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e093      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x252>
 800323e:	2302      	movs	r3, #2
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
 800324a:	2302      	movs	r3, #2
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	61fb      	str	r3, [r7, #28]
  return result;
 8003256:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003268:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	e007      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	4b3d      	ldr	r3, [pc, #244]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	2202      	movs	r2, #2
 8003280:	613a      	str	r2, [r7, #16]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	fa92 f2a2 	rbit	r2, r2
 8003288:	60fa      	str	r2, [r7, #12]
  return result;
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	fab2 f282 	clz	r2, r2
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f002 021f 	and.w	r2, r2, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0bf      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032a8:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	492e      	ldr	r1, [pc, #184]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032da:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f023 0203 	bic.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4922      	ldr	r1, [pc, #136]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f023 0210 	bic.w	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	491a      	ldr	r1, [pc, #104]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003316:	4b16      	ldr	r3, [pc, #88]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	4913      	ldr	r1, [pc, #76]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003334:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	490b      	ldr	r1, [pc, #44]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003352:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4904      	ldr	r1, [pc, #16]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3748      	adds	r7, #72	@ 0x48
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
 8003378:	10908100 	.word	0x10908100

0800337c <memset>:
 800337c:	4402      	add	r2, r0
 800337e:	4603      	mov	r3, r0
 8003380:	4293      	cmp	r3, r2
 8003382:	d100      	bne.n	8003386 <memset+0xa>
 8003384:	4770      	bx	lr
 8003386:	f803 1b01 	strb.w	r1, [r3], #1
 800338a:	e7f9      	b.n	8003380 <memset+0x4>

0800338c <__libc_init_array>:
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	4d0d      	ldr	r5, [pc, #52]	@ (80033c4 <__libc_init_array+0x38>)
 8003390:	4c0d      	ldr	r4, [pc, #52]	@ (80033c8 <__libc_init_array+0x3c>)
 8003392:	1b64      	subs	r4, r4, r5
 8003394:	10a4      	asrs	r4, r4, #2
 8003396:	2600      	movs	r6, #0
 8003398:	42a6      	cmp	r6, r4
 800339a:	d109      	bne.n	80033b0 <__libc_init_array+0x24>
 800339c:	4d0b      	ldr	r5, [pc, #44]	@ (80033cc <__libc_init_array+0x40>)
 800339e:	4c0c      	ldr	r4, [pc, #48]	@ (80033d0 <__libc_init_array+0x44>)
 80033a0:	f000 f818 	bl	80033d4 <_init>
 80033a4:	1b64      	subs	r4, r4, r5
 80033a6:	10a4      	asrs	r4, r4, #2
 80033a8:	2600      	movs	r6, #0
 80033aa:	42a6      	cmp	r6, r4
 80033ac:	d105      	bne.n	80033ba <__libc_init_array+0x2e>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b4:	4798      	blx	r3
 80033b6:	3601      	adds	r6, #1
 80033b8:	e7ee      	b.n	8003398 <__libc_init_array+0xc>
 80033ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80033be:	4798      	blx	r3
 80033c0:	3601      	adds	r6, #1
 80033c2:	e7f2      	b.n	80033aa <__libc_init_array+0x1e>
 80033c4:	0800341c 	.word	0x0800341c
 80033c8:	0800341c 	.word	0x0800341c
 80033cc:	0800341c 	.word	0x0800341c
 80033d0:	08003420 	.word	0x08003420

080033d4 <_init>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr

080033e0 <_fini>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr
