/*******************************************************************************
 * @File       : NRF24L01.c
 * @Created_on : 29 Sep 2025
 * @Author     : Gokhan PACAL
 * @About      : STM32 HAL ile NRF24L01 Driver
 ******************************************************************************/
#include "NRF24L01.h"

/* NRF24L01 komut ve register tanımları */
#define NRF24_CMD_W_REGISTER    0x20
#define NRF24_CMD_W_TX_PAYLOAD  0xA0
#define NRF24_REG_CONFIG        0x00
#define NRF24_REG_RF_CH         0x05
#define NRF24_REG_RF_SETUP      0x06
#define NRF24_REG_TX_ADDR       0x10
#define NRF24_REG_EN_AA         0x01
#define NRF24_REG_EN_RXADDR     0x02
#define NRF24_REG_STATUS        0x07
#define NRF24_CONFIG_PWR_UP     0x02
#define NRF24_CONFIG_PRIM_TX    0x00

/* CE ve CSN kontrol fonksiyonları */
static void NRF24_CSN_High(NRF24L01_Handle_t *nrf) { HAL_GPIO_WritePin(nrf->CSN_Port, nrf->CSN_Pin, GPIO_PIN_SET); }
static void NRF24_CSN_Low(NRF24L01_Handle_t *nrf)  { HAL_GPIO_WritePin(nrf->CSN_Port, nrf->CSN_Pin, GPIO_PIN_RESET); }
static void NRF24_CE_High(NRF24L01_Handle_t *nrf)  { HAL_GPIO_WritePin(nrf->CE_Port, nrf->CE_Pin, GPIO_PIN_SET); }
static void NRF24_CE_Low(NRF24L01_Handle_t *nrf)   { HAL_GPIO_WritePin(nrf->CE_Port, nrf->CE_Pin, GPIO_PIN_RESET); }

/* SPI veri gönder/al */
static uint8_t NRF24_SPI_TransmitReceive(NRF24L01_Handle_t *nrf, uint8_t data)
{
    uint8_t recv = 0;
    HAL_SPI_TransmitReceive(nrf->hspi, &data, &recv, 1, HAL_MAX_DELAY);
    return recv;
}

/* Register yazma */
static void NRF24_WriteRegister(NRF24L01_Handle_t *nrf, uint8_t reg, uint8_t *data, uint8_t length)
{
    NRF24_CSN_Low(nrf);
    NRF24_SPI_TransmitReceive(nrf, NRF24_CMD_W_REGISTER | (reg & 0x1F));
    for(uint8_t i=0; i<length; i++) NRF24_SPI_TransmitReceive(nrf, data[i]);
    NRF24_CSN_High(nrf);
}

/* Basit init */
void NRF24L01_Init(NRF24L01_Handle_t *nrf)
{
    uint8_t config = 0x0E;   // PWR_UP=1, PRIM_TX=0, CRC=1
    uint8_t en_aa = 0x01;    // pipe0 ACK aktif
    uint8_t en_rxaddr = 0x01; // pipe0 etkin
    uint8_t rf_ch = 10;       // kanal 10
    uint8_t rf_setup = 0x0F;  // 2Mbps, 0dBm

    HAL_Delay(5);
    NRF24_WriteRegister(nrf, NRF24_REG_EN_AA, &en_aa, 1);
    NRF24_WriteRegister(nrf, NRF24_REG_EN_RXADDR, &en_rxaddr, 1);
    NRF24_WriteRegister(nrf, NRF24_REG_RF_CH, &rf_ch, 1);
    NRF24_WriteRegister(nrf, NRF24_REG_RF_SETUP, &rf_setup, 1);
    NRF24_WriteRegister(nrf, NRF24_REG_CONFIG, &config, 1);

    HAL_Delay(5); // modül hazır olsun
}


/* TX adres ayarlama */
void NRF24L01_SetupTxAddress(NRF24L01_Handle_t *nrf, uint8_t *address)
{
    NRF24_WriteRegister(nrf, NRF24_REG_TX_ADDR, address, 5);
}

/* Veri gönderme */
uint8_t NRF24L01_Transmit(NRF24L01_Handle_t *nrf, uint8_t *data, uint8_t length)
{
    NRF24_CE_Low(nrf);
    NRF24_CSN_Low(nrf);
    NRF24_SPI_TransmitReceive(nrf, NRF24_CMD_W_TX_PAYLOAD);
    for(uint8_t i=0;i<length;i++) NRF24_SPI_TransmitReceive(nrf,data[i]);
    NRF24_CSN_High(nrf);

    // CE HIGH en az 10µs
    NRF24_CE_High(nrf);
    HAL_Delay(1);  // 1ms yeterli
    NRF24_CE_Low(nrf);

    // ACK kontrolü için Status Register oku
    uint8_t status = NRF24_SPI_TransmitReceive(nrf, 0xFF); // basit okuma
    (void)status; // opsiyonel, ACK polling ekleyebilirsin

    return 0;
}

