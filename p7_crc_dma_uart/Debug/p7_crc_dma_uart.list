
p7_crc_dma_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800398c  0800398c  0000498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ac  080039ac  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039b4  080039b4  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080039bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          0000026c  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d16  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b2  00000000  00000000  0000dd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  0000f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000597  00000000  00000000  0000fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e5e  00000000  00000000  00010307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009064  00000000  00000000  00032165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce4b6  00000000  00000000  0003b1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010967f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cfc  00000000  00000000  001096c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0010b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003974 	.word	0x08003974

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08003974 	.word	0x08003974

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fbee 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f87e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fa40 	bl	80009a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000528:	f000 fa16 	bl	8000958 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f9ea 	bl	8000904 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000530:	f000 f9d4 	bl	80008dc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  if (command >= 0x01 && command <= 0x22)
 8000534:	4b32      	ldr	r3, [pc, #200]	@ (8000600 <main+0xe8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d05f      	beq.n	80005fc <main+0xe4>
 800053c:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <main+0xe8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b22      	cmp	r3, #34	@ 0x22
 8000542:	d85b      	bhi.n	80005fc <main+0xe4>
    {
      if (size >= 0x01 && size <= 0x10)
 8000544:	4b2f      	ldr	r3, [pc, #188]	@ (8000604 <main+0xec>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d057      	beq.n	80005fc <main+0xe4>
 800054c:	4b2d      	ldr	r3, [pc, #180]	@ (8000604 <main+0xec>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b10      	cmp	r3, #16
 8000552:	d853      	bhi.n	80005fc <main+0xe4>
      {
        data_packet[0] = command;
 8000554:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <main+0xe8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a2b      	ldr	r2, [pc, #172]	@ (8000608 <main+0xf0>)
 800055a:	6013      	str	r3, [r2, #0]
        data_packet[1] = size;
 800055c:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <main+0xec>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a29      	ldr	r2, [pc, #164]	@ (8000608 <main+0xf0>)
 8000562:	6053      	str	r3, [r2, #4]
        data_packet[2] = 0x05;
 8000564:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <main+0xf0>)
 8000566:	2205      	movs	r2, #5
 8000568:	609a      	str	r2, [r3, #8]
        data_packet[3] = 0x0A;
 800056a:	4b27      	ldr	r3, [pc, #156]	@ (8000608 <main+0xf0>)
 800056c:	220a      	movs	r2, #10
 800056e:	60da      	str	r2, [r3, #12]
        data_packet[4] = 0x05;
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <main+0xf0>)
 8000572:	2205      	movs	r2, #5
 8000574:	611a      	str	r2, [r3, #16]
        data_packet[5] = 0x02;
 8000576:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <main+0xf0>)
 8000578:	2202      	movs	r2, #2
 800057a:	615a      	str	r2, [r3, #20]
        data_packet[6] = 0x01;
 800057c:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <main+0xf0>)
 800057e:	2201      	movs	r2, #1
 8000580:	619a      	str	r2, [r3, #24]

        crc = HAL_CRC_Calculate(&hcrc, data_packet, 2 + size);
 8000582:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <main+0xec>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3302      	adds	r3, #2
 8000588:	461a      	mov	r2, r3
 800058a:	491f      	ldr	r1, [pc, #124]	@ (8000608 <main+0xf0>)
 800058c:	481f      	ldr	r0, [pc, #124]	@ (800060c <main+0xf4>)
 800058e:	f000 fd54 	bl	800103a <HAL_CRC_Calculate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a1e      	ldr	r2, [pc, #120]	@ (8000610 <main+0xf8>)
 8000596:	6013      	str	r3, [r2, #0]

        TX_Buffer[0] = 0x0B;
 8000598:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <main+0xfc>)
 800059a:	220b      	movs	r2, #11
 800059c:	701a      	strb	r2, [r3, #0]
        TX_Buffer[1] = command;
 800059e:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <main+0xe8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <main+0xfc>)
 80005a6:	705a      	strb	r2, [r3, #1]
        TX_Buffer[2] = size;
 80005a8:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <main+0xec>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <main+0xfc>)
 80005b0:	709a      	strb	r2, [r3, #2]

        TX_Buffer[3] = (crc >> 24) & 0xFF;
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <main+0xf8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	0e1b      	lsrs	r3, r3, #24
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <main+0xfc>)
 80005bc:	70da      	strb	r2, [r3, #3]
        TX_Buffer[4] = (crc >> 16) & 0xFF;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <main+0xf8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	0c1b      	lsrs	r3, r3, #16
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <main+0xfc>)
 80005c8:	711a      	strb	r2, [r3, #4]
        TX_Buffer[5] = (crc >> 8) & 0xFF;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <main+0xf8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <main+0xfc>)
 80005d4:	715a      	strb	r2, [r3, #5]
        TX_Buffer[6] = (crc >> 0) & 0xFF;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <main+0xf8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <main+0xfc>)
 80005de:	719a      	strb	r2, [r3, #6]
        TX_Buffer[7] = 0x09;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <main+0xfc>)
 80005e2:	2209      	movs	r2, #9
 80005e4:	71da      	strb	r2, [r3, #7]



        HAL_UART_Transmit_DMA(&huart1, TX_Buffer, 8);
 80005e6:	2208      	movs	r2, #8
 80005e8:	490a      	ldr	r1, [pc, #40]	@ (8000614 <main+0xfc>)
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <main+0x100>)
 80005ec:	f001 ffae 	bl	800254c <HAL_UART_Transmit_DMA>

        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, aRXBufferUser, RX_BUFFER_SIZE);
 80005f0:	2232      	movs	r2, #50	@ 0x32
 80005f2:	490a      	ldr	r1, [pc, #40]	@ (800061c <main+0x104>)
 80005f4:	4808      	ldr	r0, [pc, #32]	@ (8000618 <main+0x100>)
 80005f6:	f002 f825 	bl	8002644 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0xe4>
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004
 8000608:	20000038 	.word	0x20000038
 800060c:	20000170 	.word	0x20000170
 8000610:	200000c8 	.word	0x200000c8
 8000614:	20000094 	.word	0x20000094
 8000618:	20000178 	.word	0x20000178
 800061c:	200000d4 	.word	0x200000d4

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 f974 	bl	800391c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a22      	ldr	r2, [pc, #136]	@ (80006d8 <SystemClock_Config+0xb8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <SystemClock_Config+0xbc>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fab1 	bl	8001bfc <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a0:	f000 f99c 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fd14 	bl	80020ec <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ca:	f000 f987 	bl	80009dc <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <HAL_UARTEx_RxEventCallback>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
    static uint16_t old_pos = 0;
    uint8_t *ptemp;
    uint8_t i;

    if (huart->Instance == USART1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a6e      	ldr	r2, [pc, #440]	@ (80008ac <HAL_UARTEx_RxEventCallback+0x1cc>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	f040 80d5 	bne.w	80008a2 <HAL_UARTEx_RxEventCallback+0x1c2>
    {
        if (Size != old_pos)
 80006f8:	4b6d      	ldr	r3, [pc, #436]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	887a      	ldrh	r2, [r7, #2]
 80006fe:	429a      	cmp	r2, r3
 8000700:	f000 80c7 	beq.w	8000892 <HAL_UARTEx_RxEventCallback+0x1b2>
        {
            if (Size > old_pos)
 8000704:	4b6a      	ldr	r3, [pc, #424]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	887a      	ldrh	r2, [r7, #2]
 800070a:	429a      	cmp	r2, r3
 800070c:	d91f      	bls.n	800074e <HAL_UARTEx_RxEventCallback+0x6e>
            {
                uwNbReceivedChars = Size - old_pos;
 800070e:	4b68      	ldr	r3, [pc, #416]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	887a      	ldrh	r2, [r7, #2]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b66      	ldr	r3, [pc, #408]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 800071a:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < uwNbReceivedChars; i++)
 800071c:	2300      	movs	r3, #0
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e00e      	b.n	8000740 <HAL_UARTEx_RxEventCallback+0x60>
                {
                    pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 8000722:	4b63      	ldr	r3, [pc, #396]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	441a      	add	r2, r3
 800072c:	4b62      	ldr	r3, [pc, #392]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800072e:	6819      	ldr	r1, [r3, #0]
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	440b      	add	r3, r1
 8000734:	4961      	ldr	r1, [pc, #388]	@ (80008bc <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000736:	5c8a      	ldrb	r2, [r1, r2]
 8000738:	701a      	strb	r2, [r3, #0]
                for (i = 0; i < uwNbReceivedChars; i++)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	3301      	adds	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b5b      	ldr	r3, [pc, #364]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3ea      	bcc.n	8000722 <HAL_UARTEx_RxEventCallback+0x42>
 800074c:	e03f      	b.n	80007ce <HAL_UARTEx_RxEventCallback+0xee>
                }
            }
            else
            {
                uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 800074e:	4b58      	ldr	r3, [pc, #352]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b56      	ldr	r3, [pc, #344]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 800075a:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < uwNbReceivedChars; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e00e      	b.n	8000780 <HAL_UARTEx_RxEventCallback+0xa0>
                {
                    pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 8000762:	4b53      	ldr	r3, [pc, #332]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	441a      	add	r2, r3
 800076c:	4b52      	ldr	r3, [pc, #328]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	440b      	add	r3, r1
 8000774:	4951      	ldr	r1, [pc, #324]	@ (80008bc <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000776:	5c8a      	ldrb	r2, [r1, r2]
 8000778:	701a      	strb	r2, [r3, #0]
                for (i = 0; i < uwNbReceivedChars; i++)
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	3301      	adds	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	b29a      	uxth	r2, r3
 8000784:	4b4b      	ldr	r3, [pc, #300]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d3ea      	bcc.n	8000762 <HAL_UARTEx_RxEventCallback+0x82>
                }
                if (Size > 0)
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d01d      	beq.n	80007ce <HAL_UARTEx_RxEventCallback+0xee>
                {
                    for (i = 0; i < Size; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e00e      	b.n	80007b6 <HAL_UARTEx_RxEventCallback+0xd6>
                    {
                        pBufferReadyForUser[uwNbReceivedChars + i] = aRXBufferUser[i];
 8000798:	7bfa      	ldrb	r2, [r7, #15]
 800079a:	4b47      	ldr	r3, [pc, #284]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4945      	ldr	r1, [pc, #276]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80007a0:	8809      	ldrh	r1, [r1, #0]
 80007a2:	4608      	mov	r0, r1
 80007a4:	7bf9      	ldrb	r1, [r7, #15]
 80007a6:	4401      	add	r1, r0
 80007a8:	440b      	add	r3, r1
 80007aa:	4944      	ldr	r1, [pc, #272]	@ (80008bc <HAL_UARTEx_RxEventCallback+0x1dc>)
 80007ac:	5c8a      	ldrb	r2, [r1, r2]
 80007ae:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < Size; i++)
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	3301      	adds	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	887a      	ldrh	r2, [r7, #2]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8eb      	bhi.n	8000798 <HAL_UARTEx_RxEventCallback+0xb8>
                    }
                    uwNbReceivedChars += Size;
 80007c0:	4b3c      	ldr	r3, [pc, #240]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	4413      	add	r3, r2
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b3a      	ldr	r3, [pc, #232]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80007cc:	801a      	strh	r2, [r3, #0]
                }
            }


            if (pBufferReadyForUser[0] == 0x0B)
 80007ce:	4b3a      	ldr	r3, [pc, #232]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b0b      	cmp	r3, #11
 80007d6:	d152      	bne.n	800087e <HAL_UARTEx_RxEventCallback+0x19e>
            {
                size = pBufferReadyForUser[2];
 80007d8:	4b37      	ldr	r3, [pc, #220]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3302      	adds	r3, #2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80007e4:	601a      	str	r2, [r3, #0]
                memset(data_packet2, 0, sizeof(data_packet2));
 80007e6:	2240      	movs	r2, #64	@ 0x40
 80007e8:	2100      	movs	r1, #0
 80007ea:	4836      	ldr	r0, [pc, #216]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80007ec:	f003 f896 	bl	800391c <memset>
                for (uint8_t j = 0; j < size + 2 ; j++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	73bb      	strb	r3, [r7, #14]
 80007f4:	e00d      	b.n	8000812 <HAL_UARTEx_RxEventCallback+0x132>
                {
                    data_packet2[j] = pBufferReadyForUser[1 + j];
 80007f6:	4b30      	ldr	r3, [pc, #192]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	7bba      	ldrb	r2, [r7, #14]
 80007fc:	3201      	adds	r2, #1
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	4611      	mov	r1, r2
 8000806:	4a2f      	ldr	r2, [pc, #188]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (uint8_t j = 0; j < size + 2 ; j++)
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	3301      	adds	r3, #1
 8000810:	73bb      	strb	r3, [r7, #14]
 8000812:	7bba      	ldrb	r2, [r7, #14]
 8000814:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3302      	adds	r3, #2
 800081a:	429a      	cmp	r2, r3
 800081c:	d3eb      	bcc.n	80007f6 <HAL_UARTEx_RxEventCallback+0x116>
                }

                crc1 = HAL_CRC_Calculate(&hcrc, data_packet2, 2 + size);
 800081e:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3302      	adds	r3, #2
 8000824:	461a      	mov	r2, r3
 8000826:	4927      	ldr	r1, [pc, #156]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000828:	4827      	ldr	r0, [pc, #156]	@ (80008c8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800082a:	f000 fc06 	bl	800103a <HAL_CRC_Calculate>
 800082e:	4603      	mov	r3, r0
 8000830:	4a26      	ldr	r2, [pc, #152]	@ (80008cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 8000832:	6013      	str	r3, [r2, #0]

                gelen_crc = (pBufferReadyForUser[3 + size] << 24) |
 8000834:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3303      	adds	r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	061a      	lsls	r2, r3, #24
                            (pBufferReadyForUser[4 + size] << 16) |
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000846:	6819      	ldr	r1, [r3, #0]
 8000848:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3304      	adds	r3, #4
 800084e:	440b      	add	r3, r1
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	041b      	lsls	r3, r3, #16
                gelen_crc = (pBufferReadyForUser[3 + size] << 24) |
 8000854:	431a      	orrs	r2, r3
                            (pBufferReadyForUser[5 + size] << 8) |
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000858:	6819      	ldr	r1, [r3, #0]
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3305      	adds	r3, #5
 8000860:	440b      	add	r3, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	021b      	lsls	r3, r3, #8
                            (pBufferReadyForUser[4 + size] << 16) |
 8000866:	4313      	orrs	r3, r2
                            (pBufferReadyForUser[6 + size]);
 8000868:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800086a:	6811      	ldr	r1, [r2, #0]
 800086c:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	3206      	adds	r2, #6
 8000872:	440a      	add	r2, r1
 8000874:	7812      	ldrb	r2, [r2, #0]
                            (pBufferReadyForUser[5 + size] << 8) |
 8000876:	4313      	orrs	r3, r2
 8000878:	461a      	mov	r2, r3
                gelen_crc = (pBufferReadyForUser[3 + size] << 24) |
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 800087c:	601a      	str	r2, [r3, #0]
                }
            }



            ptemp = pBufferReadyForUser;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	60bb      	str	r3, [r7, #8]
            pBufferReadyForUser = pBufferReadyForReception;
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0b      	ldr	r2, [pc, #44]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800088a:	6013      	str	r3, [r2, #0]
            pBufferReadyForReception = ptemp;
 800088c:	4a11      	ldr	r2, [pc, #68]	@ (80008d4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	6013      	str	r3, [r2, #0]


        }
        old_pos = 0;
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000894:	2200      	movs	r2, #0
 8000896:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, aRXBufferUser, RX_BUFFER_SIZE);
 8000898:	2232      	movs	r2, #50	@ 0x32
 800089a:	4908      	ldr	r1, [pc, #32]	@ (80008bc <HAL_UARTEx_RxEventCallback+0x1dc>)
 800089c:	480e      	ldr	r0, [pc, #56]	@ (80008d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800089e:	f001 fed1 	bl	8002644 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40011000 	.word	0x40011000
 80008b0:	20000280 	.word	0x20000280
 80008b4:	2000016e 	.word	0x2000016e
 80008b8:	20000008 	.word	0x20000008
 80008bc:	200000d4 	.word	0x200000d4
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000054 	.word	0x20000054
 80008c8:	20000170 	.word	0x20000170
 80008cc:	200000cc 	.word	0x200000cc
 80008d0:	200000d0 	.word	0x200000d0
 80008d4:	2000000c 	.word	0x2000000c
 80008d8:	20000178 	.word	0x20000178

080008dc <MX_CRC_Init>:

static void MX_CRC_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_CRC_Init+0x20>)
 80008e2:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <MX_CRC_Init+0x24>)
 80008e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_CRC_Init+0x20>)
 80008e8:	f000 fb8b 	bl	8001002 <HAL_CRC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008f2:	f000 f873 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000170 	.word	0x20000170
 8000900:	40023000 	.word	0x40023000

08000904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <MX_USART1_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART1_UART_Init+0x4c>)
 800093c:	f001 fdb6 	bl	80024ac <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f849 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000178 	.word	0x20000178
 8000954:	40011000 	.word	0x40011000

08000958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_DMA_Init+0x4c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <MX_DMA_Init+0x4c>)
 8000968:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_DMA_Init+0x4c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	203a      	movs	r0, #58	@ 0x3a
 8000980:	f000 fb09 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000984:	203a      	movs	r0, #58	@ 0x3a
 8000986:	f000 fb22 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2046      	movs	r0, #70	@ 0x46
 8000990:	f000 fb01 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000994:	2046      	movs	r0, #70	@ 0x46
 8000996:	f000 fb1a 	bl	8000fce <HAL_NVIC_EnableIRQ>

}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_GPIO_Init+0x30>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <MX_GPIO_Init+0x30>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_GPIO_Init+0x30>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <HAL_CRC_MspInit+0x3c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10d      	bne.n	8000a66 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_CRC_MspInit+0x40>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <HAL_CRC_MspInit+0x40>)
 8000a54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <HAL_CRC_MspInit+0x40>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023000 	.word	0x40023000
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a4c      	ldr	r2, [pc, #304]	@ (8000bcc <HAL_UART_MspInit+0x150>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	f040 8091 	bne.w	8000bc2 <HAL_UART_MspInit+0x146>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd0 <HAL_UART_MspInit+0x154>)
 8000aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa8:	4a49      	ldr	r2, [pc, #292]	@ (8000bd0 <HAL_UART_MspInit+0x154>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab0:	4b47      	ldr	r3, [pc, #284]	@ (8000bd0 <HAL_UART_MspInit+0x154>)
 8000ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b43      	ldr	r3, [pc, #268]	@ (8000bd0 <HAL_UART_MspInit+0x154>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac4:	4a42      	ldr	r2, [pc, #264]	@ (8000bd0 <HAL_UART_MspInit+0x154>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000acc:	4b40      	ldr	r3, [pc, #256]	@ (8000bd0 <HAL_UART_MspInit+0x154>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aea:	2307      	movs	r3, #7
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4837      	ldr	r0, [pc, #220]	@ (8000bd4 <HAL_UART_MspInit+0x158>)
 8000af6:	f000 fed5 	bl	80018a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000afa:	4b37      	ldr	r3, [pc, #220]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000afc:	4a37      	ldr	r2, [pc, #220]	@ (8000bdc <HAL_UART_MspInit+0x160>)
 8000afe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b00:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b02:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b06:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b08:	4b33      	ldr	r3, [pc, #204]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0e:	4b32      	ldr	r3, [pc, #200]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b14:	4b30      	ldr	r3, [pc, #192]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b22:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b28:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b34:	4b28      	ldr	r3, [pc, #160]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b3a:	4827      	ldr	r0, [pc, #156]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b3c:	f000 fab0 	bl	80010a0 <HAL_DMA_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000b46:	f7ff ff49 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a22      	ldr	r2, [pc, #136]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b50:	4a21      	ldr	r2, [pc, #132]	@ (8000bd8 <HAL_UART_MspInit+0x15c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000b56:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b58:	4a22      	ldr	r2, [pc, #136]	@ (8000be4 <HAL_UART_MspInit+0x168>)
 8000b5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b62:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b66:	2240      	movs	r2, #64	@ 0x40
 8000b68:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b76:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b96:	4812      	ldr	r0, [pc, #72]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000b98:	f000 fa82 	bl	80010a0 <HAL_DMA_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000ba2:	f7ff ff1b 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000baa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bac:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <HAL_UART_MspInit+0x164>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2025      	movs	r0, #37	@ 0x25
 8000bb8:	f000 f9ed 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bbc:	2025      	movs	r0, #37	@ 0x25
 8000bbe:	f000 fa06 	bl	8000fce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	@ 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40011000 	.word	0x40011000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	200001c0 	.word	0x200001c0
 8000bdc:	40026440 	.word	0x40026440
 8000be0:	20000220 	.word	0x20000220
 8000be4:	400264b8 	.word	0x400264b8

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3e:	f000 f8af 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <USART1_IRQHandler+0x10>)
 8000c4e:	f001 fd53 	bl	80026f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000178 	.word	0x20000178

08000c5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <DMA2_Stream2_IRQHandler+0x10>)
 8000c62:	f000 fbb5 	bl	80013d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200001c0 	.word	0x200001c0

08000c70 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <DMA2_Stream7_IRQHandler+0x10>)
 8000c76:	f000 fbab 	bl	80013d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000220 	.word	0x20000220

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f002 fe29 	bl	800392c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc1d 	bl	8000518 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ce0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cec:	080039bc 	.word	0x080039bc
  ldr r2, =_sbss
 8000cf0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cf4:	20000288 	.word	0x20000288

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f92b 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fe5a 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f943 	bl	8000fea <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f90b 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000010 	.word	0x20000010
 8000d98:	20000018 	.word	0x20000018
 8000d9c:	20000014 	.word	0x20000014

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000018 	.word	0x20000018
 8000dc4:	20000284 	.word	0x20000284

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000284 	.word	0x20000284

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	@ (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	@ 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff3e 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff31 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffa2 	bl	8000f3c <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e00e      	b.n	8001032 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	795b      	ldrb	r3, [r3, #5]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d105      	bne.n	800102a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fd07 	bl	8000a38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800103a:	b480      	push	{r7}
 800103c:	b087      	sub	sp, #28
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2202      	movs	r2, #2
 800104e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00a      	b.n	800107c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	441a      	add	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3f0      	bcc.n	8001066 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2201      	movs	r2, #1
 8001090:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001092:	693b      	ldr	r3, [r7, #16]
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff fe8c 	bl	8000dc8 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e099      	b.n	80011f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2202      	movs	r2, #2
 80010c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010dc:	e00f      	b.n	80010fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010de:	f7ff fe73 	bl	8000dc8 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d908      	bls.n	80010fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2220      	movs	r2, #32
 80010f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e078      	b.n	80011f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e8      	bne.n	80010de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	4b38      	ldr	r3, [pc, #224]	@ (80011f8 <HAL_DMA_Init+0x158>)
 8001118:	4013      	ands	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800112a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001154:	2b04      	cmp	r3, #4
 8001156:	d107      	bne.n	8001168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	4313      	orrs	r3, r2
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4313      	orrs	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f023 0307 	bic.w	r3, r3, #7
 800117e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4313      	orrs	r3, r2
 8001188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118e:	2b04      	cmp	r3, #4
 8001190:	d117      	bne.n	80011c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4313      	orrs	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00e      	beq.n	80011c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fb01 	bl	80017ac <DMA_CheckFifoParam>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2240      	movs	r2, #64	@ 0x40
 80011b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80011be:	2301      	movs	r3, #1
 80011c0:	e016      	b.n	80011f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fab8 	bl	8001740 <DMA_CalcBaseAndBitshift>
 80011d0:	4603      	mov	r3, r0
 80011d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d8:	223f      	movs	r2, #63	@ 0x3f
 80011da:	409a      	lsls	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	f010803f 	.word	0xf010803f

080011fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_DMA_Start_IT+0x26>
 800121e:	2302      	movs	r3, #2
 8001220:	e040      	b.n	80012a4 <HAL_DMA_Start_IT+0xa8>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d12f      	bne.n	8001296 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fa4a 	bl	80016e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001254:	223f      	movs	r2, #63	@ 0x3f
 8001256:	409a      	lsls	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0216 	orr.w	r2, r2, #22
 800126a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0208 	orr.w	r2, r2, #8
 8001282:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e005      	b.n	80012a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800129e:	2302      	movs	r3, #2
 80012a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ba:	f7ff fd85 	bl	8000dc8 <HAL_GetTick>
 80012be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d008      	beq.n	80012de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2280      	movs	r2, #128	@ 0x80
 80012d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e052      	b.n	8001384 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0216 	bic.w	r2, r2, #22
 80012ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d103      	bne.n	800130e <HAL_DMA_Abort+0x62>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0208 	bic.w	r2, r2, #8
 800131c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800132e:	e013      	b.n	8001358 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001330:	f7ff fd4a 	bl	8000dc8 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b05      	cmp	r3, #5
 800133c:	d90c      	bls.n	8001358 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2220      	movs	r2, #32
 8001342:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e015      	b.n	8001384 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1e4      	bne.n	8001330 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136a:	223f      	movs	r2, #63	@ 0x3f
 800136c:	409a      	lsls	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d004      	beq.n	80013aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00c      	b.n	80013c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2205      	movs	r2, #5
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013dc:	4b8e      	ldr	r3, [pc, #568]	@ (8001618 <HAL_DMA_IRQHandler+0x248>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a8e      	ldr	r2, [pc, #568]	@ (800161c <HAL_DMA_IRQHandler+0x24c>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0a9b      	lsrs	r3, r3, #10
 80013e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013fa:	2208      	movs	r2, #8
 80013fc:	409a      	lsls	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01a      	beq.n	800143c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0204 	bic.w	r2, r2, #4
 8001422:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2208      	movs	r2, #8
 800142a:	409a      	lsls	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001434:	f043 0201 	orr.w	r2, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001440:	2201      	movs	r2, #1
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d012      	beq.n	8001472 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145e:	2201      	movs	r2, #1
 8001460:	409a      	lsls	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146a:	f043 0202 	orr.w	r2, r3, #2
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001476:	2204      	movs	r2, #4
 8001478:	409a      	lsls	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d012      	beq.n	80014a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001494:	2204      	movs	r2, #4
 8001496:	409a      	lsls	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a0:	f043 0204 	orr.w	r2, r3, #4
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ac:	2210      	movs	r2, #16
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d043      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d03c      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ca:	2210      	movs	r2, #16
 80014cc:	409a      	lsls	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d018      	beq.n	8001512 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d108      	bne.n	8001500 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d024      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	4798      	blx	r3
 80014fe:	e01f      	b.n	8001540 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01b      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	4798      	blx	r3
 8001510:	e016      	b.n	8001540 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d107      	bne.n	8001530 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0208 	bic.w	r2, r2, #8
 800152e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001544:	2220      	movs	r2, #32
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 808f 	beq.w	8001670 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8087 	beq.w	8001670 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001566:	2220      	movs	r2, #32
 8001568:	409a      	lsls	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b05      	cmp	r3, #5
 8001578:	d136      	bne.n	80015e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0216 	bic.w	r2, r2, #22
 8001588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001598:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <HAL_DMA_IRQHandler+0x1da>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0208 	bic.w	r2, r2, #8
 80015b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015be:	223f      	movs	r2, #63	@ 0x3f
 80015c0:	409a      	lsls	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d07e      	beq.n	80016dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
        }
        return;
 80015e6:	e079      	b.n	80016dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d01d      	beq.n	8001632 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10d      	bne.n	8001620 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001608:	2b00      	cmp	r3, #0
 800160a:	d031      	beq.n	8001670 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4798      	blx	r3
 8001614:	e02c      	b.n	8001670 <HAL_DMA_IRQHandler+0x2a0>
 8001616:	bf00      	nop
 8001618:	20000010 	.word	0x20000010
 800161c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d023      	beq.n	8001670 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
 8001630:	e01e      	b.n	8001670 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10f      	bne.n	8001660 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0210 	bic.w	r2, r2, #16
 800164e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001674:	2b00      	cmp	r3, #0
 8001676:	d032      	beq.n	80016de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d022      	beq.n	80016ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2205      	movs	r2, #5
 8001688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3301      	adds	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d307      	bcc.n	80016b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f2      	bne.n	800169c <HAL_DMA_IRQHandler+0x2cc>
 80016b6:	e000      	b.n	80016ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
 80016da:	e000      	b.n	80016de <HAL_DMA_IRQHandler+0x30e>
        return;
 80016dc:	bf00      	nop
    }
  }
}
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001700:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b40      	cmp	r3, #64	@ 0x40
 8001710:	d108      	bne.n	8001724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001722:	e007      	b.n	8001734 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	60da      	str	r2, [r3, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3b10      	subs	r3, #16
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <DMA_CalcBaseAndBitshift+0x64>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800175a:	4a13      	ldr	r2, [pc, #76]	@ (80017a8 <DMA_CalcBaseAndBitshift+0x68>)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d909      	bls.n	8001782 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	1d1a      	adds	r2, r3, #4
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001780:	e007      	b.n	8001792 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	aaaaaaab 	.word	0xaaaaaaab
 80017a8:	080039a4 	.word	0x080039a4

080017ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11f      	bne.n	8001806 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d856      	bhi.n	800187a <DMA_CheckFifoParam+0xce>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <DMA_CheckFifoParam+0x28>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e5 	.word	0x080017e5
 80017d8:	080017f7 	.word	0x080017f7
 80017dc:	080017e5 	.word	0x080017e5
 80017e0:	0800187b 	.word	0x0800187b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d046      	beq.n	800187e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f4:	e043      	b.n	800187e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017fe:	d140      	bne.n	8001882 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001804:	e03d      	b.n	8001882 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800180e:	d121      	bne.n	8001854 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d837      	bhi.n	8001886 <DMA_CheckFifoParam+0xda>
 8001816:	a201      	add	r2, pc, #4	@ (adr r2, 800181c <DMA_CheckFifoParam+0x70>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	0800182d 	.word	0x0800182d
 8001820:	08001833 	.word	0x08001833
 8001824:	0800182d 	.word	0x0800182d
 8001828:	08001845 	.word	0x08001845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
      break;
 8001830:	e030      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001836:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d025      	beq.n	800188a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001842:	e022      	b.n	800188a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001848:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800184c:	d11f      	bne.n	800188e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001852:	e01c      	b.n	800188e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d903      	bls.n	8001862 <DMA_CheckFifoParam+0xb6>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d003      	beq.n	8001868 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001860:	e018      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
      break;
 8001866:	e015      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
      break;
 8001878:	e00b      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      break;
 800187a:	bf00      	nop
 800187c:	e00a      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 800187e:	bf00      	nop
 8001880:	e008      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 8001882:	bf00      	nop
 8001884:	e006      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 8001886:	bf00      	nop
 8001888:	e004      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 800188a:	bf00      	nop
 800188c:	e002      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;   
 800188e:	bf00      	nop
 8001890:	e000      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 8001892:	bf00      	nop
    }
  } 
  
  return status; 
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e177      	b.n	8001bb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 8166 	bne.w	8001baa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d130      	bne.n	8001958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80c0 	beq.w	8001baa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b66      	ldr	r3, [pc, #408]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a65      	ldr	r2, [pc, #404]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b63      	ldr	r3, [pc, #396]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a46:	4a61      	ldr	r2, [pc, #388]	@ (8001bcc <HAL_GPIO_Init+0x328>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	@ (8001bd0 <HAL_GPIO_Init+0x32c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d037      	beq.n	8001ae2 <HAL_GPIO_Init+0x23e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a57      	ldr	r2, [pc, #348]	@ (8001bd4 <HAL_GPIO_Init+0x330>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d031      	beq.n	8001ade <HAL_GPIO_Init+0x23a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a56      	ldr	r2, [pc, #344]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d02b      	beq.n	8001ada <HAL_GPIO_Init+0x236>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a55      	ldr	r2, [pc, #340]	@ (8001bdc <HAL_GPIO_Init+0x338>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d025      	beq.n	8001ad6 <HAL_GPIO_Init+0x232>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a54      	ldr	r2, [pc, #336]	@ (8001be0 <HAL_GPIO_Init+0x33c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01f      	beq.n	8001ad2 <HAL_GPIO_Init+0x22e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a53      	ldr	r2, [pc, #332]	@ (8001be4 <HAL_GPIO_Init+0x340>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x22a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	@ (8001be8 <HAL_GPIO_Init+0x344>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x226>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a51      	ldr	r2, [pc, #324]	@ (8001bec <HAL_GPIO_Init+0x348>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x222>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a50      	ldr	r2, [pc, #320]	@ (8001bf0 <HAL_GPIO_Init+0x34c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x21e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf4 <HAL_GPIO_Init+0x350>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x21a>
 8001aba:	2309      	movs	r3, #9
 8001abc:	e012      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001abe:	230a      	movs	r3, #10
 8001ac0:	e010      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e00e      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00c      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e00a      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e008      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e004      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f002 0203 	and.w	r2, r2, #3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af4:	4935      	ldr	r1, [pc, #212]	@ (8001bcc <HAL_GPIO_Init+0x328>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b02:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b26:	4a34      	ldr	r2, [pc, #208]	@ (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b2c:	4b32      	ldr	r3, [pc, #200]	@ (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b50:	4a29      	ldr	r2, [pc, #164]	@ (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b56:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	@ (8001bf8 <HAL_GPIO_Init+0x354>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f ae84 	bls.w	80018c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40021c00 	.word	0x40021c00
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40022400 	.word	0x40022400
 8001bf8:	40013c00 	.word	0x40013c00

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e267      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d075      	beq.n	8001d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c1a:	4b88      	ldr	r3, [pc, #544]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d00c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c26:	4b85      	ldr	r3, [pc, #532]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d112      	bne.n	8001c58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c32:	4b82      	ldr	r3, [pc, #520]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c3e:	d10b      	bne.n	8001c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	4b7e      	ldr	r3, [pc, #504]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d05b      	beq.n	8001d04 <HAL_RCC_OscConfig+0x108>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d157      	bne.n	8001d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e242      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c60:	d106      	bne.n	8001c70 <HAL_RCC_OscConfig+0x74>
 8001c62:	4b76      	ldr	r3, [pc, #472]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a75      	ldr	r2, [pc, #468]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e01d      	b.n	8001cac <HAL_RCC_OscConfig+0xb0>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x98>
 8001c7a:	4b70      	ldr	r3, [pc, #448]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6f      	ldr	r2, [pc, #444]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b6d      	ldr	r3, [pc, #436]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0xb0>
 8001c94:	4b69      	ldr	r3, [pc, #420]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a68      	ldr	r2, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b66      	ldr	r3, [pc, #408]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a65      	ldr	r2, [pc, #404]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f888 	bl	8000dc8 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f884 	bl	8000dc8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	@ 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e207      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b5b      	ldr	r3, [pc, #364]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0xc0>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f874 	bl	8000dc8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f870 	bl	8000dc8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1f3      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	4b51      	ldr	r3, [pc, #324]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xe8>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d063      	beq.n	8001dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d12:	4b4a      	ldr	r3, [pc, #296]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1e:	4b47      	ldr	r3, [pc, #284]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d11c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b44      	ldr	r3, [pc, #272]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x152>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e1c7      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4937      	ldr	r1, [pc, #220]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	e03a      	b.n	8001dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4b34      	ldr	r3, [pc, #208]	@ (8001e40 <HAL_RCC_OscConfig+0x244>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f829 	bl	8000dc8 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff f825 	bl	8000dc8 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1a8      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4925      	ldr	r1, [pc, #148]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_RCC_OscConfig+0x244>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f808 	bl	8000dc8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbc:	f7ff f804 	bl	8000dc8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e187      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d036      	beq.n	8001e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d016      	beq.n	8001e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_RCC_OscConfig+0x248>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe ffe8 	bl	8000dc8 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7fe ffe4 	bl	8000dc8 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e167      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_RCC_OscConfig+0x240>)
 8001e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x200>
 8001e1a:	e01b      	b.n	8001e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <HAL_RCC_OscConfig+0x248>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe ffd1 	bl	8000dc8 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	e00e      	b.n	8001e48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7fe ffcd 	bl	8000dc8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d907      	bls.n	8001e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e150      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	42470000 	.word	0x42470000
 8001e44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	4b88      	ldr	r3, [pc, #544]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ea      	bne.n	8001e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 8097 	beq.w	8001f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b81      	ldr	r3, [pc, #516]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10f      	bne.n	8001e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b7d      	ldr	r3, [pc, #500]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e82:	4b7a      	ldr	r3, [pc, #488]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b77      	ldr	r3, [pc, #476]	@ (8002070 <HAL_RCC_OscConfig+0x474>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d118      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	4b74      	ldr	r3, [pc, #464]	@ (8002070 <HAL_RCC_OscConfig+0x474>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a73      	ldr	r2, [pc, #460]	@ (8002070 <HAL_RCC_OscConfig+0x474>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe ff8d 	bl	8000dc8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7fe ff89 	bl	8000dc8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e10c      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8002070 <HAL_RCC_OscConfig+0x474>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2ea>
 8001ed8:	4b64      	ldr	r3, [pc, #400]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001edc:	4a63      	ldr	r2, [pc, #396]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee4:	e01c      	b.n	8001f20 <HAL_RCC_OscConfig+0x324>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x30c>
 8001eee:	4b5f      	ldr	r3, [pc, #380]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efa:	4b5c      	ldr	r3, [pc, #368]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efe:	4a5b      	ldr	r2, [pc, #364]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0x324>
 8001f08:	4b58      	ldr	r3, [pc, #352]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0c:	4a57      	ldr	r2, [pc, #348]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f14:	4b55      	ldr	r3, [pc, #340]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f18:	4a54      	ldr	r2, [pc, #336]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d015      	beq.n	8001f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7fe ff4e 	bl	8000dc8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7fe ff4a 	bl	8000dc8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0cb      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f46:	4b49      	ldr	r3, [pc, #292]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0ee      	beq.n	8001f30 <HAL_RCC_OscConfig+0x334>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7fe ff38 	bl	8000dc8 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ff34 	bl	8000dc8 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0b5      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f72:	4b3e      	ldr	r3, [pc, #248]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ee      	bne.n	8001f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f84:	4b39      	ldr	r3, [pc, #228]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	4a38      	ldr	r2, [pc, #224]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80a1 	beq.w	80020dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f9a:	4b34      	ldr	r3, [pc, #208]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d05c      	beq.n	8002060 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d141      	bne.n	8002032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_RCC_OscConfig+0x478>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ff08 	bl	8000dc8 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe ff04 	bl	8000dc8 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e087      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	4b27      	ldr	r3, [pc, #156]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	019b      	lsls	r3, r3, #6
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	085b      	lsrs	r3, r3, #1
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	491b      	ldr	r1, [pc, #108]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <HAL_RCC_OscConfig+0x478>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fedd 	bl	8000dc8 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe fed9 	bl	8000dc8 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e05c      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x416>
 8002030:	e054      	b.n	80020dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_RCC_OscConfig+0x478>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7fe fec6 	bl	8000dc8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7fe fec2 	bl	8000dc8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e045      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_OscConfig+0x470>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x444>
 800205e:	e03d      	b.n	80020dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e038      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000
 8002074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_RCC_OscConfig+0x4ec>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d028      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d121      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d11a      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d111      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0cc      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b68      	ldr	r3, [pc, #416]	@ (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d90c      	bls.n	8002128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b65      	ldr	r3, [pc, #404]	@ (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b63      	ldr	r3, [pc, #396]	@ (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b8      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002140:	4b59      	ldr	r3, [pc, #356]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a58      	ldr	r2, [pc, #352]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800214a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002158:	4b53      	ldr	r3, [pc, #332]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4a52      	ldr	r2, [pc, #328]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b50      	ldr	r3, [pc, #320]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	494d      	ldr	r1, [pc, #308]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d044      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b47      	ldr	r3, [pc, #284]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d119      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b3f      	ldr	r3, [pc, #252]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e067      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b37      	ldr	r3, [pc, #220]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4934      	ldr	r1, [pc, #208]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fdf4 	bl	8000dc8 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fdf0 	bl	8000dc8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e04f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d20c      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e032      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4916      	ldr	r1, [pc, #88]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225e:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490e      	ldr	r1, [pc, #56]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002272:	f000 f821 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490a      	ldr	r1, [pc, #40]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fd54 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00
 80022a8:	40023800 	.word	0x40023800
 80022ac:	0800398c 	.word	0x0800398c
 80022b0:	20000010 	.word	0x20000010
 80022b4:	20000014 	.word	0x20000014

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022bc:	b090      	sub	sp, #64	@ 0x40
 80022be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d0:	4b59      	ldr	r3, [pc, #356]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d00d      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x40>
 80022dc:	2b08      	cmp	r3, #8
 80022de:	f200 80a1 	bhi.w	8002424 <HAL_RCC_GetSysClockFreq+0x16c>
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x34>
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ea:	e09b      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b53      	ldr	r3, [pc, #332]	@ (800243c <HAL_RCC_GetSysClockFreq+0x184>)
 80022ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022f0:	e09b      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f2:	4b53      	ldr	r3, [pc, #332]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022f6:	e098      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x180>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002300:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002302:	4b4d      	ldr	r3, [pc, #308]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x180>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d028      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230e:	4b4a      	ldr	r3, [pc, #296]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x180>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	099b      	lsrs	r3, r3, #6
 8002314:	2200      	movs	r2, #0
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	627a      	str	r2, [r7, #36]	@ 0x24
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002320:	2100      	movs	r1, #0
 8002322:	4b47      	ldr	r3, [pc, #284]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x188>)
 8002324:	fb03 f201 	mul.w	r2, r3, r1
 8002328:	2300      	movs	r3, #0
 800232a:	fb00 f303 	mul.w	r3, r0, r3
 800232e:	4413      	add	r3, r2
 8002330:	4a43      	ldr	r2, [pc, #268]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x188>)
 8002332:	fba0 1202 	umull	r1, r2, r0, r2
 8002336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002338:	460a      	mov	r2, r1
 800233a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800233c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800233e:	4413      	add	r3, r2
 8002340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	2200      	movs	r2, #0
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	61fa      	str	r2, [r7, #28]
 800234a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002352:	f7fd ff4b 	bl	80001ec <__aeabi_uldivmod>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4613      	mov	r3, r2
 800235c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800235e:	e053      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002360:	4b35      	ldr	r3, [pc, #212]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x180>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	2200      	movs	r2, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	617a      	str	r2, [r7, #20]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002372:	f04f 0b00 	mov.w	fp, #0
 8002376:	4652      	mov	r2, sl
 8002378:	465b      	mov	r3, fp
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	0159      	lsls	r1, r3, #5
 8002384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002388:	0150      	lsls	r0, r2, #5
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	ebb2 080a 	subs.w	r8, r2, sl
 8002392:	eb63 090b 	sbc.w	r9, r3, fp
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023aa:	ebb2 0408 	subs.w	r4, r2, r8
 80023ae:	eb63 0509 	sbc.w	r5, r3, r9
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	00eb      	lsls	r3, r5, #3
 80023bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c0:	00e2      	lsls	r2, r4, #3
 80023c2:	4614      	mov	r4, r2
 80023c4:	461d      	mov	r5, r3
 80023c6:	eb14 030a 	adds.w	r3, r4, sl
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	eb45 030b 	adc.w	r3, r5, fp
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023de:	4629      	mov	r1, r5
 80023e0:	028b      	lsls	r3, r1, #10
 80023e2:	4621      	mov	r1, r4
 80023e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e8:	4621      	mov	r1, r4
 80023ea:	028a      	lsls	r2, r1, #10
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f2:	2200      	movs	r2, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	60fa      	str	r2, [r7, #12]
 80023f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023fc:	f7fd fef6 	bl	80001ec <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x180>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002418:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002422:	e002      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_GetSysClockFreq+0x184>)
 8002426:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800242c:	4618      	mov	r0, r3
 800242e:	3740      	adds	r7, #64	@ 0x40
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	00f42400 	.word	0x00f42400
 8002440:	017d7840 	.word	0x017d7840

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	@ (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000010 	.word	0x20000010

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	@ (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	0800399c 	.word	0x0800399c

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002488:	f7ff ffdc 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0b5b      	lsrs	r3, r3, #13
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4903      	ldr	r1, [pc, #12]	@ (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	0800399c 	.word	0x0800399c

080024ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e042      	b.n	8002544 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fad2 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 ff9f 	bl	8003434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	@ 0x30
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d162      	bne.n	800262c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_Transmit_DMA+0x26>
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e05b      	b.n	800262e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2221      	movs	r2, #33	@ 0x21
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259a:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <HAL_UART_Transmit_DMA+0xec>)
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	4a26      	ldr	r2, [pc, #152]	@ (800263c <HAL_UART_Transmit_DMA+0xf0>)
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	4a25      	ldr	r2, [pc, #148]	@ (8002640 <HAL_UART_Transmit_DMA+0xf4>)
 80025ac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b2:	2200      	movs	r2, #0
 80025b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3304      	adds	r3, #4
 80025ca:	461a      	mov	r2, r3
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	f7fe fe15 	bl	80011fc <HAL_DMA_Start_IT>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2210      	movs	r2, #16
 80025dc:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e021      	b.n	800262e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3314      	adds	r3, #20
 80025fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	e853 3f00 	ldrex	r3, [r3]
 8002602:	617b      	str	r3, [r7, #20]
   return(result);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002614:	627a      	str	r2, [r7, #36]	@ 0x24
 8002616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002618:	6a39      	ldr	r1, [r7, #32]
 800261a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261c:	e841 2300 	strex	r3, r2, [r1]
 8002620:	61fb      	str	r3, [r7, #28]
   return(result);
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e5      	bne.n	80025f4 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e000      	b.n	800262e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	3730      	adds	r7, #48	@ 0x30
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	08002cb1 	.word	0x08002cb1
 800263c:	08002d4b 	.word	0x08002d4b
 8002640:	08002ecf 	.word	0x08002ecf

08002644 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	@ 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d146      	bne.n	80026ec <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e03f      	b.n	80026ee <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	461a      	mov	r2, r3
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fc6f 	bl	8002f64 <UART_Start_Receive_DMA>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	2b01      	cmp	r3, #1
 8002692:	d125      	bne.n	80026e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	617b      	str	r3, [r7, #20]
   return(result);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f043 0310 	orr.w	r3, r3, #16
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80026cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ce:	6a39      	ldr	r1, [r7, #32]
 80026d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d2:	e841 2300 	strex	r3, r2, [r1]
 80026d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e5      	bne.n	80026aa <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80026de:	e002      	b.n	80026e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80026e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026ea:	e000      	b.n	80026ee <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3730      	adds	r7, #48	@ 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b0ba      	sub	sp, #232	@ 0xe8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800272a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800273e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_UART_IRQHandler+0x66>
 800274a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fdae 	bl	80032b8 <UART_Receive_IT>
      return;
 800275c:	e273      	b.n	8002c46 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800275e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80de 	beq.w	8002924 <HAL_UART_IRQHandler+0x22c>
 8002768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002778:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80d1 	beq.w	8002924 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_UART_IRQHandler+0xae>
 800278e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_UART_IRQHandler+0xd2>
 80027b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f043 0202 	orr.w	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_UART_IRQHandler+0xf6>
 80027d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	f043 0204 	orr.w	r2, r3, #4
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d011      	beq.n	800281e <HAL_UART_IRQHandler+0x126>
 80027fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	f043 0208 	orr.w	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 820a 	beq.w	8002c3c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_UART_IRQHandler+0x14e>
 8002834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fd39 	bl	80032b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002850:	2b40      	cmp	r3, #64	@ 0x40
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <HAL_UART_IRQHandler+0x17a>
 800286a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d04f      	beq.n	8002912 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fc44 	bl	8003100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002882:	2b40      	cmp	r3, #64	@ 0x40
 8002884:	d141      	bne.n	800290a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3314      	adds	r3, #20
 800288c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002890:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002894:	e853 3f00 	ldrex	r3, [r3]
 8002898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800289c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3314      	adds	r3, #20
 80028ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028c2:	e841 2300 	strex	r3, r2, [r1]
 80028c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1d9      	bne.n	8002886 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d013      	beq.n	8002902 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028de:	4a8a      	ldr	r2, [pc, #552]	@ (8002b08 <HAL_UART_IRQHandler+0x410>)
 80028e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fd50 	bl	800138c <HAL_DMA_Abort_IT>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028fc:	4610      	mov	r0, r2
 80028fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002900:	e00e      	b.n	8002920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f9ca 	bl	8002c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002908:	e00a      	b.n	8002920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f9c6 	bl	8002c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	e006      	b.n	8002920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f9c2 	bl	8002c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800291e:	e18d      	b.n	8002c3c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	bf00      	nop
    return;
 8002922:	e18b      	b.n	8002c3c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	2b01      	cmp	r3, #1
 800292a:	f040 8167 	bne.w	8002bfc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800292e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8160 	beq.w	8002bfc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800293c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8159 	beq.w	8002bfc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296a:	2b40      	cmp	r3, #64	@ 0x40
 800296c:	f040 80ce 	bne.w	8002b0c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800297c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a9 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800298a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800298e:	429a      	cmp	r2, r3
 8002990:	f080 80a2 	bcs.w	8002ad8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800299a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a6:	f000 8088 	beq.w	8002aba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	330c      	adds	r3, #12
 80029b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029e6:	e841 2300 	strex	r3, r2, [r1]
 80029ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1d9      	bne.n	80029aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3314      	adds	r3, #20
 80029fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e1      	bne.n	80029f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3314      	adds	r3, #20
 8002a38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e3      	bne.n	8002a32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a82:	e853 3f00 	ldrex	r3, [r3]
 8002a86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a8a:	f023 0310 	bic.w	r3, r3, #16
 8002a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002aa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e3      	bne.n	8002a78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fbf9 	bl	80012ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7fd fe05 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002ad6:	e0b3      	b.n	8002c40 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f040 80ad 	bne.w	8002c40 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002af0:	f040 80a6 	bne.w	8002c40 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7fd fded 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
      return;
 8002b06:	e09b      	b.n	8002c40 <HAL_UART_IRQHandler+0x548>
 8002b08:	080031c7 	.word	0x080031c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 808e 	beq.w	8002c44 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8089 	beq.w	8002c44 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	e853 3f00 	ldrex	r3, [r3]
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b56:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b5e:	e841 2300 	strex	r3, r2, [r1]
 8002b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e3      	bne.n	8002b32 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3314      	adds	r3, #20
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	e853 3f00 	ldrex	r3, [r3]
 8002b78:	623b      	str	r3, [r7, #32]
   return(result);
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e3      	bne.n	8002b6a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0310 	bic.w	r3, r3, #16
 8002bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002bd4:	61fa      	str	r2, [r7, #28]
 8002bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	69b9      	ldr	r1, [r7, #24]
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	617b      	str	r3, [r7, #20]
   return(result);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e3      	bne.n	8002bb0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fd fd73 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bfa:	e023      	b.n	8002c44 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_UART_IRQHandler+0x524>
 8002c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fae7 	bl	80031e8 <UART_Transmit_IT>
    return;
 8002c1a:	e014      	b.n	8002c46 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <HAL_UART_IRQHandler+0x54e>
 8002c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fb27 	bl	8003288 <UART_EndTransmit_IT>
    return;
 8002c3a:	e004      	b.n	8002c46 <HAL_UART_IRQHandler+0x54e>
    return;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <HAL_UART_IRQHandler+0x54e>
      return;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <HAL_UART_IRQHandler+0x54e>
      return;
 8002c44:	bf00      	nop
  }
}
 8002c46:	37e8      	adds	r7, #232	@ 0xe8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b090      	sub	sp, #64	@ 0x40
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d137      	bne.n	8002d3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cce:	2200      	movs	r2, #0
 8002cd0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3314      	adds	r3, #20
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3314      	adds	r3, #20
 8002cf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e5      	bne.n	8002cd2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d26:	61fa      	str	r2, [r7, #28]
 8002d28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	617b      	str	r3, [r7, #20]
   return(result);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e5      	bne.n	8002d06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d3a:	e002      	b.n	8002d42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002d3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d3e:	f7ff ff85 	bl	8002c4c <HAL_UART_TxCpltCallback>
}
 8002d42:	bf00      	nop
 8002d44:	3740      	adds	r7, #64	@ 0x40
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff ff81 	bl	8002c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b09c      	sub	sp, #112	@ 0x70
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d172      	bne.n	8002e68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d84:	2200      	movs	r2, #0
 8002d86:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002da0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002da8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002daa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ddc:	647a      	str	r2, [r7, #68]	@ 0x44
 8002dde:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3314      	adds	r3, #20
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e06:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e10:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e5      	bne.n	8002df0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d119      	bne.n	8002e68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0310 	bic.w	r3, r3, #16
 8002e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002e54:	61fa      	str	r2, [r7, #28]
 8002e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	69b9      	ldr	r1, [r7, #24]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	617b      	str	r3, [r7, #20]
   return(result);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e5      	bne.n	8002e34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d106      	bne.n	8002e84 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e7e:	f7fd fc2f 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e82:	e002      	b.n	8002e8a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002e84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e86:	f7ff fef5 	bl	8002c74 <HAL_UART_RxCpltCallback>
}
 8002e8a:	bf00      	nop
 8002e8c:	3770      	adds	r7, #112	@ 0x70
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d108      	bne.n	8002ec0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7fd fc11 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ebe:	e002      	b.n	8002ec6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff fee1 	bl	8002c88 <HAL_UART_RxHalfCpltCallback>
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ede:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eea:	2b80      	cmp	r3, #128	@ 0x80
 8002eec:	bf0c      	ite	eq
 8002eee:	2301      	moveq	r3, #1
 8002ef0:	2300      	movne	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b21      	cmp	r3, #33	@ 0x21
 8002f00:	d108      	bne.n	8002f14 <UART_DMAError+0x46>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002f0e:	68b8      	ldr	r0, [r7, #8]
 8002f10:	f000 f8ce 	bl	80030b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1e:	2b40      	cmp	r3, #64	@ 0x40
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b22      	cmp	r3, #34	@ 0x22
 8002f34:	d108      	bne.n	8002f48 <UART_DMAError+0x7a>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002f42:	68b8      	ldr	r0, [r7, #8]
 8002f44:	f000 f8dc 	bl	8003100 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f54:	68b8      	ldr	r0, [r7, #8]
 8002f56:	f7ff fea1 	bl	8002c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b098      	sub	sp, #96	@ 0x60
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	88fa      	ldrh	r2, [r7, #6]
 8002f7c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2222      	movs	r2, #34	@ 0x22
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f90:	4a44      	ldr	r2, [pc, #272]	@ (80030a4 <UART_Start_Receive_DMA+0x140>)
 8002f92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f98:	4a43      	ldr	r2, [pc, #268]	@ (80030a8 <UART_Start_Receive_DMA+0x144>)
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa0:	4a42      	ldr	r2, [pc, #264]	@ (80030ac <UART_Start_Receive_DMA+0x148>)
 8002fa2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	f7fe f91a 	bl	80011fc <HAL_DMA_Start_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e05d      	b.n	800309c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d019      	beq.n	8003032 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800300e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003014:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800301e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003020:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800302c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e5      	bne.n	8002ffe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3314      	adds	r3, #20
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	657b      	str	r3, [r7, #84]	@ 0x54
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3314      	adds	r3, #20
 8003050:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003052:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e5      	bne.n	8003032 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	e853 3f00 	ldrex	r3, [r3]
 8003074:	617b      	str	r3, [r7, #20]
   return(result);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800307c:	653b      	str	r3, [r7, #80]	@ 0x50
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3314      	adds	r3, #20
 8003084:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003086:	627a      	str	r2, [r7, #36]	@ 0x24
 8003088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	6a39      	ldr	r1, [r7, #32]
 800308c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	61fb      	str	r3, [r7, #28]
   return(result);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e5      	bne.n	8003066 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3760      	adds	r7, #96	@ 0x60
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	08002d67 	.word	0x08002d67
 80030a8:	08002e93 	.word	0x08002e93
 80030ac:	08002ecf 	.word	0x08002ecf

080030b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	@ 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	61ba      	str	r2, [r7, #24]
 80030da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6979      	ldr	r1, [r7, #20]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	613b      	str	r3, [r7, #16]
   return(result);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80030f4:	bf00      	nop
 80030f6:	3724      	adds	r7, #36	@ 0x24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b095      	sub	sp, #84	@ 0x54
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800311e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003128:	643a      	str	r2, [r7, #64]	@ 0x40
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800312e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e5      	bne.n	8003108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3314      	adds	r3, #20
 8003142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	61fb      	str	r3, [r7, #28]
   return(result);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800315c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800315e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e5      	bne.n	800313c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	2b01      	cmp	r3, #1
 8003176:	d119      	bne.n	80031ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	60bb      	str	r3, [r7, #8]
   return(result);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003198:	61ba      	str	r2, [r7, #24]
 800319a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6979      	ldr	r1, [r7, #20]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	613b      	str	r3, [r7, #16]
   return(result);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e5      	bne.n	8003178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031ba:	bf00      	nop
 80031bc:	3754      	adds	r7, #84	@ 0x54
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff fd5e 	bl	8002c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b21      	cmp	r3, #33	@ 0x21
 80031fa:	d13e      	bne.n	800327a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003204:	d114      	bne.n	8003230 <UART_Transmit_IT+0x48>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d110      	bne.n	8003230 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003222:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	1c9a      	adds	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	621a      	str	r2, [r3, #32]
 800322e:	e008      	b.n	8003242 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	1c59      	adds	r1, r3, #1
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6211      	str	r1, [r2, #32]
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29b      	uxth	r3, r3
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	4619      	mov	r1, r3
 8003250:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003264:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003274:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800329e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fccf 	bl	8002c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	@ 0x30
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b22      	cmp	r3, #34	@ 0x22
 80032d2:	f040 80aa 	bne.w	800342a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032de:	d115      	bne.n	800330c <UART_Receive_IT+0x54>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d111      	bne.n	800330c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28
 800330a:	e024      	b.n	8003356 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331a:	d007      	beq.n	800332c <UART_Receive_IT+0x74>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <UART_Receive_IT+0x82>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e008      	b.n	800334c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003346:	b2da      	uxtb	r2, r3
 8003348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4619      	mov	r1, r3
 8003364:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003366:	2b00      	cmp	r3, #0
 8003368:	d15d      	bne.n	8003426 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0220 	bic.w	r2, r2, #32
 8003378:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003388:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d135      	bne.n	800341c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 0310 	bic.w	r3, r3, #16
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d6:	623a      	str	r2, [r7, #32]
 80033d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	69f9      	ldr	r1, [r7, #28]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d10a      	bne.n	800340e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd f963 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
 800341a:	e002      	b.n	8003422 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fc29 	bl	8002c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e002      	b.n	800342c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3730      	adds	r7, #48	@ 0x30
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b0c0      	sub	sp, #256	@ 0x100
 800343a:	af00      	add	r7, sp, #0
 800343c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	68d9      	ldr	r1, [r3, #12]
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	ea40 0301 	orr.w	r3, r0, r1
 800345c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	431a      	orrs	r2, r3
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800348c:	f021 010c 	bic.w	r1, r1, #12
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800349a:	430b      	orrs	r3, r1
 800349c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ae:	6999      	ldr	r1, [r3, #24]
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	ea40 0301 	orr.w	r3, r0, r1
 80034ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003700 <UART_SetConfig+0x2cc>)
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d005      	beq.n	80034d4 <UART_SetConfig+0xa0>
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003704 <UART_SetConfig+0x2d0>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d104      	bne.n	80034de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7fe ffd6 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 80034d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034dc:	e003      	b.n	80034e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034de:	f7fe ffbd 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80034e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034f0:	f040 810c 	bne.w	800370c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003502:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	1891      	adds	r1, r2, r2
 800350c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800350e:	415b      	adcs	r3, r3
 8003510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003516:	4621      	mov	r1, r4
 8003518:	eb12 0801 	adds.w	r8, r2, r1
 800351c:	4629      	mov	r1, r5
 800351e:	eb43 0901 	adc.w	r9, r3, r1
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800352e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003536:	4690      	mov	r8, r2
 8003538:	4699      	mov	r9, r3
 800353a:	4623      	mov	r3, r4
 800353c:	eb18 0303 	adds.w	r3, r8, r3
 8003540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003544:	462b      	mov	r3, r5
 8003546:	eb49 0303 	adc.w	r3, r9, r3
 800354a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800355a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800355e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003562:	460b      	mov	r3, r1
 8003564:	18db      	adds	r3, r3, r3
 8003566:	653b      	str	r3, [r7, #80]	@ 0x50
 8003568:	4613      	mov	r3, r2
 800356a:	eb42 0303 	adc.w	r3, r2, r3
 800356e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003578:	f7fc fe38 	bl	80001ec <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4b61      	ldr	r3, [pc, #388]	@ (8003708 <UART_SetConfig+0x2d4>)
 8003582:	fba3 2302 	umull	r2, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	011c      	lsls	r4, r3, #4
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003594:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003598:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035a4:	415b      	adcs	r3, r3
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035ac:	4641      	mov	r1, r8
 80035ae:	eb12 0a01 	adds.w	sl, r2, r1
 80035b2:	4649      	mov	r1, r9
 80035b4:	eb43 0b01 	adc.w	fp, r3, r1
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035cc:	4692      	mov	sl, r2
 80035ce:	469b      	mov	fp, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	eb1a 0303 	adds.w	r3, sl, r3
 80035d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035da:	464b      	mov	r3, r9
 80035dc:	eb4b 0303 	adc.w	r3, fp, r3
 80035e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035f8:	460b      	mov	r3, r1
 80035fa:	18db      	adds	r3, r3, r3
 80035fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80035fe:	4613      	mov	r3, r2
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	647b      	str	r3, [r7, #68]	@ 0x44
 8003606:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800360a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800360e:	f7fc fded 	bl	80001ec <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4611      	mov	r1, r2
 8003618:	4b3b      	ldr	r3, [pc, #236]	@ (8003708 <UART_SetConfig+0x2d4>)
 800361a:	fba3 2301 	umull	r2, r3, r3, r1
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2264      	movs	r2, #100	@ 0x64
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	1acb      	subs	r3, r1, r3
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800362e:	4b36      	ldr	r3, [pc, #216]	@ (8003708 <UART_SetConfig+0x2d4>)
 8003630:	fba3 2302 	umull	r2, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800363c:	441c      	add	r4, r3
 800363e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003648:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800364c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	1891      	adds	r1, r2, r2
 8003656:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003658:	415b      	adcs	r3, r3
 800365a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800365c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003660:	4641      	mov	r1, r8
 8003662:	1851      	adds	r1, r2, r1
 8003664:	6339      	str	r1, [r7, #48]	@ 0x30
 8003666:	4649      	mov	r1, r9
 8003668:	414b      	adcs	r3, r1
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003678:	4659      	mov	r1, fp
 800367a:	00cb      	lsls	r3, r1, #3
 800367c:	4651      	mov	r1, sl
 800367e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003682:	4651      	mov	r1, sl
 8003684:	00ca      	lsls	r2, r1, #3
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	4603      	mov	r3, r0
 800368c:	4642      	mov	r2, r8
 800368e:	189b      	adds	r3, r3, r2
 8003690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003694:	464b      	mov	r3, r9
 8003696:	460a      	mov	r2, r1
 8003698:	eb42 0303 	adc.w	r3, r2, r3
 800369c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036ca:	f7fc fd8f 	bl	80001ec <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <UART_SetConfig+0x2d4>)
 80036d4:	fba3 1302 	umull	r1, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2164      	movs	r1, #100	@ 0x64
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3332      	adds	r3, #50	@ 0x32
 80036e6:	4a08      	ldr	r2, [pc, #32]	@ (8003708 <UART_SetConfig+0x2d4>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	f003 0207 	and.w	r2, r3, #7
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4422      	add	r2, r4
 80036fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036fc:	e106      	b.n	800390c <UART_SetConfig+0x4d8>
 80036fe:	bf00      	nop
 8003700:	40011000 	.word	0x40011000
 8003704:	40011400 	.word	0x40011400
 8003708:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800370c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003710:	2200      	movs	r2, #0
 8003712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003716:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800371a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800371e:	4642      	mov	r2, r8
 8003720:	464b      	mov	r3, r9
 8003722:	1891      	adds	r1, r2, r2
 8003724:	6239      	str	r1, [r7, #32]
 8003726:	415b      	adcs	r3, r3
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
 800372a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800372e:	4641      	mov	r1, r8
 8003730:	1854      	adds	r4, r2, r1
 8003732:	4649      	mov	r1, r9
 8003734:	eb43 0501 	adc.w	r5, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	00eb      	lsls	r3, r5, #3
 8003742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4643      	mov	r3, r8
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003754:	464b      	mov	r3, r9
 8003756:	eb45 0303 	adc.w	r3, r5, r3
 800375a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800376a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800377a:	4629      	mov	r1, r5
 800377c:	008b      	lsls	r3, r1, #2
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003784:	4621      	mov	r1, r4
 8003786:	008a      	lsls	r2, r1, #2
 8003788:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800378c:	f7fc fd2e 	bl	80001ec <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4b60      	ldr	r3, [pc, #384]	@ (8003918 <UART_SetConfig+0x4e4>)
 8003796:	fba3 2302 	umull	r2, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	011c      	lsls	r4, r3, #4
 800379e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	61b9      	str	r1, [r7, #24]
 80037b8:	415b      	adcs	r3, r3
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c0:	4641      	mov	r1, r8
 80037c2:	1851      	adds	r1, r2, r1
 80037c4:	6139      	str	r1, [r7, #16]
 80037c6:	4649      	mov	r1, r9
 80037c8:	414b      	adcs	r3, r1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d8:	4659      	mov	r1, fp
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4651      	mov	r1, sl
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4642      	mov	r2, r8
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037f4:	464b      	mov	r3, r9
 80037f6:	460a      	mov	r2, r1
 80037f8:	eb42 0303 	adc.w	r3, r2, r3
 80037fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	67bb      	str	r3, [r7, #120]	@ 0x78
 800380a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003818:	4649      	mov	r1, r9
 800381a:	008b      	lsls	r3, r1, #2
 800381c:	4641      	mov	r1, r8
 800381e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003822:	4641      	mov	r1, r8
 8003824:	008a      	lsls	r2, r1, #2
 8003826:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800382a:	f7fc fcdf 	bl	80001ec <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4611      	mov	r1, r2
 8003834:	4b38      	ldr	r3, [pc, #224]	@ (8003918 <UART_SetConfig+0x4e4>)
 8003836:	fba3 2301 	umull	r2, r3, r3, r1
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2264      	movs	r2, #100	@ 0x64
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	1acb      	subs	r3, r1, r3
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	3332      	adds	r3, #50	@ 0x32
 8003848:	4a33      	ldr	r2, [pc, #204]	@ (8003918 <UART_SetConfig+0x4e4>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003854:	441c      	add	r4, r3
 8003856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385a:	2200      	movs	r2, #0
 800385c:	673b      	str	r3, [r7, #112]	@ 0x70
 800385e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003860:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	415b      	adcs	r3, r3
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003874:	4641      	mov	r1, r8
 8003876:	1851      	adds	r1, r2, r1
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	4649      	mov	r1, r9
 800387c:	414b      	adcs	r3, r1
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800388c:	4659      	mov	r1, fp
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4651      	mov	r1, sl
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4642      	mov	r2, r8
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038a6:	464b      	mov	r3, r9
 80038a8:	460a      	mov	r2, r1
 80038aa:	eb42 0303 	adc.w	r3, r2, r3
 80038ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80038ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038c8:	4649      	mov	r1, r9
 80038ca:	008b      	lsls	r3, r1, #2
 80038cc:	4641      	mov	r1, r8
 80038ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d2:	4641      	mov	r1, r8
 80038d4:	008a      	lsls	r2, r1, #2
 80038d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038da:	f7fc fc87 	bl	80001ec <__aeabi_uldivmod>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <UART_SetConfig+0x4e4>)
 80038e4:	fba3 1302 	umull	r1, r3, r3, r2
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	2164      	movs	r1, #100	@ 0x64
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	3332      	adds	r3, #50	@ 0x32
 80038f6:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <UART_SetConfig+0x4e4>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	f003 020f 	and.w	r2, r3, #15
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4422      	add	r2, r4
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003912:	46bd      	mov	sp, r7
 8003914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003918:	51eb851f 	.word	0x51eb851f

0800391c <memset>:
 800391c:	4402      	add	r2, r0
 800391e:	4603      	mov	r3, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	d100      	bne.n	8003926 <memset+0xa>
 8003924:	4770      	bx	lr
 8003926:	f803 1b01 	strb.w	r1, [r3], #1
 800392a:	e7f9      	b.n	8003920 <memset+0x4>

0800392c <__libc_init_array>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4d0d      	ldr	r5, [pc, #52]	@ (8003964 <__libc_init_array+0x38>)
 8003930:	4c0d      	ldr	r4, [pc, #52]	@ (8003968 <__libc_init_array+0x3c>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	2600      	movs	r6, #0
 8003938:	42a6      	cmp	r6, r4
 800393a:	d109      	bne.n	8003950 <__libc_init_array+0x24>
 800393c:	4d0b      	ldr	r5, [pc, #44]	@ (800396c <__libc_init_array+0x40>)
 800393e:	4c0c      	ldr	r4, [pc, #48]	@ (8003970 <__libc_init_array+0x44>)
 8003940:	f000 f818 	bl	8003974 <_init>
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	2600      	movs	r6, #0
 800394a:	42a6      	cmp	r6, r4
 800394c:	d105      	bne.n	800395a <__libc_init_array+0x2e>
 800394e:	bd70      	pop	{r4, r5, r6, pc}
 8003950:	f855 3b04 	ldr.w	r3, [r5], #4
 8003954:	4798      	blx	r3
 8003956:	3601      	adds	r6, #1
 8003958:	e7ee      	b.n	8003938 <__libc_init_array+0xc>
 800395a:	f855 3b04 	ldr.w	r3, [r5], #4
 800395e:	4798      	blx	r3
 8003960:	3601      	adds	r6, #1
 8003962:	e7f2      	b.n	800394a <__libc_init_array+0x1e>
 8003964:	080039b4 	.word	0x080039b4
 8003968:	080039b4 	.word	0x080039b4
 800396c:	080039b4 	.word	0x080039b4
 8003970:	080039b8 	.word	0x080039b8

08003974 <_init>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr

08003980 <_fini>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr
