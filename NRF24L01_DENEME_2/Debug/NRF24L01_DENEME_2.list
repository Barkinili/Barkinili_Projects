
NRF24L01_DENEME_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000553c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  080056cc  080056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c98  08005c98  000070a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c98  08005c98  00006c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ca0  08005ca0  000070a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ca0  08005ca0  00006ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ca4  08005ca4  00006ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08005ca8  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070a0  2**0
                  CONTENTS
 10 .bss          00000354  200000a0  200000a0  000070a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003f4  200003f4  000070a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c44a  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c62  00000000  00000000  0001351a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  00015180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080c  00000000  00000000  00015bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b065  00000000  00000000  00016404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd78  00000000  00000000  00031469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d5cc  00000000  00000000  0003e1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000db7ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f78  00000000  00000000  000db7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000de768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056b4 	.word	0x080056b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	080056b4 	.word	0x080056b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800028c:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <NRF24_DelayMicroSeconds+0x3c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0b      	ldr	r2, [pc, #44]	@ (80002c0 <NRF24_DelayMicroSeconds+0x40>)
 8000292:	fba2 2303 	umull	r2, r3, r2, r3
 8000296:	0c9a      	lsrs	r2, r3, #18
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fb02 f303 	mul.w	r3, r2, r3
 800029e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80002a0:	bf00      	nop
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	1e5a      	subs	r2, r3, #1
 80002a6:	60fa      	str	r2, [r7, #12]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d1fa      	bne.n	80002a2 <NRF24_DelayMicroSeconds+0x22>
}
 80002ac:	bf00      	nop
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	20000044 	.word	0x20000044
 80002c0:	165e9f81 	.word	0x165e9f81

080002c4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d008      	beq.n	80002e4 <NRF24_csn+0x20>
 80002d2:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <NRF24_csn+0x38>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <NRF24_csn+0x3c>)
 80002d8:	8811      	ldrh	r1, [r2, #0]
 80002da:	2201      	movs	r2, #1
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fe99 	bl	8002014 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80002e2:	e007      	b.n	80002f4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <NRF24_csn+0x38>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <NRF24_csn+0x3c>)
 80002ea:	8811      	ldrh	r1, [r2, #0]
 80002ec:	2200      	movs	r2, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fe90 	bl	8002014 <HAL_GPIO_WritePin>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000c4 	.word	0x200000c4
 8000300:	200000c8 	.word	0x200000c8

08000304 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d008      	beq.n	8000324 <NRF24_ce+0x20>
 8000312:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <NRF24_ce+0x38>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <NRF24_ce+0x3c>)
 8000318:	8811      	ldrh	r1, [r2, #0]
 800031a:	2201      	movs	r2, #1
 800031c:	4618      	mov	r0, r3
 800031e:	f001 fe79 	bl	8002014 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000322:	e007      	b.n	8000334 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <NRF24_ce+0x38>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a05      	ldr	r2, [pc, #20]	@ (8000340 <NRF24_ce+0x3c>)
 800032a:	8811      	ldrh	r1, [r2, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fe70 	bl	8002014 <HAL_GPIO_WritePin>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	200000c4 	.word	0x200000c4
 8000340:	200000ca 	.word	0x200000ca

08000344 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ffb8 	bl	80002c4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	f003 031f 	and.w	r3, r3, #31
 800035a:	b2db      	uxtb	r3, r3
 800035c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800035e:	f107 010c 	add.w	r1, r7, #12
 8000362:	2364      	movs	r3, #100	@ 0x64
 8000364:	2201      	movs	r2, #1
 8000366:	480a      	ldr	r0, [pc, #40]	@ (8000390 <NRF24_read_register+0x4c>)
 8000368:	f003 f92f 	bl	80035ca <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800036c:	f107 030c 	add.w	r3, r7, #12
 8000370:	1c59      	adds	r1, r3, #1
 8000372:	2364      	movs	r3, #100	@ 0x64
 8000374:	2201      	movs	r2, #1
 8000376:	4806      	ldr	r0, [pc, #24]	@ (8000390 <NRF24_read_register+0x4c>)
 8000378:	f003 fa9c 	bl	80038b4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800037c:	7b7b      	ldrb	r3, [r7, #13]
 800037e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000380:	2001      	movs	r0, #1
 8000382:	f7ff ff9f 	bl	80002c4 <NRF24_csn>
	return retData;
 8000386:	7bfb      	ldrb	r3, [r7, #15]
}
 8000388:	4618      	mov	r0, r3
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	200000cc 	.word	0x200000cc

08000394 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80003a4:	2000      	movs	r0, #0
 80003a6:	f7ff ff8d 	bl	80002c4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 031f 	and.w	r3, r3, #31
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80003b4:	f107 010c 	add.w	r1, r7, #12
 80003b8:	2364      	movs	r3, #100	@ 0x64
 80003ba:	2201      	movs	r2, #1
 80003bc:	4808      	ldr	r0, [pc, #32]	@ (80003e0 <NRF24_read_registerN+0x4c>)
 80003be:	f003 f904 	bl	80035ca <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	b29a      	uxth	r2, r3
 80003c6:	2364      	movs	r3, #100	@ 0x64
 80003c8:	6839      	ldr	r1, [r7, #0]
 80003ca:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <NRF24_read_registerN+0x4c>)
 80003cc:	f003 fa72 	bl	80038b4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff77 	bl	80002c4 <NRF24_csn>
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000cc 	.word	0x200000cc

080003e4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	460a      	mov	r2, r1
 80003ee:	71fb      	strb	r3, [r7, #7]
 80003f0:	4613      	mov	r3, r2
 80003f2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f7ff ff65 	bl	80002c4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	b2db      	uxtb	r3, r3
 8000402:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000408:	f107 010c 	add.w	r1, r7, #12
 800040c:	2364      	movs	r3, #100	@ 0x64
 800040e:	2202      	movs	r2, #2
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <NRF24_write_register+0x40>)
 8000412:	f003 f8da 	bl	80035ca <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff ff54 	bl	80002c4 <NRF24_csn>
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000cc 	.word	0x200000cc

08000428 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff ff43 	bl	80002c4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	f043 0320 	orr.w	r3, r3, #32
 8000444:	b2db      	uxtb	r3, r3
 8000446:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000448:	f107 010c 	add.w	r1, r7, #12
 800044c:	2364      	movs	r3, #100	@ 0x64
 800044e:	2201      	movs	r2, #1
 8000450:	4808      	ldr	r0, [pc, #32]	@ (8000474 <NRF24_write_registerN+0x4c>)
 8000452:	f003 f8ba 	bl	80035ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	b29a      	uxth	r2, r3
 800045a:	2364      	movs	r3, #100	@ 0x64
 800045c:	6839      	ldr	r1, [r7, #0]
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <NRF24_write_registerN+0x4c>)
 8000460:	f003 f8b3 	bl	80035ca <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f7ff ff2d 	bl	80002c4 <NRF24_csn>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	200000cc 	.word	0x200000cc

08000478 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff1d 	bl	80002c4 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800048a:	23a0      	movs	r3, #160	@ 0xa0
 800048c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800048e:	f107 010f 	add.w	r1, r7, #15
 8000492:	2364      	movs	r3, #100	@ 0x64
 8000494:	2201      	movs	r2, #1
 8000496:	4808      	ldr	r0, [pc, #32]	@ (80004b8 <NRF24_write_payload+0x40>)
 8000498:	f003 f897 	bl	80035ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	b29a      	uxth	r2, r3
 80004a0:	2364      	movs	r3, #100	@ 0x64
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	4804      	ldr	r0, [pc, #16]	@ (80004b8 <NRF24_write_payload+0x40>)
 80004a6:	f003 f890 	bl	80035ca <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff ff0a 	bl	80002c4 <NRF24_csn>
}
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200000cc 	.word	0x200000cc

080004bc <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80004c0:	21ff      	movs	r1, #255	@ 0xff
 80004c2:	20e1      	movs	r0, #225	@ 0xe1
 80004c4:	f7ff ff8e 	bl	80003e4 <NRF24_write_register>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80004d0:	21ff      	movs	r1, #255	@ 0xff
 80004d2:	20e2      	movs	r0, #226	@ 0xe2
 80004d4:	f7ff ff86 	bl	80003e4 <NRF24_write_register>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80004e2:	2007      	movs	r0, #7
 80004e4:	f7ff ff2e 	bl	8000344 <NRF24_read_register>
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80004ec:	79fb      	ldrb	r3, [r7, #7]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80004f8:	b082      	sub	sp, #8
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b084      	sub	sp, #16
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	61fb      	str	r3, [r7, #28]
 8000504:	460b      	mov	r3, r1
 8000506:	807b      	strh	r3, [r7, #2]
 8000508:	4613      	mov	r3, r2
 800050a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800050c:	4b66      	ldr	r3, [pc, #408]	@ (80006a8 <NRF24_begin+0x1b0>)
 800050e:	4618      	mov	r0, r3
 8000510:	f107 031c 	add.w	r3, r7, #28
 8000514:	2264      	movs	r2, #100	@ 0x64
 8000516:	4619      	mov	r1, r3
 8000518:	f004 fc82 	bl	8004e20 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800051c:	4a63      	ldr	r2, [pc, #396]	@ (80006ac <NRF24_begin+0x1b4>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000522:	4a63      	ldr	r2, [pc, #396]	@ (80006b0 <NRF24_begin+0x1b8>)
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000528:	4a62      	ldr	r2, [pc, #392]	@ (80006b4 <NRF24_begin+0x1bc>)
 800052a:	883b      	ldrh	r3, [r7, #0]
 800052c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff fec8 	bl	80002c4 <NRF24_csn>
	NRF24_ce(0);
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fee5 	bl	8000304 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f001 fa84 	bl	8001a48 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000540:	2108      	movs	r1, #8
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ff4e 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000548:	213f      	movs	r1, #63	@ 0x3f
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff ff4a 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000550:	2103      	movs	r1, #3
 8000552:	2002      	movs	r0, #2
 8000554:	f7ff ff46 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000558:	2103      	movs	r1, #3
 800055a:	2003      	movs	r0, #3
 800055c:	f7ff ff42 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000560:	2103      	movs	r1, #3
 8000562:	2004      	movs	r0, #4
 8000564:	f7ff ff3e 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000568:	2102      	movs	r1, #2
 800056a:	2005      	movs	r0, #5
 800056c:	f7ff ff3a 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000570:	210f      	movs	r1, #15
 8000572:	2006      	movs	r0, #6
 8000574:	f7ff ff36 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000578:	210e      	movs	r1, #14
 800057a:	2007      	movs	r0, #7
 800057c:	f7ff ff32 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000580:	2100      	movs	r1, #0
 8000582:	2008      	movs	r0, #8
 8000584:	f7ff ff2e 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000588:	2100      	movs	r1, #0
 800058a:	2009      	movs	r0, #9
 800058c:	f7ff ff2a 	bl	80003e4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000590:	23e7      	movs	r3, #231	@ 0xe7
 8000592:	733b      	strb	r3, [r7, #12]
 8000594:	23e7      	movs	r3, #231	@ 0xe7
 8000596:	72fb      	strb	r3, [r7, #11]
 8000598:	23e7      	movs	r3, #231	@ 0xe7
 800059a:	72bb      	strb	r3, [r7, #10]
 800059c:	23e7      	movs	r3, #231	@ 0xe7
 800059e:	727b      	strb	r3, [r7, #9]
 80005a0:	23e7      	movs	r3, #231	@ 0xe7
 80005a2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2205      	movs	r2, #5
 80005aa:	4619      	mov	r1, r3
 80005ac:	200a      	movs	r0, #10
 80005ae:	f7ff ff3b 	bl	8000428 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80005b2:	23c2      	movs	r3, #194	@ 0xc2
 80005b4:	733b      	strb	r3, [r7, #12]
 80005b6:	23c2      	movs	r3, #194	@ 0xc2
 80005b8:	72fb      	strb	r3, [r7, #11]
 80005ba:	23c2      	movs	r3, #194	@ 0xc2
 80005bc:	72bb      	strb	r3, [r7, #10]
 80005be:	23c2      	movs	r3, #194	@ 0xc2
 80005c0:	727b      	strb	r3, [r7, #9]
 80005c2:	23c2      	movs	r3, #194	@ 0xc2
 80005c4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2205      	movs	r2, #5
 80005cc:	4619      	mov	r1, r3
 80005ce:	200b      	movs	r0, #11
 80005d0:	f7ff ff2a 	bl	8000428 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80005d4:	21c3      	movs	r1, #195	@ 0xc3
 80005d6:	200c      	movs	r0, #12
 80005d8:	f7ff ff04 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80005dc:	21c4      	movs	r1, #196	@ 0xc4
 80005de:	200d      	movs	r0, #13
 80005e0:	f7ff ff00 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80005e4:	21c5      	movs	r1, #197	@ 0xc5
 80005e6:	200e      	movs	r0, #14
 80005e8:	f7ff fefc 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80005ec:	21c6      	movs	r1, #198	@ 0xc6
 80005ee:	200f      	movs	r0, #15
 80005f0:	f7ff fef8 	bl	80003e4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80005f4:	23e7      	movs	r3, #231	@ 0xe7
 80005f6:	733b      	strb	r3, [r7, #12]
 80005f8:	23e7      	movs	r3, #231	@ 0xe7
 80005fa:	72fb      	strb	r3, [r7, #11]
 80005fc:	23e7      	movs	r3, #231	@ 0xe7
 80005fe:	72bb      	strb	r3, [r7, #10]
 8000600:	23e7      	movs	r3, #231	@ 0xe7
 8000602:	727b      	strb	r3, [r7, #9]
 8000604:	23e7      	movs	r3, #231	@ 0xe7
 8000606:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2205      	movs	r2, #5
 800060e:	4619      	mov	r1, r3
 8000610:	2010      	movs	r0, #16
 8000612:	f7ff ff09 	bl	8000428 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000616:	2100      	movs	r1, #0
 8000618:	2011      	movs	r0, #17
 800061a:	f7ff fee3 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800061e:	2100      	movs	r1, #0
 8000620:	2012      	movs	r0, #18
 8000622:	f7ff fedf 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000626:	2100      	movs	r1, #0
 8000628:	2013      	movs	r0, #19
 800062a:	f7ff fedb 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800062e:	2100      	movs	r1, #0
 8000630:	2014      	movs	r0, #20
 8000632:	f7ff fed7 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000636:	2100      	movs	r1, #0
 8000638:	2015      	movs	r0, #21
 800063a:	f7ff fed3 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800063e:	2100      	movs	r1, #0
 8000640:	2016      	movs	r0, #22
 8000642:	f7ff fecf 	bl	80003e4 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000646:	f000 fa8b 	bl	8000b60 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	201c      	movs	r0, #28
 800064e:	f7ff fec9 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000652:	2100      	movs	r1, #0
 8000654:	201d      	movs	r0, #29
 8000656:	f7ff fec5 	bl	80003e4 <NRF24_write_register>
	printRadioSettings();
 800065a:	f000 fa9b 	bl	8000b94 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800065e:	210f      	movs	r1, #15
 8000660:	200f      	movs	r0, #15
 8000662:	f000 f8ad 	bl	80007c0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000666:	2003      	movs	r0, #3
 8000668:	f000 f929 	bl	80008be <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 f95f 	bl	8000930 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000672:	2002      	movs	r0, #2
 8000674:	f000 f9a2 	bl	80009bc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000678:	f000 f8f4 	bl	8000864 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800067c:	2020      	movs	r0, #32
 800067e:	f000 f8d1 	bl	8000824 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000682:	f000 fa64 	bl	8000b4e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000686:	204c      	movs	r0, #76	@ 0x4c
 8000688:	f000 f8b6 	bl	80007f8 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800068c:	f7ff ff16 	bl	80004bc <NRF24_flush_tx>
	NRF24_flush_rx();
 8000690:	f7ff ff1c 	bl	80004cc <NRF24_flush_rx>

	NRF24_powerDown();
 8000694:	f000 f9ba 	bl	8000a0c <NRF24_powerDown>

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006a2:	b002      	add	sp, #8
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	200000cc 	.word	0x200000cc
 80006ac:	200000c4 	.word	0x200000c4
 80006b0:	200000c8 	.word	0x200000c8
 80006b4:	200000ca 	.word	0x200000ca

080006b8 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fe21 	bl	8000304 <NRF24_ce>
	NRF24_flush_tx();
 80006c2:	f7ff fefb 	bl	80004bc <NRF24_flush_tx>
	NRF24_flush_rx();
 80006c6:	f7ff ff01 	bl	80004cc <NRF24_flush_rx>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80006dc:	f000 fa37 	bl	8000b4e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	4619      	mov	r1, r3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f9d0 	bl	8000a8a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80006ea:	f001 f9a1 	bl	8001a30 <HAL_GetTick>
 80006ee:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80006f0:	230a      	movs	r3, #10
 80006f2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80006f4:	f107 030d 	add.w	r3, r7, #13
 80006f8:	2201      	movs	r2, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	2008      	movs	r0, #8
 80006fe:	f7ff fe49 	bl	8000394 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000702:	f7ff feeb 	bl	80004dc <NRF24_get_status>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000710:	2b00      	cmp	r3, #0
 8000712:	d107      	bne.n	8000724 <NRF24_write+0x54>
 8000714:	f001 f98c 	bl	8001a30 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8e7      	bhi.n	80006f4 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000724:	f107 010b 	add.w	r1, r7, #11
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4a0c      	ldr	r2, [pc, #48]	@ (8000760 <NRF24_write+0x90>)
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f9da 	bl	8000ae8 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000734:	7b3b      	ldrb	r3, [r7, #12]
 8000736:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <NRF24_write+0x90>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d005      	beq.n	800074c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000740:	f000 f888 	bl	8000854 <NRF24_getDynamicPayloadSize>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <NRF24_write+0x94>)
 800074a:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 800074c:	f000 f80c 	bl	8000768 <NRF24_available>
	NRF24_flush_tx();
 8000750:	f7ff feb4 	bl	80004bc <NRF24_flush_tx>
	return retStatus;
 8000754:	7bbb      	ldrb	r3, [r7, #14]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000bc 	.word	0x200000bc
 8000764:	200000bd 	.word	0x200000bd

08000768 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f95c 	bl	8000a2a <NRF24_availablePipe>
 8000772:	4603      	mov	r3, r0
}
 8000774:	4618      	mov	r0, r3
 8000776:	bd80      	pop	{r7, pc}

08000778 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000782:	463b      	mov	r3, r7
 8000784:	2205      	movs	r2, #5
 8000786:	4619      	mov	r1, r3
 8000788:	200a      	movs	r0, #10
 800078a:	f7ff fe4d 	bl	8000428 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800078e:	463b      	mov	r3, r7
 8000790:	2205      	movs	r2, #5
 8000792:	4619      	mov	r1, r3
 8000794:	2010      	movs	r0, #16
 8000796:	f7ff fe47 	bl	8000428 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 800079a:	2320      	movs	r3, #32
 800079c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800079e:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <NRF24_openWritingPipe+0x44>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	7bfa      	ldrb	r2, [r7, #15]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	bf28      	it	cs
 80007a8:	4613      	movcs	r3, r2
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	2011      	movs	r0, #17
 80007b0:	f7ff fe18 	bl	80003e4 <NRF24_write_register>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000be 	.word	0x200000be

080007c0 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	2004      	movs	r0, #4
 80007ec:	f7ff fdfa 	bl	80003e4 <NRF24_write_register>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000802:	237f      	movs	r3, #127	@ 0x7f
 8000804:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000806:	7bfa      	ldrb	r2, [r7, #15]
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4293      	cmp	r3, r2
 800080c:	bf28      	it	cs
 800080e:	4613      	movcs	r3, r2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	2005      	movs	r0, #5
 8000816:	f7ff fde5 	bl	80003e4 <NRF24_write_register>
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800082e:	2320      	movs	r3, #32
 8000830:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000832:	7bfa      	ldrb	r2, [r7, #15]
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4293      	cmp	r3, r2
 8000838:	bf28      	it	cs
 800083a:	4613      	movcs	r3, r2
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <NRF24_setPayloadSize+0x2c>)
 8000840:	701a      	strb	r2, [r3, #0]
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	200000be 	.word	0x200000be

08000854 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000858:	2060      	movs	r0, #96	@ 0x60
 800085a:	f7ff fd73 	bl	8000344 <NRF24_read_register>
 800085e:	4603      	mov	r3, r0
}
 8000860:	4618      	mov	r0, r3
 8000862:	bd80      	pop	{r7, pc}

08000864 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000868:	201d      	movs	r0, #29
 800086a:	f7ff fd6b 	bl	8000344 <NRF24_read_register>
 800086e:	4603      	mov	r3, r0
 8000870:	f023 0304 	bic.w	r3, r3, #4
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	201d      	movs	r0, #29
 800087a:	f7ff fdb3 	bl	80003e4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 800087e:	2100      	movs	r1, #0
 8000880:	201c      	movs	r0, #28
 8000882:	f7ff fdaf 	bl	80003e4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000886:	4b02      	ldr	r3, [pc, #8]	@ (8000890 <NRF24_disableDynamicPayloads+0x2c>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000bf 	.word	0x200000bf

08000894 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d004      	beq.n	80008ae <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80008a4:	213f      	movs	r1, #63	@ 0x3f
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fd9c 	bl	80003e4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80008ac:	e003      	b.n	80008b6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff fd97 	bl	80003e4 <NRF24_write_register>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b084      	sub	sp, #16
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80008c8:	2006      	movs	r0, #6
 80008ca:	f7ff fd3b 	bl	8000344 <NRF24_read_register>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	f023 0306 	bic.w	r3, r3, #6
 80008d8:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d104      	bne.n	80008ea <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	f043 0306 	orr.w	r3, r3, #6
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	e019      	b.n	800091e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d104      	bne.n	80008fa <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e011      	b.n	800091e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d104      	bne.n	800090a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	e009      	b.n	800091e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d103      	bne.n	800091e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	f043 0306 	orr.w	r3, r3, #6
 800091c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	4619      	mov	r1, r3
 8000922:	2006      	movs	r0, #6
 8000924:	f7ff fd5e 	bl	80003e4 <NRF24_write_register>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800093e:	2006      	movs	r0, #6
 8000940:	f7ff fd00 	bl	8000344 <NRF24_read_register>
 8000944:	4603      	mov	r3, r0
 8000946:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <NRF24_setDataRate+0x88>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000954:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d107      	bne.n	800096c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <NRF24_setDataRate+0x88>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	f043 0320 	orr.w	r3, r3, #32
 8000968:	73bb      	strb	r3, [r7, #14]
 800096a:	e00d      	b.n	8000988 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d107      	bne.n	8000982 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <NRF24_setDataRate+0x88>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000978:	7bbb      	ldrb	r3, [r7, #14]
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	73bb      	strb	r3, [r7, #14]
 8000980:	e002      	b.n	8000988 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <NRF24_setDataRate+0x88>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	4619      	mov	r1, r3
 800098c:	2006      	movs	r0, #6
 800098e:	f7ff fd29 	bl	80003e4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000992:	2006      	movs	r0, #6
 8000994:	f7ff fcd6 	bl	8000344 <NRF24_read_register>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	4293      	cmp	r3, r2
 80009a0:	d102      	bne.n	80009a8 <NRF24_setDataRate+0x78>
  {
    result = true;
 80009a2:	2301      	movs	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e002      	b.n	80009ae <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <NRF24_setDataRate+0x88>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000c0 	.word	0x200000c0

080009bc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fcbc 	bl	8000344 <NRF24_read_register>
 80009cc:	4603      	mov	r3, r0
 80009ce:	f023 030c 	bic.w	r3, r3, #12
 80009d2:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00f      	beq.n	80009fa <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d104      	bne.n	80009ea <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	e007      	b.n	80009fa <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	4619      	mov	r1, r3
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fcf0 	bl	80003e4 <NRF24_write_register>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fc97 	bl	8000344 <NRF24_read_register>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f023 0302 	bic.w	r3, r3, #2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fcdf 	bl	80003e4 <NRF24_write_register>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000a32:	f7ff fd53 	bl	80004dc <NRF24_get_status>
 8000a36:	4603      	mov	r3, r0
 8000a38:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bf14      	ite	ne
 8000a44:	2301      	movne	r3, #1
 8000a46:	2300      	moveq	r3, #0
 8000a48:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000a4a:	7bbb      	ldrb	r3, [r7, #14]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d017      	beq.n	8000a80 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d007      	beq.n	8000a66 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000a66:	2140      	movs	r1, #64	@ 0x40
 8000a68:	2007      	movs	r0, #7
 8000a6a:	f7ff fcbb 	bl	80003e4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	f003 0320 	and.w	r3, r3, #32
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f7ff fcb2 	bl	80003e4 <NRF24_write_register>
    }
  }
  return result;
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff fc34 	bl	8000304 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fc51 	bl	8000344 <NRF24_read_register>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff fc96 	bl	80003e4 <NRF24_write_register>
  NRF24_ce(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fc23 	bl	8000304 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000abe:	2096      	movs	r0, #150	@ 0x96
 8000ac0:	f7ff fbde 	bl	8000280 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fcd5 	bl	8000478 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff fc18 	bl	8000304 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000ad4:	200f      	movs	r0, #15
 8000ad6:	f7ff fbd3 	bl	8000280 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fc12 	bl	8000304 <NRF24_ce>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000af4:	f7ff fcf2 	bl	80004dc <NRF24_get_status>
 8000af8:	4603      	mov	r3, r0
 8000afa:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b02:	2170      	movs	r1, #112	@ 0x70
 8000b04:	2007      	movs	r0, #7
 8000b06:	f7ff fc6d 	bl	80003e4 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf14      	ite	ne
 8000b14:	2301      	movne	r3, #1
 8000b16:	2300      	moveq	r3, #0
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
 8000b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bf14      	ite	ne
 8000b3c:	2301      	movne	r3, #1
 8000b3e:	2300      	moveq	r3, #0
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	701a      	strb	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b52:	2170      	movs	r1, #112	@ 0x70
 8000b54:	2007      	movs	r0, #7
 8000b56:	f7ff fc45 	bl	80003e4 <NRF24_write_register>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fbac 	bl	80002c4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000b6c:	2350      	movs	r3, #80	@ 0x50
 8000b6e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000b70:	2373      	movs	r3, #115	@ 0x73
 8000b72:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000b74:	1d39      	adds	r1, r7, #4
 8000b76:	2364      	movs	r3, #100	@ 0x64
 8000b78:	2202      	movs	r2, #2
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <NRF24_ACTIVATE_cmd+0x30>)
 8000b7c:	f002 fd25 	bl	80035ca <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff fb9f 	bl	80002c4 <NRF24_csn>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000cc 	.word	0x200000cc

08000b94 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b96:	b0a1      	sub	sp, #132	@ 0x84
 8000b98:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	49c3      	ldr	r1, [pc, #780]	@ (8000eac <printRadioSettings+0x318>)
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f004 f8e7 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fb10 	bl	80001d0 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f107 0108 	add.w	r1, r7, #8
 8000bb8:	230a      	movs	r3, #10
 8000bba:	48bd      	ldr	r0, [pc, #756]	@ (8000eb0 <printRadioSettings+0x31c>)
 8000bbc:	f003 fcfe 	bl	80045bc <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fbbf 	bl	8000344 <NRF24_read_register>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val & (1 << 3))
 8000bcc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d013      	beq.n	8000c00 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <printRadioSettings+0x5e>
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	49b2      	ldr	r1, [pc, #712]	@ (8000eb4 <printRadioSettings+0x320>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 f8c2 	bl	8004d74 <siprintf>
 8000bf0:	e00c      	b.n	8000c0c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	49b0      	ldr	r1, [pc, #704]	@ (8000eb8 <printRadioSettings+0x324>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 f8bb 	bl	8004d74 <siprintf>
 8000bfe:	e005      	b.n	8000c0c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	49ad      	ldr	r1, [pc, #692]	@ (8000ebc <printRadioSettings+0x328>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 f8b4 	bl	8004d74 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fadd 	bl	80001d0 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f107 0108 	add.w	r1, r7, #8
 8000c1e:	230a      	movs	r3, #10
 8000c20:	48a3      	ldr	r0, [pc, #652]	@ (8000eb0 <printRadioSettings+0x31c>)
 8000c22:	f003 fccb 	bl	80045bc <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff fb8c 	bl	8000344 <NRF24_read_register>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c32:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000c36:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bfcc      	ite	gt
 8000c3e:	2301      	movgt	r3, #1
 8000c40:	2300      	movle	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c46:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000c4a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	bfcc      	ite	gt
 8000c52:	2301      	movgt	r3, #1
 8000c54:	2300      	movle	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c5a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000c5e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bfcc      	ite	gt
 8000c66:	2301      	movgt	r3, #1
 8000c68:	2300      	movle	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c6e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000c72:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bfcc      	ite	gt
 8000c7a:	2301      	movgt	r3, #1
 8000c7c:	2300      	movle	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c82:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000c86:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bfcc      	ite	gt
 8000c8e:	2301      	movgt	r3, #1
 8000c90:	2300      	movle	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c96:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000c9a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bfcc      	ite	gt
 8000ca2:	2301      	movgt	r3, #1
 8000ca4:	2300      	movle	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f107 0008 	add.w	r0, r7, #8
 8000cac:	9303      	str	r3, [sp, #12]
 8000cae:	9402      	str	r4, [sp, #8]
 8000cb0:	9101      	str	r1, [sp, #4]
 8000cb2:	9200      	str	r2, [sp, #0]
 8000cb4:	4633      	mov	r3, r6
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	4981      	ldr	r1, [pc, #516]	@ (8000ec0 <printRadioSettings+0x32c>)
 8000cba:	f004 f85b 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fa84 	bl	80001d0 <strlen>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	f107 0108 	add.w	r1, r7, #8
 8000cd0:	230a      	movs	r3, #10
 8000cd2:	4877      	ldr	r0, [pc, #476]	@ (8000eb0 <printRadioSettings+0x31c>)
 8000cd4:	f003 fc72 	bl	80045bc <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f7ff fb33 	bl	8000344 <NRF24_read_register>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ce4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000ce8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bfcc      	ite	gt
 8000cf0:	2301      	movgt	r3, #1
 8000cf2:	2300      	movle	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cf8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000cfc:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bfcc      	ite	gt
 8000d04:	2301      	movgt	r3, #1
 8000d06:	2300      	movle	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000d10:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bfcc      	ite	gt
 8000d18:	2301      	movgt	r3, #1
 8000d1a:	2300      	movle	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d20:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000d24:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	bfcc      	ite	gt
 8000d2c:	2301      	movgt	r3, #1
 8000d2e:	2300      	movle	r3, #0
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d34:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000d38:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bfcc      	ite	gt
 8000d40:	2301      	movgt	r3, #1
 8000d42:	2300      	movle	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d48:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000d4c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bfcc      	ite	gt
 8000d54:	2301      	movgt	r3, #1
 8000d56:	2300      	movle	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f107 0008 	add.w	r0, r7, #8
 8000d5e:	9303      	str	r3, [sp, #12]
 8000d60:	9402      	str	r4, [sp, #8]
 8000d62:	9101      	str	r1, [sp, #4]
 8000d64:	9200      	str	r2, [sp, #0]
 8000d66:	4633      	mov	r3, r6
 8000d68:	462a      	mov	r2, r5
 8000d6a:	4956      	ldr	r1, [pc, #344]	@ (8000ec4 <printRadioSettings+0x330>)
 8000d6c:	f004 f802 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa2b 	bl	80001d0 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f107 0108 	add.w	r1, r7, #8
 8000d82:	230a      	movs	r3, #10
 8000d84:	484a      	ldr	r0, [pc, #296]	@ (8000eb0 <printRadioSettings+0x31c>)
 8000d86:	f003 fc19 	bl	80045bc <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f7ff fada 	bl	8000344 <NRF24_read_register>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val +=2;
 8000d9a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000d9e:	3302      	adds	r3, #2
 8000da0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000da4:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	4946      	ldr	r1, [pc, #280]	@ (8000ec8 <printRadioSettings+0x334>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 ffe0 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fa09 	bl	80001d0 <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f107 0108 	add.w	r1, r7, #8
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	4839      	ldr	r0, [pc, #228]	@ (8000eb0 <printRadioSettings+0x31c>)
 8000dca:	f003 fbf7 	bl	80045bc <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000dce:	2005      	movs	r0, #5
 8000dd0:	f7ff fab8 	bl	8000344 <NRF24_read_register>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000dda:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000dde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4939      	ldr	r1, [pc, #228]	@ (8000ecc <printRadioSettings+0x338>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 ffc3 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff f9ec 	bl	80001d0 <strlen>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	f107 0108 	add.w	r1, r7, #8
 8000e00:	230a      	movs	r3, #10
 8000e02:	482b      	ldr	r0, [pc, #172]	@ (8000eb0 <printRadioSettings+0x31c>)
 8000e04:	f003 fbda 	bl	80045bc <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e08:	2006      	movs	r0, #6
 8000e0a:	f7ff fa9b 	bl	8000344 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e14:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <printRadioSettings+0x29a>
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	492a      	ldr	r1, [pc, #168]	@ (8000ed0 <printRadioSettings+0x33c>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 ffa4 	bl	8004d74 <siprintf>
 8000e2c:	e005      	b.n	8000e3a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	4928      	ldr	r1, [pc, #160]	@ (8000ed4 <printRadioSettings+0x340>)
 8000e34:	4618      	mov	r0, r3
 8000e36:	f003 ff9d 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff f9c6 	bl	80001d0 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f107 0108 	add.w	r1, r7, #8
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <printRadioSettings+0x31c>)
 8000e50:	f003 fbb4 	bl	80045bc <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000e54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e58:	f003 0306 	and.w	r3, r3, #6
 8000e5c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val = (reg8Val>>1);
 8000e60:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e64:	085b      	lsrs	r3, r3, #1
 8000e66:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000e6a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d106      	bne.n	8000e80 <printRadioSettings+0x2ec>
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4918      	ldr	r1, [pc, #96]	@ (8000ed8 <printRadioSettings+0x344>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 ff7b 	bl	8004d74 <siprintf>
 8000e7e:	e03b      	b.n	8000ef8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000e80:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d106      	bne.n	8000e96 <printRadioSettings+0x302>
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4913      	ldr	r1, [pc, #76]	@ (8000edc <printRadioSettings+0x348>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 ff70 	bl	8004d74 <siprintf>
 8000e94:	e030      	b.n	8000ef8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000e96:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d122      	bne.n	8000ee4 <printRadioSettings+0x350>
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	490f      	ldr	r1, [pc, #60]	@ (8000ee0 <printRadioSettings+0x34c>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 ff65 	bl	8004d74 <siprintf>
 8000eaa:	e025      	b.n	8000ef8 <printRadioSettings+0x364>
 8000eac:	080056cc 	.word	0x080056cc
 8000eb0:	20000130 	.word	0x20000130
 8000eb4:	08005700 	.word	0x08005700
 8000eb8:	0800571c 	.word	0x0800571c
 8000ebc:	08005738 	.word	0x08005738
 8000ec0:	0800574c 	.word	0x0800574c
 8000ec4:	08005790 	.word	0x08005790
 8000ec8:	080057dc 	.word	0x080057dc
 8000ecc:	080057f8 	.word	0x080057f8
 8000ed0:	0800580c 	.word	0x0800580c
 8000ed4:	08005824 	.word	0x08005824
 8000ed8:	0800583c 	.word	0x0800583c
 8000edc:	08005850 	.word	0x08005850
 8000ee0:	08005864 	.word	0x08005864
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000ee4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d105      	bne.n	8000ef8 <printRadioSettings+0x364>
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	49d7      	ldr	r1, [pc, #860]	@ (8001250 <printRadioSettings+0x6bc>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 ff3e 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f967 	bl	80001d0 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f107 0108 	add.w	r1, r7, #8
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	48d1      	ldr	r0, [pc, #836]	@ (8001254 <printRadioSettings+0x6c0>)
 8000f0e:	f003 fb55 	bl	80045bc <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000f12:	463b      	mov	r3, r7
 8000f14:	2205      	movs	r2, #5
 8000f16:	4619      	mov	r1, r3
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f7ff fa3b 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000f1e:	793b      	ldrb	r3, [r7, #4]
 8000f20:	461c      	mov	r4, r3
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	461d      	mov	r5, r3
 8000f26:	78bb      	ldrb	r3, [r7, #2]
 8000f28:	787a      	ldrb	r2, [r7, #1]
 8000f2a:	7839      	ldrb	r1, [r7, #0]
 8000f2c:	f107 0008 	add.w	r0, r7, #8
 8000f30:	9102      	str	r1, [sp, #8]
 8000f32:	9201      	str	r2, [sp, #4]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	462b      	mov	r3, r5
 8000f38:	4622      	mov	r2, r4
 8000f3a:	49c7      	ldr	r1, [pc, #796]	@ (8001258 <printRadioSettings+0x6c4>)
 8000f3c:	f003 ff1a 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f943 	bl	80001d0 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f107 0108 	add.w	r1, r7, #8
 8000f52:	230a      	movs	r3, #10
 8000f54:	48bf      	ldr	r0, [pc, #764]	@ (8001254 <printRadioSettings+0x6c0>)
 8000f56:	f003 fb31 	bl	80045bc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	4619      	mov	r1, r3
 8000f60:	200b      	movs	r0, #11
 8000f62:	f7ff fa17 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000f66:	793b      	ldrb	r3, [r7, #4]
 8000f68:	461c      	mov	r4, r3
 8000f6a:	78fb      	ldrb	r3, [r7, #3]
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	78bb      	ldrb	r3, [r7, #2]
 8000f70:	787a      	ldrb	r2, [r7, #1]
 8000f72:	7839      	ldrb	r1, [r7, #0]
 8000f74:	f107 0008 	add.w	r0, r7, #8
 8000f78:	9102      	str	r1, [sp, #8]
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	462b      	mov	r3, r5
 8000f80:	4622      	mov	r2, r4
 8000f82:	49b6      	ldr	r1, [pc, #728]	@ (800125c <printRadioSettings+0x6c8>)
 8000f84:	f003 fef6 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f91f 	bl	80001d0 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	f107 0108 	add.w	r1, r7, #8
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	48ad      	ldr	r0, [pc, #692]	@ (8001254 <printRadioSettings+0x6c0>)
 8000f9e:	f003 fb0d 	bl	80045bc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff f9f3 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000fae:	783b      	ldrb	r3, [r7, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	49aa      	ldr	r1, [pc, #680]	@ (8001260 <printRadioSettings+0x6cc>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fedb 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff f904 	bl	80001d0 <strlen>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	f107 0108 	add.w	r1, r7, #8
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	48a0      	ldr	r0, [pc, #640]	@ (8001254 <printRadioSettings+0x6c0>)
 8000fd4:	f003 faf2 	bl	80045bc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	200d      	movs	r0, #13
 8000fe0:	f7ff f9d8 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000fe4:	783b      	ldrb	r3, [r7, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	499d      	ldr	r1, [pc, #628]	@ (8001264 <printRadioSettings+0x6d0>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fec0 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8e9 	bl	80001d0 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	f107 0108 	add.w	r1, r7, #8
 8001006:	230a      	movs	r3, #10
 8001008:	4892      	ldr	r0, [pc, #584]	@ (8001254 <printRadioSettings+0x6c0>)
 800100a:	f003 fad7 	bl	80045bc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800100e:	463b      	mov	r3, r7
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	200e      	movs	r0, #14
 8001016:	f7ff f9bd 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	4991      	ldr	r1, [pc, #580]	@ (8001268 <printRadioSettings+0x6d4>)
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fea5 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f8ce 	bl	80001d0 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	f107 0108 	add.w	r1, r7, #8
 800103c:	230a      	movs	r3, #10
 800103e:	4885      	ldr	r0, [pc, #532]	@ (8001254 <printRadioSettings+0x6c0>)
 8001040:	f003 fabc 	bl	80045bc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001044:	463b      	mov	r3, r7
 8001046:	2201      	movs	r2, #1
 8001048:	4619      	mov	r1, r3
 800104a:	200f      	movs	r0, #15
 800104c:	f7ff f9a2 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001050:	783b      	ldrb	r3, [r7, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4984      	ldr	r1, [pc, #528]	@ (800126c <printRadioSettings+0x6d8>)
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fe8a 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8b3 	bl	80001d0 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	f107 0108 	add.w	r1, r7, #8
 8001072:	230a      	movs	r3, #10
 8001074:	4877      	ldr	r0, [pc, #476]	@ (8001254 <printRadioSettings+0x6c0>)
 8001076:	f003 faa1 	bl	80045bc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800107a:	463b      	mov	r3, r7
 800107c:	2205      	movs	r2, #5
 800107e:	4619      	mov	r1, r3
 8001080:	2010      	movs	r0, #16
 8001082:	f7ff f987 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	461c      	mov	r4, r3
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	461d      	mov	r5, r3
 800108e:	78bb      	ldrb	r3, [r7, #2]
 8001090:	787a      	ldrb	r2, [r7, #1]
 8001092:	7839      	ldrb	r1, [r7, #0]
 8001094:	f107 0008 	add.w	r0, r7, #8
 8001098:	9102      	str	r1, [sp, #8]
 800109a:	9201      	str	r2, [sp, #4]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	462b      	mov	r3, r5
 80010a0:	4622      	mov	r2, r4
 80010a2:	4973      	ldr	r1, [pc, #460]	@ (8001270 <printRadioSettings+0x6dc>)
 80010a4:	f003 fe66 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f88f 	bl	80001d0 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f107 0108 	add.w	r1, r7, #8
 80010ba:	230a      	movs	r3, #10
 80010bc:	4865      	ldr	r0, [pc, #404]	@ (8001254 <printRadioSettings+0x6c0>)
 80010be:	f003 fa7d 	bl	80045bc <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80010c2:	2011      	movs	r0, #17
 80010c4:	f7ff f93e 	bl	8000344 <NRF24_read_register>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80010ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80010d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4966      	ldr	r1, [pc, #408]	@ (8001274 <printRadioSettings+0x6e0>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fe49 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f872 	bl	80001d0 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	f107 0108 	add.w	r1, r7, #8
 80010f4:	230a      	movs	r3, #10
 80010f6:	4857      	ldr	r0, [pc, #348]	@ (8001254 <printRadioSettings+0x6c0>)
 80010f8:	f003 fa60 	bl	80045bc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80010fc:	2012      	movs	r0, #18
 80010fe:	f7ff f921 	bl	8000344 <NRF24_read_register>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001108:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800110c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4958      	ldr	r1, [pc, #352]	@ (8001278 <printRadioSettings+0x6e4>)
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fe2c 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f855 	bl	80001d0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f107 0108 	add.w	r1, r7, #8
 800112e:	230a      	movs	r3, #10
 8001130:	4848      	ldr	r0, [pc, #288]	@ (8001254 <printRadioSettings+0x6c0>)
 8001132:	f003 fa43 	bl	80045bc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001136:	2013      	movs	r0, #19
 8001138:	f7ff f904 	bl	8000344 <NRF24_read_register>
 800113c:	4603      	mov	r3, r0
 800113e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001142:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001146:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	494b      	ldr	r1, [pc, #300]	@ (800127c <printRadioSettings+0x6e8>)
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fe0f 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f838 	bl	80001d0 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	f107 0108 	add.w	r1, r7, #8
 8001168:	230a      	movs	r3, #10
 800116a:	483a      	ldr	r0, [pc, #232]	@ (8001254 <printRadioSettings+0x6c0>)
 800116c:	f003 fa26 	bl	80045bc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001170:	2014      	movs	r0, #20
 8001172:	f7ff f8e7 	bl	8000344 <NRF24_read_register>
 8001176:	4603      	mov	r3, r0
 8001178:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800117c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001180:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	493d      	ldr	r1, [pc, #244]	@ (8001280 <printRadioSettings+0x6ec>)
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fdf2 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f81b 	bl	80001d0 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	b29a      	uxth	r2, r3
 800119e:	f107 0108 	add.w	r1, r7, #8
 80011a2:	230a      	movs	r3, #10
 80011a4:	482b      	ldr	r0, [pc, #172]	@ (8001254 <printRadioSettings+0x6c0>)
 80011a6:	f003 fa09 	bl	80045bc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80011aa:	2015      	movs	r0, #21
 80011ac:	f7ff f8ca 	bl	8000344 <NRF24_read_register>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80011ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4930      	ldr	r1, [pc, #192]	@ (8001284 <printRadioSettings+0x6f0>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fdd5 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7fe fffe 	bl	80001d0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	f107 0108 	add.w	r1, r7, #8
 80011dc:	230a      	movs	r3, #10
 80011de:	481d      	ldr	r0, [pc, #116]	@ (8001254 <printRadioSettings+0x6c0>)
 80011e0:	f003 f9ec 	bl	80045bc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80011e4:	2016      	movs	r0, #22
 80011e6:	f7ff f8ad 	bl	8000344 <NRF24_read_register>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011f0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80011f4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4922      	ldr	r1, [pc, #136]	@ (8001288 <printRadioSettings+0x6f4>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fdb8 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4618      	mov	r0, r3
 800120a:	f7fe ffe1 	bl	80001d0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	f107 0108 	add.w	r1, r7, #8
 8001216:	230a      	movs	r3, #10
 8001218:	480e      	ldr	r0, [pc, #56]	@ (8001254 <printRadioSettings+0x6c0>)
 800121a:	f003 f9cf 	bl	80045bc <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800121e:	201c      	movs	r0, #28
 8001220:	f7ff f890 	bl	8000344 <NRF24_read_register>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800122a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800122e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001232:	2b00      	cmp	r3, #0
 8001234:	bfcc      	ite	gt
 8001236:	2301      	movgt	r3, #1
 8001238:	2300      	movle	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800123e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001242:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfcc      	ite	gt
 800124a:	2301      	movgt	r3, #1
 800124c:	2300      	movle	r3, #0
 800124e:	e01d      	b.n	800128c <printRadioSettings+0x6f8>
 8001250:	08005878 	.word	0x08005878
 8001254:	20000130 	.word	0x20000130
 8001258:	0800588c 	.word	0x0800588c
 800125c:	080058bc 	.word	0x080058bc
 8001260:	080058ec 	.word	0x080058ec
 8001264:	08005914 	.word	0x08005914
 8001268:	0800593c 	.word	0x0800593c
 800126c:	08005964 	.word	0x08005964
 8001270:	0800598c 	.word	0x0800598c
 8001274:	080059b8 	.word	0x080059b8
 8001278:	080059d4 	.word	0x080059d4
 800127c:	080059f0 	.word	0x080059f0
 8001280:	08005a0c 	.word	0x08005a0c
 8001284:	08005a28 	.word	0x08005a28
 8001288:	08005a44 	.word	0x08005a44
 800128c:	b2db      	uxtb	r3, r3
 800128e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001290:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001294:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001298:	2b00      	cmp	r3, #0
 800129a:	bfcc      	ite	gt
 800129c:	2301      	movgt	r3, #1
 800129e:	2300      	movle	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012a4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80012a8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bfcc      	ite	gt
 80012b0:	2301      	movgt	r3, #1
 80012b2:	2300      	movle	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80012bc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bfcc      	ite	gt
 80012c4:	2301      	movgt	r3, #1
 80012c6:	2300      	movle	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012cc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80012d0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bfcc      	ite	gt
 80012d8:	2301      	movgt	r3, #1
 80012da:	2300      	movle	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f107 0008 	add.w	r0, r7, #8
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	9402      	str	r4, [sp, #8]
 80012e6:	9101      	str	r1, [sp, #4]
 80012e8:	9200      	str	r2, [sp, #0]
 80012ea:	4633      	mov	r3, r6
 80012ec:	462a      	mov	r2, r5
 80012ee:	4936      	ldr	r1, [pc, #216]	@ (80013c8 <printRadioSettings+0x834>)
 80012f0:	f003 fd40 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe ff69 	bl	80001d0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4830      	ldr	r0, [pc, #192]	@ (80013cc <printRadioSettings+0x838>)
 800130a:	f003 f957 	bl	80045bc <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800130e:	201d      	movs	r0, #29
 8001310:	f7ff f818 	bl	8000344 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <printRadioSettings+0x7a0>
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4929      	ldr	r1, [pc, #164]	@ (80013d0 <printRadioSettings+0x83c>)
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fd21 	bl	8004d74 <siprintf>
 8001332:	e005      	b.n	8001340 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4926      	ldr	r1, [pc, #152]	@ (80013d4 <printRadioSettings+0x840>)
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fd1a 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4618      	mov	r0, r3
 8001346:	f7fe ff43 	bl	80001d0 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	f107 0108 	add.w	r1, r7, #8
 8001352:	230a      	movs	r3, #10
 8001354:	481d      	ldr	r0, [pc, #116]	@ (80013cc <printRadioSettings+0x838>)
 8001356:	f003 f931 	bl	80045bc <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800135a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <printRadioSettings+0x7e0>
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	491b      	ldr	r1, [pc, #108]	@ (80013d8 <printRadioSettings+0x844>)
 800136c:	4618      	mov	r0, r3
 800136e:	f003 fd01 	bl	8004d74 <siprintf>
 8001372:	e005      	b.n	8001380 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4918      	ldr	r1, [pc, #96]	@ (80013dc <printRadioSettings+0x848>)
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fcfa 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4618      	mov	r0, r3
 8001386:	f7fe ff23 	bl	80001d0 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	b29a      	uxth	r2, r3
 800138e:	f107 0108 	add.w	r1, r7, #8
 8001392:	230a      	movs	r3, #10
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <printRadioSettings+0x838>)
 8001396:	f003 f911 	bl	80045bc <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4910      	ldr	r1, [pc, #64]	@ (80013e0 <printRadioSettings+0x84c>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fce7 	bl	8004d74 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff10 	bl	80001d0 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f107 0108 	add.w	r1, r7, #8
 80013b8:	230a      	movs	r3, #10
 80013ba:	4804      	ldr	r0, [pc, #16]	@ (80013cc <printRadioSettings+0x838>)
 80013bc:	f003 f8fe 	bl	80045bc <HAL_UART_Transmit>
}
 80013c0:	bf00      	nop
 80013c2:	3774      	adds	r7, #116	@ 0x74
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c8:	08005a60 	.word	0x08005a60
 80013cc:	20000130 	.word	0x20000130
 80013d0:	08005aac 	.word	0x08005aac
 80013d4:	08005ac4 	.word	0x08005ac4
 80013d8:	08005adc 	.word	0x08005adc
 80013dc:	08005af8 	.word	0x08005af8
 80013e0:	080056cc 	.word	0x080056cc

080013e4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80013e4:	b084      	sub	sp, #16
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	f107 0c08 	add.w	ip, r7, #8
 80013ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <nrf24_DebugUART_Init+0x2c>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2288      	movs	r2, #136	@ 0x88
 80013fc:	4619      	mov	r1, r3
 80013fe:	f003 fd0f 	bl	8004e20 <memcpy>
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800140a:	b004      	add	sp, #16
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000130 	.word	0x20000130

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b09f      	sub	sp, #124	@ 0x7c
 8001418:	af1e      	add	r7, sp, #120	@ 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141a:	f000 faaf 	bl	800197c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141e:	f000 f857 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001422:	f000 f909 	bl	8001638 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001426:	f000 f899 	bl	800155c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800142a:	f000 f8d5 	bl	80015d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOA,GPIO_PIN_3,GPIO_PIN_4,hspi1);
 800142e:	4c23      	ldr	r4, [pc, #140]	@ (80014bc <main+0xa8>)
 8001430:	4668      	mov	r0, sp
 8001432:	1d23      	adds	r3, r4, #4
 8001434:	2260      	movs	r2, #96	@ 0x60
 8001436:	4619      	mov	r1, r3
 8001438:	f003 fcf2 	bl	8004e20 <memcpy>
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	2210      	movs	r2, #16
 8001440:	2108      	movs	r1, #8
 8001442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001446:	f7ff f857 	bl	80004f8 <NRF24_begin>
    // Set UART
    nrf24_DebugUART_Init(huart2);
 800144a:	4c1d      	ldr	r4, [pc, #116]	@ (80014c0 <main+0xac>)
 800144c:	4668      	mov	r0, sp
 800144e:	f104 0310 	add.w	r3, r4, #16
 8001452:	2278      	movs	r2, #120	@ 0x78
 8001454:	4619      	mov	r1, r3
 8001456:	f003 fce3 	bl	8004e20 <memcpy>
 800145a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800145e:	f7ff ffc1 	bl	80013e4 <nrf24_DebugUART_Init>
    // Set the Print Radio Settings
    printRadioSettings();
 8001462:	f7ff fb97 	bl	8000b94 <printRadioSettings>
    //Transmit - NO Acknowledgment //
    NRF24_setPALevel(RF_PWR_HIGH);
 8001466:	2002      	movs	r0, #2
 8001468:	f7ff fa29 	bl	80008be <NRF24_setPALevel>
    NRF24_setAutoAck(false);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff fa11 	bl	8000894 <NRF24_setAutoAck>
    NRF24_setChannel(52);
 8001472:	2034      	movs	r0, #52	@ 0x34
 8001474:	f7ff f9c0 	bl	80007f8 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001478:	2020      	movs	r0, #32
 800147a:	f7ff f9d3 	bl	8000824 <NRF24_setPayloadSize>
    NRF24_setDataRate(RF24_2MBPS);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff fa56 	bl	8000930 <NRF24_setDataRate>
    NRF24_openWritingPipe(TxpipeAddres);
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <main+0xb0>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff f973 	bl	8000778 <NRF24_openWritingPipe>
    NRF24_stopListening();
 8001492:	f7ff f911 	bl	80006b8 <NRF24_stopListening>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(NRF24_write(myTxData,32))
 8001496:	2120      	movs	r1, #32
 8001498:	480b      	ldr	r0, [pc, #44]	@ (80014c8 <main+0xb4>)
 800149a:	f7ff f919 	bl	80006d0 <NRF24_write>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <main+0x9c>
	  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Transmitted successfully\r\n", strlen("Transmitted successfully\r\n"), 10);
 80014a4:	230a      	movs	r3, #10
 80014a6:	221a      	movs	r2, #26
 80014a8:	4908      	ldr	r1, [pc, #32]	@ (80014cc <main+0xb8>)
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <main+0xac>)
 80014ac:	f003 f886 	bl	80045bc <HAL_UART_Transmit>
	  }

	  HAL_Delay(1000);
 80014b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b4:	f000 fac8 	bl	8001a48 <HAL_Delay>
	  if(NRF24_write(myTxData,32))
 80014b8:	e7ed      	b.n	8001496 <main+0x82>
 80014ba:	bf00      	nop
 80014bc:	200001b8 	.word	0x200001b8
 80014c0:	2000021c 	.word	0x2000021c
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	08005c10 	.word	0x08005c10

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b090      	sub	sp, #64	@ 0x40
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2228      	movs	r2, #40	@ 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fc6a 	bl	8004db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800150c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800150e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fd93 	bl	8002044 <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001524:	f000 f8c6 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	230f      	movs	r3, #15
 800152a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	2302      	movs	r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f001 fd8c 	bl	8003060 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800154e:	f000 f8b1 	bl	80016b4 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3740      	adds	r7, #64	@ 0x40
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <MX_SPI1_Init+0x74>)
 8001562:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <MX_SPI1_Init+0x78>)
 8001564:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001566:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <MX_SPI1_Init+0x74>)
 8001568:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800156c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <MX_SPI1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <MX_SPI1_Init+0x74>)
 8001576:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800157a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_SPI1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <MX_SPI1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_SPI1_Init+0x74>)
 800158a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800158e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_SPI1_Init+0x74>)
 8001592:	2218      	movs	r2, #24
 8001594:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_SPI1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_SPI1_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_SPI1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_SPI1_Init+0x74>)
 80015aa:	2207      	movs	r2, #7
 80015ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_SPI1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_SPI1_Init+0x74>)
 80015b6:	2208      	movs	r2, #8
 80015b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_SPI1_Init+0x74>)
 80015bc:	f001 ff62 	bl	8003484 <HAL_SPI_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015c6:	f000 f875 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001b8 	.word	0x200001b8
 80015d4:	40013000 	.word	0x40013000

080015d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015de:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <MX_USART2_UART_Init+0x5c>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015e4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 800161c:	f002 ff80 	bl	8004520 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001626:	f000 f845 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000021c 	.word	0x2000021c
 8001634:	40004400 	.word	0x40004400

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <MX_GPIO_Init+0x78>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a17      	ldr	r2, [pc, #92]	@ (80016b0 <MX_GPIO_Init+0x78>)
 8001654:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001658:	6153      	str	r3, [r2, #20]
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <MX_GPIO_Init+0x78>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_GPIO_Init+0x78>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <MX_GPIO_Init+0x78>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_GPIO_Init+0x78>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2118      	movs	r1, #24
 8001682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001686:	f000 fcc5 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 800168a:	2318      	movs	r3, #24
 800168c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f000 fb44 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <Error_Handler+0x8>

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_MspInit+0x44>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_MspInit+0x44>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6193      	str	r3, [r2, #24]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_MspInit+0x44>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_MspInit+0x44>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x44>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x44>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <HAL_SPI_MspInit+0x8c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d130      	bne.n	800178c <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <HAL_SPI_MspInit+0x90>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a1a      	ldr	r2, [pc, #104]	@ (8001798 <HAL_SPI_MspInit+0x90>)
 8001730:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <HAL_SPI_MspInit+0x90>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_SPI_MspInit+0x90>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <HAL_SPI_MspInit+0x90>)
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	6153      	str	r3, [r2, #20]
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_SPI_MspInit+0x90>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800175a:	23e0      	movs	r3, #224	@ 0xe0
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176a:	2305      	movs	r3, #5
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001778:	f000 fada 	bl	8001d30 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2023      	movs	r0, #35	@ 0x23
 8001782:	f000 fa60 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001786:	2023      	movs	r0, #35	@ 0x23
 8001788:	f000 fa79 	bl	8001c7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	@ 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40013000 	.word	0x40013000
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a18      	ldr	r2, [pc, #96]	@ (800181c <HAL_UART_MspInit+0x80>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d129      	bne.n	8001812 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80017ee:	f248 0304 	movw	r3, #32772	@ 0x8004
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001800:	2307      	movs	r3, #7
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180e:	f000 fa8f 	bl	8001d30 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40004400 	.word	0x40004400
 8001820:	40021000 	.word	0x40021000

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <NMI_Handler+0x4>

0800182c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <MemManage_Handler+0x4>

0800183c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <UsageFault_Handler+0x4>

0800184c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187a:	f000 f8c5 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <SPI1_IRQHandler+0x10>)
 800188a:	f002 fb6d 	bl	8003f68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200001b8 	.word	0x200001b8

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f003 fa7e 	bl	8004dc8 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20003000 	.word	0x20003000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	200002a4 	.word	0x200002a4
 8001900:	200003f8 	.word	0x200003f8

08001904 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001960 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800192c:	f7ff ffea 	bl	8001904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001930:	480c      	ldr	r0, [pc, #48]	@ (8001964 <LoopForever+0x6>)
  ldr r1, =_edata
 8001932:	490d      	ldr	r1, [pc, #52]	@ (8001968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <LoopForever+0xe>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001948:	4c0a      	ldr	r4, [pc, #40]	@ (8001974 <LoopForever+0x16>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001956:	f003 fa3d 	bl	8004dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800195a:	f7ff fd5b 	bl	8001414 <main>

0800195e <LoopForever>:

LoopForever:
    b LoopForever
 800195e:	e7fe      	b.n	800195e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001960:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800196c:	08005ca8 	.word	0x08005ca8
  ldr r2, =_sbss
 8001970:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001974:	200003f4 	.word	0x200003f4

08001978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_2_IRQHandler>
	...

0800197c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_Init+0x28>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	@ (80019a4 <HAL_Init+0x28>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 f94f 	bl	8001c30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001992:	200f      	movs	r0, #15
 8001994:	f000 f808 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff fe92 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000

080019a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f967 	bl	8001c9a <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 f92f 	bl	8001c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000044 	.word	0x20000044
 8001a00:	2000004c 	.word	0x2000004c
 8001a04:	20000048 	.word	0x20000048

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	2000004c 	.word	0x2000004c
 8001a2c:	200002a8 	.word	0x200002a8

08001a30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	200002a8 	.word	0x200002a8

08001a48 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000004c 	.word	0x2000004c

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	@ (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	@ (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	@ (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	@ 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	@ 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bfc:	d301      	bcc.n	8001c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00f      	b.n	8001c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c02:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <SysTick_Config+0x40>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f7ff ff8e 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <SysTick_Config+0x40>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1a:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <SysTick_Config+0x40>)
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	e000e010 	.word	0xe000e010

08001c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff29 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c58:	f7ff ff3e 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	f7ff ff8e 	bl	8001b84 <NVIC_EncodePriority>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff5d 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff31 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffa2 	bl	8001bec <SysTick_Config>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d005      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e027      	b.n	8001d24 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 020e 	bic.w	r2, r2, #14
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
    }
  }
  return status;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e14e      	b.n	8001fde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8140 	beq.w	8001fd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d005      	beq.n	8001d70 <HAL_GPIO_Init+0x40>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d130      	bne.n	8001dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da6:	2201      	movs	r2, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 0201 	and.w	r2, r3, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d017      	beq.n	8001e0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d123      	bne.n	8001e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	6939      	ldr	r1, [r7, #16]
 8001e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0203 	and.w	r2, r3, #3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 809a 	beq.w	8001fd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea4:	4b55      	ldr	r3, [pc, #340]	@ (8001ffc <HAL_GPIO_Init+0x2cc>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a54      	ldr	r2, [pc, #336]	@ (8001ffc <HAL_GPIO_Init+0x2cc>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b52      	ldr	r3, [pc, #328]	@ (8001ffc <HAL_GPIO_Init+0x2cc>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ebc:	4a50      	ldr	r2, [pc, #320]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ee6:	d013      	beq.n	8001f10 <HAL_GPIO_Init+0x1e0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a46      	ldr	r2, [pc, #280]	@ (8002004 <HAL_GPIO_Init+0x2d4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1dc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a45      	ldr	r2, [pc, #276]	@ (8002008 <HAL_GPIO_Init+0x2d8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1d8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a44      	ldr	r2, [pc, #272]	@ (800200c <HAL_GPIO_Init+0x2dc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1d4>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e006      	b.n	8001f12 <HAL_GPIO_Init+0x1e2>
 8001f04:	2305      	movs	r3, #5
 8001f06:	e004      	b.n	8001f12 <HAL_GPIO_Init+0x1e2>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x1e2>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_Init+0x1e2>
 8001f10:	2300      	movs	r3, #0
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f22:	4937      	ldr	r1, [pc, #220]	@ (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f30:	4b37      	ldr	r3, [pc, #220]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f54:	4a2e      	ldr	r2, [pc, #184]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f7e:	4a24      	ldr	r2, [pc, #144]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f84:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fa8:	4a19      	ldr	r2, [pc, #100]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fae:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f aea9 	bne.w	8001d40 <HAL_GPIO_Init+0x10>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	48000400 	.word	0x48000400
 8002008:	48000800 	.word	0x48000800
 800200c:	48000c00 	.word	0x48000c00
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002024:	787b      	ldrb	r3, [r7, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002030:	e002      	b.n	8002038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800204a:	af00      	add	r7, sp, #0
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002054:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	f000 bff4 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 816d 	beq.w	800235a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002080:	4bb4      	ldr	r3, [pc, #720]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b04      	cmp	r3, #4
 800208a:	d00c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800208c:	4bb1      	ldr	r3, [pc, #708]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	d157      	bne.n	8002148 <HAL_RCC_OscConfig+0x104>
 8002098:	4bae      	ldr	r3, [pc, #696]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a4:	d150      	bne.n	8002148 <HAL_RCC_OscConfig+0x104>
 80020a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80020c6:	d802      	bhi.n	80020ce <HAL_RCC_OscConfig+0x8a>
 80020c8:	4ba2      	ldr	r3, [pc, #648]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0xb6>
 80020ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80020e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020e6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80020ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80020f6:	4b97      	ldr	r3, [pc, #604]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020fe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002102:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002106:	fa92 f2a2 	rbit	r2, r2
 800210a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800210e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002112:	fab2 f282 	clz	r2, r2
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f042 0220 	orr.w	r2, r2, #32
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f002 021f 	and.w	r2, r2, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8114 	beq.w	8002358 <HAL_RCC_OscConfig+0x314>
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f040 810b 	bne.w	8002358 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	f000 bf85 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x124>
 800215a:	4b7e      	ldr	r3, [pc, #504]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7d      	ldr	r2, [pc, #500]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e036      	b.n	80021d6 <HAL_RCC_OscConfig+0x192>
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x14e>
 8002178:	4b76      	ldr	r3, [pc, #472]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a75      	ldr	r2, [pc, #468]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b73      	ldr	r3, [pc, #460]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a72      	ldr	r2, [pc, #456]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e021      	b.n	80021d6 <HAL_RCC_OscConfig+0x192>
 8002192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x17a>
 80021a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b68      	ldr	r3, [pc, #416]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a67      	ldr	r2, [pc, #412]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e00b      	b.n	80021d6 <HAL_RCC_OscConfig+0x192>
 80021be:	4b65      	ldr	r3, [pc, #404]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a64      	ldr	r2, [pc, #400]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b62      	ldr	r3, [pc, #392]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a61      	ldr	r2, [pc, #388]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021da:	f023 020f 	bic.w	r2, r3, #15
 80021de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	495a      	ldr	r1, [pc, #360]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d054      	beq.n	80022aa <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fc16 	bl	8001a30 <HAL_GetTick>
 8002204:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800220a:	f7ff fc11 	bl	8001a30 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d902      	bls.n	8002220 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	f000 bf19 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>
 8002220:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002224:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002234:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002240:	d802      	bhi.n	8002248 <HAL_RCC_OscConfig+0x204>
 8002242:	4b44      	ldr	r3, [pc, #272]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e015      	b.n	8002274 <HAL_RCC_OscConfig+0x230>
 8002248:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800224c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800225c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002260:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002264:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002270:	4b38      	ldr	r3, [pc, #224]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002278:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800227c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002280:	fa92 f2a2 	rbit	r2, r2
 8002284:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002288:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	f042 0220 	orr.w	r2, r2, #32
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f002 021f 	and.w	r2, r2, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f202 	lsl.w	r2, r1, r2
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0b0      	beq.n	800220a <HAL_RCC_OscConfig+0x1c6>
 80022a8:	e057      	b.n	800235a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff fbc1 	bl	8001a30 <HAL_GetTick>
 80022ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff fbbc 	bl	8001a30 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	@ 0x64
 80022c2:	d902      	bls.n	80022ca <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	f000 bec4 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>
 80022ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80022de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80022ea:	d802      	bhi.n	80022f2 <HAL_RCC_OscConfig+0x2ae>
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x2da>
 80022f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002306:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800230a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800230e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_RCC_OscConfig+0x310>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002322:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002326:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800232a:	fa92 f2a2 	rbit	r2, r2
 800232e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002332:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0220 	orr.w	r2, r2, #32
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1b0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x270>
 8002352:	e002      	b.n	800235a <HAL_RCC_OscConfig+0x316>
 8002354:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 816c 	beq.w	8002648 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002370:	4bcc      	ldr	r3, [pc, #816]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800237c:	4bc9      	ldr	r3, [pc, #804]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d16d      	bne.n	8002464 <HAL_RCC_OscConfig+0x420>
 8002388:	4bc6      	ldr	r3, [pc, #792]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d167      	bne.n	8002464 <HAL_RCC_OscConfig+0x420>
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80023a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80023b2:	d802      	bhi.n	80023ba <HAL_RCC_OscConfig+0x376>
 80023b4:	4bbb      	ldr	r3, [pc, #748]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	e013      	b.n	80023e2 <HAL_RCC_OscConfig+0x39e>
 80023ba:	2302      	movs	r3, #2
 80023bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80023cc:	2302      	movs	r3, #2
 80023ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80023d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80023de:	4bb1      	ldr	r3, [pc, #708]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	2202      	movs	r2, #2
 80023e4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80023e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80023ec:	fa92 f2a2 	rbit	r2, r2
 80023f0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80023f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80023f8:	fab2 f282 	clz	r2, r2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f042 0220 	orr.w	r2, r2, #32
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f002 021f 	and.w	r2, r2, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCC_OscConfig+0x3e6>
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d002      	beq.n	800242a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f000 be14 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b9e      	ldr	r3, [pc, #632]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	21f8      	movs	r1, #248	@ 0xf8
 8002440:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002448:	fa91 f1a1 	rbit	r1, r1
 800244c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002450:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002454:	fab1 f181 	clz	r1, r1
 8002458:	b2c9      	uxtb	r1, r1
 800245a:	408b      	lsls	r3, r1
 800245c:	4991      	ldr	r1, [pc, #580]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e0f1      	b.n	8002648 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8083 	beq.w	800257c <HAL_RCC_OscConfig+0x538>
 8002476:	2301      	movs	r3, #1
 8002478:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002488:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002496:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	461a      	mov	r2, r3
 800249e:	2301      	movs	r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fac5 	bl	8001a30 <HAL_GetTick>
 80024a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fac0 	bl	8001a30 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d902      	bls.n	80024c2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	f000 bdc8 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80024d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b3f      	cmp	r3, #63	@ 0x3f
 80024e0:	d802      	bhi.n	80024e8 <HAL_RCC_OscConfig+0x4a4>
 80024e2:	4b70      	ldr	r3, [pc, #448]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e013      	b.n	8002510 <HAL_RCC_OscConfig+0x4cc>
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002500:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800250c:	4b65      	ldr	r3, [pc, #404]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	2202      	movs	r2, #2
 8002512:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002516:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002522:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0b4      	beq.n	80024ac <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b58      	ldr	r3, [pc, #352]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	21f8      	movs	r1, #248	@ 0xf8
 8002558:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002560:	fa91 f1a1 	rbit	r1, r1
 8002564:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002568:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800256c:	fab1 f181 	clz	r1, r1
 8002570:	b2c9      	uxtb	r1, r1
 8002572:	408b      	lsls	r3, r1
 8002574:	494b      	ldr	r1, [pc, #300]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
 800257a:	e065      	b.n	8002648 <HAL_RCC_OscConfig+0x604>
 800257c:	2301      	movs	r3, #1
 800257e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800258e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800259c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	461a      	mov	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fa42 	bl	8001a30 <HAL_GetTick>
 80025ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff fa3d 	bl	8001a30 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d902      	bls.n	80025c8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	f000 bd45 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>
 80025c8:	2302      	movs	r3, #2
 80025ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80025da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80025e6:	d802      	bhi.n	80025ee <HAL_RCC_OscConfig+0x5aa>
 80025e8:	4b2e      	ldr	r3, [pc, #184]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	e013      	b.n	8002616 <HAL_RCC_OscConfig+0x5d2>
 80025ee:	2302      	movs	r3, #2
 80025f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002600:	2302      	movs	r3, #2
 8002602:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002606:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002612:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <HAL_RCC_OscConfig+0x660>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	2202      	movs	r2, #2
 8002618:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800261c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002620:	fa92 f2a2 	rbit	r2, r2
 8002624:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002628:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800262c:	fab2 f282 	clz	r2, r2
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f002 021f 	and.w	r2, r2, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f202 	lsl.w	r2, r1, r2
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1b4      	bne.n	80025b2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8115 	beq.w	8002888 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d07e      	beq.n	800276c <HAL_RCC_OscConfig+0x728>
 800266e:	2301      	movs	r3, #1
 8002670:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_RCC_OscConfig+0x664>)
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	461a      	mov	r2, r3
 8002694:	2301      	movs	r3, #1
 8002696:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7ff f9ca 	bl	8001a30 <HAL_GetTick>
 800269c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a0:	e00f      	b.n	80026c2 <HAL_RCC_OscConfig+0x67e>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7ff f9c0 	bl	8001a30 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d902      	bls.n	80026c2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	f000 bcc8 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026dc:	2202      	movs	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800271a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271c:	4bb0      	ldr	r3, [pc, #704]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 800271e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002724:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002728:	2102      	movs	r1, #2
 800272a:	6019      	str	r1, [r3, #0]
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f1a3 	rbit	r1, r3
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002742:	6019      	str	r1, [r3, #0]
  return result;
 8002744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002748:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0a0      	beq.n	80026ac <HAL_RCC_OscConfig+0x668>
 800276a:	e08d      	b.n	8002888 <HAL_RCC_OscConfig+0x844>
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800278e:	601a      	str	r2, [r3, #0]
  return result;
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002798:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b90      	ldr	r3, [pc, #576]	@ (80029e4 <HAL_RCC_OscConfig+0x9a0>)
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	461a      	mov	r2, r3
 80027aa:	2300      	movs	r3, #0
 80027ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7ff f93f 	bl	8001a30 <HAL_GetTick>
 80027b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b8:	f7ff f93a 	bl	8001a30 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d902      	bls.n	80027ce <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	f000 bc42 	b.w	8003052 <HAL_RCC_OscConfig+0x100e>
 80027ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80027d6:	2202      	movs	r2, #2
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002802:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800281e:	2202      	movs	r2, #2
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002826:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa93 f2a3 	rbit	r2, r3
 8002830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002834:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002838:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283a:	4b69      	ldr	r3, [pc, #420]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 800283c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800283e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002842:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002846:	2102      	movs	r1, #2
 8002848:	6019      	str	r1, [r3, #0]
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	fa93 f1a3 	rbit	r1, r3
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002860:	6019      	str	r1, [r3, #0]
  return result;
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d197      	bne.n	80027b8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 819e 	beq.w	8002bda <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a4:	4b4e      	ldr	r3, [pc, #312]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d116      	bne.n	80028de <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b4b      	ldr	r3, [pc, #300]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a4a      	ldr	r2, [pc, #296]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	61d3      	str	r3, [r2, #28]
 80028bc:	4b48      	ldr	r3, [pc, #288]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80028d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b42      	ldr	r3, [pc, #264]	@ (80029e8 <HAL_RCC_OscConfig+0x9a4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d11a      	bne.n	8002920 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b3f      	ldr	r3, [pc, #252]	@ (80029e8 <HAL_RCC_OscConfig+0x9a4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a3e      	ldr	r2, [pc, #248]	@ (80029e8 <HAL_RCC_OscConfig+0x9a4>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7ff f89b 	bl	8001a30 <HAL_GetTick>
 80028fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	e009      	b.n	8002914 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7ff f896 	bl	8001a30 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	@ 0x64
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e39e      	b.n	8003052 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <HAL_RCC_OscConfig+0x9a4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ef      	beq.n	8002900 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x8fa>
 8002930:	4b2b      	ldr	r3, [pc, #172]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a2a      	ldr	r2, [pc, #168]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	e035      	b.n	80029aa <HAL_RCC_OscConfig+0x966>
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x924>
 800294e:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a23      	ldr	r2, [pc, #140]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a20      	ldr	r2, [pc, #128]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	e020      	b.n	80029aa <HAL_RCC_OscConfig+0x966>
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b05      	cmp	r3, #5
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x94e>
 8002978:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4a18      	ldr	r2, [pc, #96]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	6213      	str	r3, [r2, #32]
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4a15      	ldr	r2, [pc, #84]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6213      	str	r3, [r2, #32]
 8002990:	e00b      	b.n	80029aa <HAL_RCC_OscConfig+0x966>
 8002992:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a0f      	ldr	r2, [pc, #60]	@ (80029e0 <HAL_RCC_OscConfig+0x99c>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8087 	beq.w	8002aca <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029bc:	f7ff f838 	bl	8001a30 <HAL_GetTick>
 80029c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e012      	b.n	80029ec <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7ff f833 	bl	8001a30 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d908      	bls.n	80029ec <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e339      	b.n	8003052 <HAL_RCC_OscConfig+0x100e>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	10908120 	.word	0x10908120
 80029e8:	40007000 	.word	0x40007000
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a18:	2202      	movs	r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a32:	601a      	str	r2, [r3, #0]
  return result;
 8002a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a38:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0xa10>
 8002a4e:	4b98      	ldr	r3, [pc, #608]	@ (8002cb0 <HAL_RCC_OscConfig+0xc6c>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	e013      	b.n	8002a7c <HAL_RCC_OscConfig+0xa38>
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	fa93 f2a3 	rbit	r2, r3
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	4b8d      	ldr	r3, [pc, #564]	@ (8002cb0 <HAL_RCC_OscConfig+0xc6c>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a84:	2102      	movs	r1, #2
 8002a86:	6011      	str	r1, [r2, #0]
 8002a88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a8c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	fa92 f1a2 	rbit	r1, r2
 8002a96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a9a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a9e:	6011      	str	r1, [r2, #0]
  return result;
 8002aa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aa4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	fab2 f282 	clz	r2, r2
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	f002 021f 	and.w	r2, r2, #31
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f43f af7f 	beq.w	80029c6 <HAL_RCC_OscConfig+0x982>
 8002ac8:	e07d      	b.n	8002bc6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7fe ffb1 	bl	8001a30 <HAL_GetTick>
 8002ace:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fe ffac 	bl	8001a30 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e2b2      	b.n	8003052 <HAL_RCC_OscConfig+0x100e>
 8002aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002af4:	2202      	movs	r2, #2
 8002af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b14:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b18:	2202      	movs	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b20:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fa93 f2a3 	rbit	r2, r3
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b32:	601a      	str	r2, [r3, #0]
  return result;
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_OscConfig+0xb10>
 8002b4e:	4b58      	ldr	r3, [pc, #352]	@ (8002cb0 <HAL_RCC_OscConfig+0xc6c>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	e013      	b.n	8002b7c <HAL_RCC_OscConfig+0xb38>
 8002b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b58:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb0 <HAL_RCC_OscConfig+0xc6c>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b80:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b84:	2102      	movs	r1, #2
 8002b86:	6011      	str	r1, [r2, #0]
 8002b88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b8c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	fa92 f1a2 	rbit	r1, r2
 8002b96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b9a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b9e:	6011      	str	r1, [r2, #0]
  return result;
 8002ba0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ba4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d186      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4b38      	ldr	r3, [pc, #224]	@ (8002cb0 <HAL_RCC_OscConfig+0xc6c>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a37      	ldr	r2, [pc, #220]	@ (8002cb0 <HAL_RCC_OscConfig+0xc6c>)
 8002bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8232 	beq.w	8003050 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bec:	4b30      	ldr	r3, [pc, #192]	@ (8002cb0 <HAL_RCC_OscConfig+0xc6c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	f000 8201 	beq.w	8002ffc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	f040 8157 	bne.w	8002eba <HAL_RCC_OscConfig+0xe76>
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002c14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	fa93 f2a3 	rbit	r2, r3
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c30:	601a      	str	r2, [r3, #0]
  return result;
 8002c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c36:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c3a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c46:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2300      	movs	r3, #0
 8002c50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fe feed 	bl	8001a30 <HAL_GetTick>
 8002c56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5a:	e009      	b.n	8002c70 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fee8 	bl	8001a30 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1f0      	b.n	8003052 <HAL_RCC_OscConfig+0x100e>
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c94:	601a      	str	r2, [r3, #0]
  return result;
 8002c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ca8:	d804      	bhi.n	8002cb4 <HAL_RCC_OscConfig+0xc70>
 8002caa:	4b01      	ldr	r3, [pc, #4]	@ (8002cb0 <HAL_RCC_OscConfig+0xc6c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	e029      	b.n	8002d04 <HAL_RCC_OscConfig+0xcc0>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002cbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ce2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	fa93 f2a3 	rbit	r2, r3
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	4bc3      	ldr	r3, [pc, #780]	@ (8003010 <HAL_RCC_OscConfig+0xfcc>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d08:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002d0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d10:	6011      	str	r1, [r2, #0]
 8002d12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d16:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	fa92 f1a2 	rbit	r1, r2
 8002d20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d24:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d28:	6011      	str	r1, [r2, #0]
  return result;
 8002d2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d2e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	fab2 f282 	clz	r2, r2
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f042 0220 	orr.w	r2, r2, #32
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f002 021f 	and.w	r2, r2, #31
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d185      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d50:	4baf      	ldr	r3, [pc, #700]	@ (8003010 <HAL_RCC_OscConfig+0xfcc>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	49a7      	ldr	r1, [pc, #668]	@ (8003010 <HAL_RCC_OscConfig+0xfcc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d9c:	601a      	str	r2, [r3, #0]
  return result;
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002da6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002db2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	461a      	mov	r2, r3
 8002dba:	2301      	movs	r3, #1
 8002dbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fe37 	bl	8001a30 <HAL_GetTick>
 8002dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc6:	e009      	b.n	8002ddc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fe32 	bl	8001a30 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e13a      	b.n	8003052 <HAL_RCC_OscConfig+0x100e>
 8002ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002de4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e00:	601a      	str	r2, [r3, #0]
  return result;
 8002e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e06:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e14:	d802      	bhi.n	8002e1c <HAL_RCC_OscConfig+0xdd8>
 8002e16:	4b7e      	ldr	r3, [pc, #504]	@ (8003010 <HAL_RCC_OscConfig+0xfcc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	e027      	b.n	8002e6c <HAL_RCC_OscConfig+0xe28>
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e46:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e54:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	fa93 f2a3 	rbit	r2, r3
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	4b69      	ldr	r3, [pc, #420]	@ (8003010 <HAL_RCC_OscConfig+0xfcc>)
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e70:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e74:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e78:	6011      	str	r1, [r2, #0]
 8002e7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e7e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	fa92 f1a2 	rbit	r1, r2
 8002e88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e8c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e90:	6011      	str	r1, [r2, #0]
  return result;
 8002e92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e96:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	fab2 f282 	clz	r2, r2
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f042 0220 	orr.w	r2, r2, #32
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f002 021f 	and.w	r2, r2, #31
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d087      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xd84>
 8002eb8:	e0ca      	b.n	8003050 <HAL_RCC_OscConfig+0x100c>
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ec2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ecc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ede:	601a      	str	r2, [r3, #0]
  return result;
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ee8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ef4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	461a      	mov	r2, r3
 8002efc:	2300      	movs	r3, #0
 8002efe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fd96 	bl	8001a30 <HAL_GetTick>
 8002f04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe fd91 	bl	8001a30 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e099      	b.n	8003052 <HAL_RCC_OscConfig+0x100e>
 8002f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f22:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fa93 f2a3 	rbit	r2, r3
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f42:	601a      	str	r2, [r3, #0]
  return result;
 8002f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f48:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f56:	d802      	bhi.n	8002f5e <HAL_RCC_OscConfig+0xf1a>
 8002f58:	4b2d      	ldr	r3, [pc, #180]	@ (8003010 <HAL_RCC_OscConfig+0xfcc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	e027      	b.n	8002fae <HAL_RCC_OscConfig+0xf6a>
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f88:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f96:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f2a3 	rbit	r2, r3
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <HAL_RCC_OscConfig+0xfcc>)
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fb2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002fb6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fba:	6011      	str	r1, [r2, #0]
 8002fbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fc0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	fa92 f1a2 	rbit	r1, r2
 8002fca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fd2:	6011      	str	r1, [r2, #0]
  return result;
 8002fd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fd8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f002 021f 	and.w	r2, r2, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d187      	bne.n	8002f0a <HAL_RCC_OscConfig+0xec6>
 8002ffa:	e029      	b.n	8003050 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d103      	bne.n	8003014 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e020      	b.n	8003052 <HAL_RCC_OscConfig+0x100e>
 8003010:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003014:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_RCC_OscConfig+0x1018>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800301c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003020:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003028:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	429a      	cmp	r2, r3
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003034:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003038:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b09e      	sub	sp, #120	@ 0x78
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e154      	b.n	8003322 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b89      	ldr	r3, [pc, #548]	@ (80032a0 <HAL_RCC_ClockConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d910      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b86      	ldr	r3, [pc, #536]	@ (80032a0 <HAL_RCC_ClockConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	4984      	ldr	r1, [pc, #528]	@ (80032a0 <HAL_RCC_ClockConfig+0x240>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b82      	ldr	r3, [pc, #520]	@ (80032a0 <HAL_RCC_ClockConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e13c      	b.n	8003322 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b7b      	ldr	r3, [pc, #492]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4978      	ldr	r1, [pc, #480]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80cd 	beq.w	800326e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d137      	bne.n	800314c <HAL_RCC_ClockConfig+0xec>
 80030dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80030f4:	d802      	bhi.n	80030fc <HAL_RCC_ClockConfig+0x9c>
 80030f6:	4b6b      	ldr	r3, [pc, #428]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	e00f      	b.n	800311c <HAL_RCC_ClockConfig+0xbc>
 80030fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003100:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	667b      	str	r3, [r7, #100]	@ 0x64
 800310a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800310e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003118:	4b62      	ldr	r3, [pc, #392]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003120:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003122:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003124:	fa92 f2a2 	rbit	r2, r2
 8003128:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800312a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800312c:	fab2 f282 	clz	r2, r2
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	f042 0220 	orr.w	r2, r2, #32
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	f002 021f 	and.w	r2, r2, #31
 800313c:	2101      	movs	r1, #1
 800313e:	fa01 f202 	lsl.w	r2, r1, r2
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d171      	bne.n	800322c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0ea      	b.n	8003322 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d137      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x164>
 8003154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003158:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b3f      	cmp	r3, #63	@ 0x3f
 800316c:	d802      	bhi.n	8003174 <HAL_RCC_ClockConfig+0x114>
 800316e:	4b4d      	ldr	r3, [pc, #308]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e00f      	b.n	8003194 <HAL_RCC_ClockConfig+0x134>
 8003174:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003178:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	647b      	str	r3, [r7, #68]	@ 0x44
 8003182:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003186:	643b      	str	r3, [r7, #64]	@ 0x40
 8003188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003190:	4b44      	ldr	r3, [pc, #272]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003198:	63ba      	str	r2, [r7, #56]	@ 0x38
 800319a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80031a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f042 0220 	orr.w	r2, r2, #32
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f002 021f 	and.w	r2, r2, #31
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d135      	bne.n	800322c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0ae      	b.n	8003322 <HAL_RCC_ClockConfig+0x2c2>
 80031c4:	2302      	movs	r3, #2
 80031c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80031da:	d802      	bhi.n	80031e2 <HAL_RCC_ClockConfig+0x182>
 80031dc:	4b31      	ldr	r3, [pc, #196]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	e00d      	b.n	80031fe <HAL_RCC_ClockConfig+0x19e>
 80031e2:	2302      	movs	r3, #2
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ee:	2302      	movs	r3, #2
 80031f0:	623b      	str	r3, [r7, #32]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	4b2a      	ldr	r3, [pc, #168]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	2202      	movs	r2, #2
 8003200:	61ba      	str	r2, [r7, #24]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	617a      	str	r2, [r7, #20]
  return result;
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	f042 0220 	orr.w	r2, r2, #32
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f002 021f 	and.w	r2, r2, #31
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f202 	lsl.w	r2, r1, r2
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e07a      	b.n	8003322 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322c:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 0203 	bic.w	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	491a      	ldr	r1, [pc, #104]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323e:	f7fe fbf7 	bl	8001a30 <HAL_GetTick>
 8003242:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003244:	e00a      	b.n	800325c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003246:	f7fe fbf3 	bl	8001a30 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e062      	b.n	8003322 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_RCC_ClockConfig+0x244>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 020c 	and.w	r2, r3, #12
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	429a      	cmp	r2, r3
 800326c:	d1eb      	bne.n	8003246 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326e:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <HAL_RCC_ClockConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d215      	bcs.n	80032a8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327c:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <HAL_RCC_ClockConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 0207 	bic.w	r2, r3, #7
 8003284:	4906      	ldr	r1, [pc, #24]	@ (80032a0 <HAL_RCC_ClockConfig+0x240>)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328c:	4b04      	ldr	r3, [pc, #16]	@ (80032a0 <HAL_RCC_ClockConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d006      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e041      	b.n	8003322 <HAL_RCC_ClockConfig+0x2c2>
 800329e:	bf00      	nop
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b4:	4b1d      	ldr	r3, [pc, #116]	@ (800332c <HAL_RCC_ClockConfig+0x2cc>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	491a      	ldr	r1, [pc, #104]	@ (800332c <HAL_RCC_ClockConfig+0x2cc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d2:	4b16      	ldr	r3, [pc, #88]	@ (800332c <HAL_RCC_ClockConfig+0x2cc>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4912      	ldr	r1, [pc, #72]	@ (800332c <HAL_RCC_ClockConfig+0x2cc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032e6:	f000 f829 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032ea:	4601      	mov	r1, r0
 80032ec:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <HAL_RCC_ClockConfig+0x2cc>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f4:	22f0      	movs	r2, #240	@ 0xf0
 80032f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	fa92 f2a2 	rbit	r2, r2
 80032fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	fab2 f282 	clz	r2, r2
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	40d3      	lsrs	r3, r2
 800330a:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <HAL_RCC_ClockConfig+0x2d0>)
 800330c:	5cd3      	ldrb	r3, [r2, r3]
 800330e:	fa21 f303 	lsr.w	r3, r1, r3
 8003312:	4a08      	ldr	r2, [pc, #32]	@ (8003334 <HAL_RCC_ClockConfig+0x2d4>)
 8003314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <HAL_RCC_ClockConfig+0x2d8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fb44 	bl	80019a8 <HAL_InitTick>
  
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3778      	adds	r7, #120	@ 0x78
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	08005c2c 	.word	0x08005c2c
 8003334:	20000044 	.word	0x20000044
 8003338:	20000048 	.word	0x20000048

0800333c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003356:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b04      	cmp	r3, #4
 8003364:	d002      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x30>
 8003366:	2b08      	cmp	r3, #8
 8003368:	d003      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x36>
 800336a:	e026      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800336c:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800336e:	613b      	str	r3, [r7, #16]
      break;
 8003370:	e026      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	0c9b      	lsrs	r3, r3, #18
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800337c:	5cd3      	ldrb	r3, [r2, r3]
 800337e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003380:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003398:	4a0e      	ldr	r2, [pc, #56]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e004      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a0c      	ldr	r2, [pc, #48]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]
      break;
 80033b8:	e002      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80033bc:	613b      	str	r3, [r7, #16]
      break;
 80033be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c0:	693b      	ldr	r3, [r7, #16]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	007a1200 	.word	0x007a1200
 80033d8:	08005c44 	.word	0x08005c44
 80033dc:	08005c54 	.word	0x08005c54
 80033e0:	003d0900 	.word	0x003d0900

080033e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e8:	4b03      	ldr	r3, [pc, #12]	@ (80033f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000044 	.word	0x20000044

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003402:	f7ff ffef 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003406:	4601      	mov	r1, r0
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003410:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003414:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	fa92 f2a2 	rbit	r2, r2
 800341c:	603a      	str	r2, [r7, #0]
  return result;
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	40d3      	lsrs	r3, r2
 8003428:	4a04      	ldr	r2, [pc, #16]	@ (800343c <HAL_RCC_GetPCLK1Freq+0x40>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	08005c3c 	.word	0x08005c3c

08003440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003446:	f7ff ffcd 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 800344a:	4601      	mov	r1, r0
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003454:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003458:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	fa92 f2a2 	rbit	r2, r2
 8003460:	603a      	str	r2, [r7, #0]
  return result;
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	fab2 f282 	clz	r2, r2
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	40d3      	lsrs	r3, r2
 800346c:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <HAL_RCC_GetPCLK2Freq+0x40>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	08005c3c 	.word	0x08005c3c

08003484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e095      	b.n	80035c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a6:	d009      	beq.n	80034bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	61da      	str	r2, [r3, #28]
 80034ae:	e005      	b.n	80034bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe f916 	bl	8001708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034fc:	d902      	bls.n	8003504 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e002      	b.n	800350a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003508:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003512:	d007      	beq.n	8003524 <HAL_SPI_Init+0xa0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800351c:	d002      	beq.n	8003524 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	ea42 0103 	orr.w	r1, r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	f003 0204 	and.w	r2, r3, #4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035a0:	ea42 0103 	orr.w	r1, r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b088      	sub	sp, #32
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_Transmit+0x22>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e15f      	b.n	80038ac <HAL_SPI_Transmit+0x2e2>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f4:	f7fe fa1c 	bl	8001a30 <HAL_GetTick>
 80035f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d002      	beq.n	8003610 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800360a:	2302      	movs	r3, #2
 800360c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800360e:	e148      	b.n	80038a2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_SPI_Transmit+0x52>
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003620:	e13f      	b.n	80038a2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2203      	movs	r2, #3
 8003626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800366c:	d10f      	bne.n	800368e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800368c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003698:	2b40      	cmp	r3, #64	@ 0x40
 800369a:	d007      	beq.n	80036ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036b4:	d94f      	bls.n	8003756 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_SPI_Transmit+0xfa>
 80036be:	8afb      	ldrh	r3, [r7, #22]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d142      	bne.n	800374a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	1c9a      	adds	r2, r3, #2
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036e8:	e02f      	b.n	800374a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d112      	bne.n	800371e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	1c9a      	adds	r2, r3, #2
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800371c:	e015      	b.n	800374a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800371e:	f7fe f987 	bl	8001a30 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d803      	bhi.n	8003736 <HAL_SPI_Transmit+0x16c>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d102      	bne.n	800373c <HAL_SPI_Transmit+0x172>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003748:	e0ab      	b.n	80038a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ca      	bne.n	80036ea <HAL_SPI_Transmit+0x120>
 8003754:	e080      	b.n	8003858 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_SPI_Transmit+0x19a>
 800375e:	8afb      	ldrh	r3, [r7, #22]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d174      	bne.n	800384e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d912      	bls.n	8003794 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377e:	1c9a      	adds	r2, r3, #2
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b02      	subs	r3, #2
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003792:	e05c      	b.n	800384e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037ba:	e048      	b.n	800384e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d12b      	bne.n	8003822 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d912      	bls.n	80037fa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	1c9a      	adds	r2, r3, #2
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b02      	subs	r3, #2
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037f8:	e029      	b.n	800384e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003820:	e015      	b.n	800384e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003822:	f7fe f905 	bl	8001a30 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d803      	bhi.n	800383a <HAL_SPI_Transmit+0x270>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d102      	bne.n	8003840 <HAL_SPI_Transmit+0x276>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800384c:	e029      	b.n	80038a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1b1      	bne.n	80037bc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fe19 	bl	8004494 <SPI_EndRxTxTransaction>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e003      	b.n	80038a2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80038aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d002      	beq.n	80038da <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038d8:	e11a      	b.n	8003b10 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038e2:	d112      	bne.n	800390a <HAL_SPI_Receive+0x56>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10e      	bne.n	800390a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2204      	movs	r2, #4
 80038f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f90e 	bl	8003b22 <HAL_SPI_TransmitReceive>
 8003906:	4603      	mov	r3, r0
 8003908:	e107      	b.n	8003b1a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_SPI_Receive+0x64>
 8003914:	2302      	movs	r3, #2
 8003916:	e100      	b.n	8003b1a <HAL_SPI_Receive+0x266>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003920:	f7fe f886 	bl	8001a30 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_SPI_Receive+0x7e>
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003936:	e0eb      	b.n	8003b10 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2204      	movs	r2, #4
 800393c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	88fa      	ldrh	r2, [r7, #6]
 8003958:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003982:	d908      	bls.n	8003996 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e007      	b.n	80039a6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ae:	d10f      	bne.n	80039d0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039da:	2b40      	cmp	r3, #64	@ 0x40
 80039dc:	d007      	beq.n	80039ee <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039f6:	d86f      	bhi.n	8003ad8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039f8:	e034      	b.n	8003a64 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d117      	bne.n	8003a38 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f103 020c 	add.w	r2, r3, #12
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a36:	e015      	b.n	8003a64 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a38:	f7fd fffa 	bl	8001a30 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d803      	bhi.n	8003a50 <HAL_SPI_Receive+0x19c>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d102      	bne.n	8003a56 <HAL_SPI_Receive+0x1a2>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003a62:	e055      	b.n	8003b10 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1c4      	bne.n	80039fa <HAL_SPI_Receive+0x146>
 8003a70:	e038      	b.n	8003ae4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d115      	bne.n	8003aac <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	b292      	uxth	r2, r2
 8003a8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	1c9a      	adds	r2, r3, #2
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003aaa:	e015      	b.n	8003ad8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aac:	f7fd ffc0 	bl	8001a30 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d803      	bhi.n	8003ac4 <HAL_SPI_Receive+0x210>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d102      	bne.n	8003aca <HAL_SPI_Receive+0x216>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003ad6:	e01b      	b.n	8003b10 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1c6      	bne.n	8003a72 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	6839      	ldr	r1, [r7, #0]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fc7b 	bl	80043e4 <SPI_EndRxTransaction>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
 8003b06:	e003      	b.n	8003b10 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b08a      	sub	sp, #40	@ 0x28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x26>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e20a      	b.n	8003f5e <HAL_SPI_TransmitReceive+0x43c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b50:	f7fd ff6e 	bl	8001a30 <HAL_GetTick>
 8003b54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b68:	887b      	ldrh	r3, [r7, #2]
 8003b6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b6c:	7efb      	ldrb	r3, [r7, #27]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d00e      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x6e>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b78:	d106      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x66>
 8003b82:	7efb      	ldrb	r3, [r7, #27]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d003      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b8e:	e1e0      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x80>
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003ba8:	e1d3      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d003      	beq.n	8003bbe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2205      	movs	r2, #5
 8003bba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	887a      	ldrh	r2, [r7, #2]
 8003bce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	887a      	ldrh	r2, [r7, #2]
 8003bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	887a      	ldrh	r2, [r7, #2]
 8003bea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c00:	d802      	bhi.n	8003c08 <HAL_SPI_TransmitReceive+0xe6>
 8003c02:	8a3b      	ldrh	r3, [r7, #16]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d908      	bls.n	8003c1a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	e007      	b.n	8003c2a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	d007      	beq.n	8003c48 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c50:	f240 8081 	bls.w	8003d56 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x140>
 8003c5c:	8a7b      	ldrh	r3, [r7, #18]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d16d      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	881a      	ldrh	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	1c9a      	adds	r2, r3, #2
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c86:	e05a      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d11b      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x1ac>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d016      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x1ac>
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d113      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	881a      	ldrh	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	1c9a      	adds	r2, r3, #2
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d11c      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x1f4>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d12:	2301      	movs	r3, #1
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d16:	f7fd fe8b 	bl	8001a30 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d80b      	bhi.n	8003d3e <HAL_SPI_TransmitReceive+0x21c>
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d007      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003d3c:	e109      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d19f      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x166>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d199      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x166>
 8003d54:	e0e3      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x244>
 8003d5e:	8a7b      	ldrh	r3, [r7, #18]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 80cf 	bne.w	8003f04 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d912      	bls.n	8003d96 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d80:	1c9a      	adds	r2, r3, #2
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b02      	subs	r3, #2
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d94:	e0b6      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	7812      	ldrb	r2, [r2, #0]
 8003da2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dbc:	e0a2      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d134      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x314>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d02f      	beq.n	8003e36 <HAL_SPI_TransmitReceive+0x314>
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d12c      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d912      	bls.n	8003e0c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dea:	881a      	ldrh	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	1c9a      	adds	r2, r3, #2
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b02      	subs	r3, #2
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e0a:	e012      	b.n	8003e32 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d148      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x3b4>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d042      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d923      	bls.n	8003ea4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	b292      	uxth	r2, r2
 8003e68:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	1c9a      	adds	r2, r3, #2
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b02      	subs	r3, #2
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d81f      	bhi.n	8003ed2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	e016      	b.n	8003ed2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f103 020c 	add.w	r2, r3, #12
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ed6:	f7fd fdab 	bl	8001a30 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d803      	bhi.n	8003eee <HAL_SPI_TransmitReceive+0x3cc>
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d102      	bne.n	8003ef4 <HAL_SPI_TransmitReceive+0x3d2>
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003f02:	e026      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f47f af57 	bne.w	8003dbe <HAL_SPI_TransmitReceive+0x29c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f af50 	bne.w	8003dbe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fab6 	bl	8004494 <SPI_EndRxTxTransaction>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f48:	e003      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3728      	adds	r7, #40	@ 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	099b      	lsrs	r3, r3, #6
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
    return;
 8003faa:	e0d7      	b.n	800415c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_SPI_IRQHandler+0x66>
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	09db      	lsrs	r3, r3, #7
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	4798      	blx	r3
    return;
 8003fcc:	e0c6      	b.n	800415c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_SPI_IRQHandler+0x8c>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80b4 	beq.w	800415c <HAL_SPI_IRQHandler+0x1f4>
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80ad 	beq.w	800415c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d023      	beq.n	8004056 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b03      	cmp	r3, #3
 8004018:	d011      	beq.n	800403e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401e:	f043 0204 	orr.w	r2, r3, #4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	e00b      	b.n	8004056 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]
        return;
 8004054:	e082      	b.n	800415c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d014      	beq.n	800408c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00c      	beq.n	80040b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409c:	f043 0208 	orr.w	r2, r3, #8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040a4:	2300      	movs	r3, #0
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04f      	beq.n	800415a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_SPI_IRQHandler+0x17e>
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d034      	beq.n	8004150 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0203 	bic.w	r2, r2, #3
 80040f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d011      	beq.n	8004122 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004102:	4a18      	ldr	r2, [pc, #96]	@ (8004164 <HAL_SPI_IRQHandler+0x1fc>)
 8004104:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410a:	4618      	mov	r0, r3
 800410c:	f7fd fdd1 	bl	8001cb2 <HAL_DMA_Abort_IT>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412e:	4a0d      	ldr	r2, [pc, #52]	@ (8004164 <HAL_SPI_IRQHandler+0x1fc>)
 8004130:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd fdbb 	bl	8001cb2 <HAL_DMA_Abort_IT>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004146:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800414e:	e003      	b.n	8004158 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f809 	bl	8004168 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004156:	e000      	b.n	800415a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004158:	bf00      	nop
    return;
 800415a:	bf00      	nop
  }
}
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	0800417d 	.word	0x0800417d

08004168 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff ffe5 	bl	8004168 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041b8:	f7fd fc3a 	bl	8001a30 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	4413      	add	r3, r2
 80041c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041c8:	f7fd fc32 	bl	8001a30 <HAL_GetTick>
 80041cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ce:	4b39      	ldr	r3, [pc, #228]	@ (80042b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	015b      	lsls	r3, r3, #5
 80041d4:	0d1b      	lsrs	r3, r3, #20
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041de:	e054      	b.n	800428a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d050      	beq.n	800428a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041e8:	f7fd fc22 	bl	8001a30 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d902      	bls.n	80041fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d13d      	bne.n	800427a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800420c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004216:	d111      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004220:	d004      	beq.n	800422c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d107      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800423a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004244:	d10f      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e017      	b.n	80042aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3b01      	subs	r3, #1
 8004288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4013      	ands	r3, r2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d19b      	bne.n	80041e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000044 	.word	0x20000044

080042b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	@ 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042ca:	f7fd fbb1 	bl	8001a30 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	4413      	add	r3, r2
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80042da:	f7fd fba9 	bl	8001a30 <HAL_GetTick>
 80042de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042e8:	4b3d      	ldr	r3, [pc, #244]	@ (80043e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	00da      	lsls	r2, r3, #3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	0d1b      	lsrs	r3, r3, #20
 80042f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004300:	e060      	b.n	80043c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004308:	d107      	bne.n	800431a <SPI_WaitFifoStateUntilTimeout+0x62>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004318:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d050      	beq.n	80043c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004322:	f7fd fb85 	bl	8001a30 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432e:	429a      	cmp	r2, r3
 8004330:	d902      	bls.n	8004338 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d13d      	bne.n	80043b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004346:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004350:	d111      	bne.n	8004376 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800435a:	d004      	beq.n	8004366 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004364:	d107      	bne.n	8004376 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004374:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437e:	d10f      	bne.n	80043a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800439e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e010      	b.n	80043d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d196      	bne.n	8004302 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3728      	adds	r7, #40	@ 0x28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000044 	.word	0x20000044

080043e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043f8:	d111      	bne.n	800441e <SPI_EndRxTransaction+0x3a>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004402:	d004      	beq.n	800440e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440c:	d107      	bne.n	800441e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800441c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	2180      	movs	r1, #128	@ 0x80
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff febd 	bl	80041a8 <SPI_WaitFlagStateUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e023      	b.n	800448c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800444c:	d11d      	bne.n	800448a <SPI_EndRxTransaction+0xa6>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004456:	d004      	beq.n	8004462 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004460:	d113      	bne.n	800448a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff ff22 	bl	80042b8 <SPI_WaitFifoStateUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e000      	b.n	800448c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff ff03 	bl	80042b8 <SPI_WaitFifoStateUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e027      	b.n	8004518 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2200      	movs	r2, #0
 80044d0:	2180      	movs	r1, #128	@ 0x80
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff fe68 	bl	80041a8 <SPI_WaitFlagStateUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e014      	b.n	8004518 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff fedc 	bl	80042b8 <SPI_WaitFifoStateUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e000      	b.n	8004518 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e040      	b.n	80045b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd f92a 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	@ 0x24
 800454c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f9e8 	bl	800493c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8af 	bl	80046d0 <UART_SetConfig>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e01b      	b.n	80045b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800458a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800459a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fa67 	bl	8004a80 <UART_CheckIdleState>
 80045b2:	4603      	mov	r3, r0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	@ 0x28
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d177      	bne.n	80046c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_Transmit+0x24>
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e070      	b.n	80046c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2221      	movs	r2, #33	@ 0x21
 80045f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f2:	f7fd fa1d 	bl	8001a30 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004610:	d108      	bne.n	8004624 <HAL_UART_Transmit+0x68>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e003      	b.n	800462c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800462c:	e02f      	b.n	800468e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2180      	movs	r1, #128	@ 0x80
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fac9 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e03b      	b.n	80046c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	881a      	ldrh	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004660:	b292      	uxth	r2, r2
 8004662:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	3302      	adds	r3, #2
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e007      	b.n	800467c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3301      	adds	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1c9      	bne.n	800462e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2140      	movs	r1, #64	@ 0x40
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fa93 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e005      	b.n	80046c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004924 <UART_SetConfig+0x254>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	6979      	ldr	r1, [r7, #20]
 8004704:	430b      	orrs	r3, r1
 8004706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	430a      	orrs	r2, r1
 8004740:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a78      	ldr	r2, [pc, #480]	@ (8004928 <UART_SetConfig+0x258>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d120      	bne.n	800478e <UART_SetConfig+0xbe>
 800474c:	4b77      	ldr	r3, [pc, #476]	@ (800492c <UART_SetConfig+0x25c>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b03      	cmp	r3, #3
 8004756:	d817      	bhi.n	8004788 <UART_SetConfig+0xb8>
 8004758:	a201      	add	r2, pc, #4	@ (adr r2, 8004760 <UART_SetConfig+0x90>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004771 	.word	0x08004771
 8004764:	0800477d 	.word	0x0800477d
 8004768:	08004783 	.word	0x08004783
 800476c:	08004777 	.word	0x08004777
 8004770:	2300      	movs	r3, #0
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e01d      	b.n	80047b2 <UART_SetConfig+0xe2>
 8004776:	2302      	movs	r3, #2
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e01a      	b.n	80047b2 <UART_SetConfig+0xe2>
 800477c:	2304      	movs	r3, #4
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e017      	b.n	80047b2 <UART_SetConfig+0xe2>
 8004782:	2308      	movs	r3, #8
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e014      	b.n	80047b2 <UART_SetConfig+0xe2>
 8004788:	2310      	movs	r3, #16
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e011      	b.n	80047b2 <UART_SetConfig+0xe2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a67      	ldr	r2, [pc, #412]	@ (8004930 <UART_SetConfig+0x260>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d102      	bne.n	800479e <UART_SetConfig+0xce>
 8004798:	2300      	movs	r3, #0
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e009      	b.n	80047b2 <UART_SetConfig+0xe2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a64      	ldr	r2, [pc, #400]	@ (8004934 <UART_SetConfig+0x264>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d102      	bne.n	80047ae <UART_SetConfig+0xde>
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e001      	b.n	80047b2 <UART_SetConfig+0xe2>
 80047ae:	2310      	movs	r3, #16
 80047b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ba:	d15a      	bne.n	8004872 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80047bc:	7ffb      	ldrb	r3, [r7, #31]
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d827      	bhi.n	8004812 <UART_SetConfig+0x142>
 80047c2:	a201      	add	r2, pc, #4	@ (adr r2, 80047c8 <UART_SetConfig+0xf8>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	080047f5 	.word	0x080047f5
 80047d0:	080047fd 	.word	0x080047fd
 80047d4:	08004813 	.word	0x08004813
 80047d8:	08004803 	.word	0x08004803
 80047dc:	08004813 	.word	0x08004813
 80047e0:	08004813 	.word	0x08004813
 80047e4:	08004813 	.word	0x08004813
 80047e8:	0800480b 	.word	0x0800480b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ec:	f7fe fe06 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 80047f0:	61b8      	str	r0, [r7, #24]
        break;
 80047f2:	e013      	b.n	800481c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fe fe24 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 80047f8:	61b8      	str	r0, [r7, #24]
        break;
 80047fa:	e00f      	b.n	800481c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004938 <UART_SetConfig+0x268>)
 80047fe:	61bb      	str	r3, [r7, #24]
        break;
 8004800:	e00c      	b.n	800481c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004802:	f7fe fd9b 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8004806:	61b8      	str	r0, [r7, #24]
        break;
 8004808:	e008      	b.n	800481c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800480e:	61bb      	str	r3, [r7, #24]
        break;
 8004810:	e004      	b.n	800481c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	77bb      	strb	r3, [r7, #30]
        break;
 800481a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d074      	beq.n	800490c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	005a      	lsls	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	441a      	add	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b0f      	cmp	r3, #15
 800483c:	d916      	bls.n	800486c <UART_SetConfig+0x19c>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004844:	d212      	bcs.n	800486c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f023 030f 	bic.w	r3, r3, #15
 800484e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	b29b      	uxth	r3, r3
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	b29a      	uxth	r2, r3
 800485c:	89fb      	ldrh	r3, [r7, #14]
 800485e:	4313      	orrs	r3, r2
 8004860:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	89fa      	ldrh	r2, [r7, #14]
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	e04f      	b.n	800490c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	77bb      	strb	r3, [r7, #30]
 8004870:	e04c      	b.n	800490c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004872:	7ffb      	ldrb	r3, [r7, #31]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d828      	bhi.n	80048ca <UART_SetConfig+0x1fa>
 8004878:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <UART_SetConfig+0x1b0>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048ad 	.word	0x080048ad
 8004888:	080048b5 	.word	0x080048b5
 800488c:	080048cb 	.word	0x080048cb
 8004890:	080048bb 	.word	0x080048bb
 8004894:	080048cb 	.word	0x080048cb
 8004898:	080048cb 	.word	0x080048cb
 800489c:	080048cb 	.word	0x080048cb
 80048a0:	080048c3 	.word	0x080048c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7fe fdaa 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 80048a8:	61b8      	str	r0, [r7, #24]
        break;
 80048aa:	e013      	b.n	80048d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ac:	f7fe fdc8 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 80048b0:	61b8      	str	r0, [r7, #24]
        break;
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b4:	4b20      	ldr	r3, [pc, #128]	@ (8004938 <UART_SetConfig+0x268>)
 80048b6:	61bb      	str	r3, [r7, #24]
        break;
 80048b8:	e00c      	b.n	80048d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ba:	f7fe fd3f 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80048be:	61b8      	str	r0, [r7, #24]
        break;
 80048c0:	e008      	b.n	80048d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c6:	61bb      	str	r3, [r7, #24]
        break;
 80048c8:	e004      	b.n	80048d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	77bb      	strb	r3, [r7, #30]
        break;
 80048d2:	bf00      	nop
    }

    if (pclk != 0U)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	085a      	lsrs	r2, r3, #1
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	441a      	add	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b0f      	cmp	r3, #15
 80048f2:	d909      	bls.n	8004908 <UART_SetConfig+0x238>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fa:	d205      	bcs.n	8004908 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	e001      	b.n	800490c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004918:	7fbb      	ldrb	r3, [r7, #30]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	efff69f3 	.word	0xefff69f3
 8004928:	40013800 	.word	0x40013800
 800492c:	40021000 	.word	0x40021000
 8004930:	40004400 	.word	0x40004400
 8004934:	40004800 	.word	0x40004800
 8004938:	007a1200 	.word	0x007a1200

0800493c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3a:	d10a      	bne.n	8004a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b098      	sub	sp, #96	@ 0x60
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a90:	f7fc ffce 	bl	8001a30 <HAL_GetTick>
 8004a94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d12e      	bne.n	8004b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f88c 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d021      	beq.n	8004b02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ade:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e6      	bne.n	8004abe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e062      	b.n	8004bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d149      	bne.n	8004ba4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f856 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03c      	beq.n	8004ba4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	623b      	str	r3, [r7, #32]
   return(result);
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e6      	bne.n	8004b2a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b7c:	61fa      	str	r2, [r7, #28]
 8004b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	69b9      	ldr	r1, [r7, #24]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e011      	b.n	8004bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3758      	adds	r7, #88	@ 0x58
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be0:	e04f      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d04b      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7fc ff21 	bl	8001a30 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e04e      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d037      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b80      	cmp	r3, #128	@ 0x80
 8004c16:	d034      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b40      	cmp	r3, #64	@ 0x40
 8004c1c:	d031      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d110      	bne.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2208      	movs	r2, #8
 8004c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f838 	bl	8004caa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e029      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c5c:	d111      	bne.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f81e 	bl	8004caa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e00f      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d0a0      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b095      	sub	sp, #84	@ 0x54
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e6      	bne.n	8004cb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3308      	adds	r3, #8
 8004cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e5      	bne.n	8004ce4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d118      	bne.n	8004d52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 0310 	bic.w	r3, r3, #16
 8004d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6979      	ldr	r1, [r7, #20]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e6      	bne.n	8004d20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d66:	bf00      	nop
 8004d68:	3754      	adds	r7, #84	@ 0x54
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <siprintf>:
 8004d74:	b40e      	push	{r1, r2, r3}
 8004d76:	b510      	push	{r4, lr}
 8004d78:	b09d      	sub	sp, #116	@ 0x74
 8004d7a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004d7c:	9002      	str	r0, [sp, #8]
 8004d7e:	9006      	str	r0, [sp, #24]
 8004d80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d84:	480a      	ldr	r0, [pc, #40]	@ (8004db0 <siprintf+0x3c>)
 8004d86:	9107      	str	r1, [sp, #28]
 8004d88:	9104      	str	r1, [sp, #16]
 8004d8a:	490a      	ldr	r1, [pc, #40]	@ (8004db4 <siprintf+0x40>)
 8004d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d90:	9105      	str	r1, [sp, #20]
 8004d92:	2400      	movs	r4, #0
 8004d94:	a902      	add	r1, sp, #8
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004d9c:	f000 f9a2 	bl	80050e4 <_svfiprintf_r>
 8004da0:	9b02      	ldr	r3, [sp, #8]
 8004da2:	701c      	strb	r4, [r3, #0]
 8004da4:	b01d      	add	sp, #116	@ 0x74
 8004da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004daa:	b003      	add	sp, #12
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000050 	.word	0x20000050
 8004db4:	ffff0208 	.word	0xffff0208

08004db8 <memset>:
 8004db8:	4402      	add	r2, r0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d100      	bne.n	8004dc2 <memset+0xa>
 8004dc0:	4770      	bx	lr
 8004dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc6:	e7f9      	b.n	8004dbc <memset+0x4>

08004dc8 <__errno>:
 8004dc8:	4b01      	ldr	r3, [pc, #4]	@ (8004dd0 <__errno+0x8>)
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000050 	.word	0x20000050

08004dd4 <__libc_init_array>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004e0c <__libc_init_array+0x38>)
 8004dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004e10 <__libc_init_array+0x3c>)
 8004dda:	1b64      	subs	r4, r4, r5
 8004ddc:	10a4      	asrs	r4, r4, #2
 8004dde:	2600      	movs	r6, #0
 8004de0:	42a6      	cmp	r6, r4
 8004de2:	d109      	bne.n	8004df8 <__libc_init_array+0x24>
 8004de4:	4d0b      	ldr	r5, [pc, #44]	@ (8004e14 <__libc_init_array+0x40>)
 8004de6:	4c0c      	ldr	r4, [pc, #48]	@ (8004e18 <__libc_init_array+0x44>)
 8004de8:	f000 fc64 	bl	80056b4 <_init>
 8004dec:	1b64      	subs	r4, r4, r5
 8004dee:	10a4      	asrs	r4, r4, #2
 8004df0:	2600      	movs	r6, #0
 8004df2:	42a6      	cmp	r6, r4
 8004df4:	d105      	bne.n	8004e02 <__libc_init_array+0x2e>
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfc:	4798      	blx	r3
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7ee      	b.n	8004de0 <__libc_init_array+0xc>
 8004e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e06:	4798      	blx	r3
 8004e08:	3601      	adds	r6, #1
 8004e0a:	e7f2      	b.n	8004df2 <__libc_init_array+0x1e>
 8004e0c:	08005ca0 	.word	0x08005ca0
 8004e10:	08005ca0 	.word	0x08005ca0
 8004e14:	08005ca0 	.word	0x08005ca0
 8004e18:	08005ca4 	.word	0x08005ca4

08004e1c <__retarget_lock_acquire_recursive>:
 8004e1c:	4770      	bx	lr

08004e1e <__retarget_lock_release_recursive>:
 8004e1e:	4770      	bx	lr

08004e20 <memcpy>:
 8004e20:	440a      	add	r2, r1
 8004e22:	4291      	cmp	r1, r2
 8004e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e28:	d100      	bne.n	8004e2c <memcpy+0xc>
 8004e2a:	4770      	bx	lr
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e36:	4291      	cmp	r1, r2
 8004e38:	d1f9      	bne.n	8004e2e <memcpy+0xe>
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <_free_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4605      	mov	r5, r0
 8004e40:	2900      	cmp	r1, #0
 8004e42:	d041      	beq.n	8004ec8 <_free_r+0x8c>
 8004e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e48:	1f0c      	subs	r4, r1, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfb8      	it	lt
 8004e4e:	18e4      	addlt	r4, r4, r3
 8004e50:	f000 f8e0 	bl	8005014 <__malloc_lock>
 8004e54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <_free_r+0x90>)
 8004e56:	6813      	ldr	r3, [r2, #0]
 8004e58:	b933      	cbnz	r3, 8004e68 <_free_r+0x2c>
 8004e5a:	6063      	str	r3, [r4, #4]
 8004e5c:	6014      	str	r4, [r2, #0]
 8004e5e:	4628      	mov	r0, r5
 8004e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e64:	f000 b8dc 	b.w	8005020 <__malloc_unlock>
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	d908      	bls.n	8004e7e <_free_r+0x42>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf01      	itttt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	1809      	addeq	r1, r1, r0
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	e7ed      	b.n	8004e5a <_free_r+0x1e>
 8004e7e:	461a      	mov	r2, r3
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b10b      	cbz	r3, 8004e88 <_free_r+0x4c>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d9fa      	bls.n	8004e7e <_free_r+0x42>
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	1850      	adds	r0, r2, r1
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d10b      	bne.n	8004ea8 <_free_r+0x6c>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	4401      	add	r1, r0
 8004e94:	1850      	adds	r0, r2, r1
 8004e96:	4283      	cmp	r3, r0
 8004e98:	6011      	str	r1, [r2, #0]
 8004e9a:	d1e0      	bne.n	8004e5e <_free_r+0x22>
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	6053      	str	r3, [r2, #4]
 8004ea2:	4408      	add	r0, r1
 8004ea4:	6010      	str	r0, [r2, #0]
 8004ea6:	e7da      	b.n	8004e5e <_free_r+0x22>
 8004ea8:	d902      	bls.n	8004eb0 <_free_r+0x74>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	602b      	str	r3, [r5, #0]
 8004eae:	e7d6      	b.n	8004e5e <_free_r+0x22>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	1821      	adds	r1, r4, r0
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	bf04      	itt	eq
 8004eb8:	6819      	ldreq	r1, [r3, #0]
 8004eba:	685b      	ldreq	r3, [r3, #4]
 8004ebc:	6063      	str	r3, [r4, #4]
 8004ebe:	bf04      	itt	eq
 8004ec0:	1809      	addeq	r1, r1, r0
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	6054      	str	r4, [r2, #4]
 8004ec6:	e7ca      	b.n	8004e5e <_free_r+0x22>
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
 8004eca:	bf00      	nop
 8004ecc:	200003f0 	.word	0x200003f0

08004ed0 <sbrk_aligned>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8004f10 <sbrk_aligned+0x40>)
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	6831      	ldr	r1, [r6, #0]
 8004ed8:	4605      	mov	r5, r0
 8004eda:	b911      	cbnz	r1, 8004ee2 <sbrk_aligned+0x12>
 8004edc:	f000 fba4 	bl	8005628 <_sbrk_r>
 8004ee0:	6030      	str	r0, [r6, #0]
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 fb9f 	bl	8005628 <_sbrk_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d103      	bne.n	8004ef6 <sbrk_aligned+0x26>
 8004eee:	f04f 34ff 	mov.w	r4, #4294967295
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	bd70      	pop	{r4, r5, r6, pc}
 8004ef6:	1cc4      	adds	r4, r0, #3
 8004ef8:	f024 0403 	bic.w	r4, r4, #3
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d0f8      	beq.n	8004ef2 <sbrk_aligned+0x22>
 8004f00:	1a21      	subs	r1, r4, r0
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 fb90 	bl	8005628 <_sbrk_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d1f2      	bne.n	8004ef2 <sbrk_aligned+0x22>
 8004f0c:	e7ef      	b.n	8004eee <sbrk_aligned+0x1e>
 8004f0e:	bf00      	nop
 8004f10:	200003ec 	.word	0x200003ec

08004f14 <_malloc_r>:
 8004f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f18:	1ccd      	adds	r5, r1, #3
 8004f1a:	f025 0503 	bic.w	r5, r5, #3
 8004f1e:	3508      	adds	r5, #8
 8004f20:	2d0c      	cmp	r5, #12
 8004f22:	bf38      	it	cc
 8004f24:	250c      	movcc	r5, #12
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	4606      	mov	r6, r0
 8004f2a:	db01      	blt.n	8004f30 <_malloc_r+0x1c>
 8004f2c:	42a9      	cmp	r1, r5
 8004f2e:	d904      	bls.n	8004f3a <_malloc_r+0x26>
 8004f30:	230c      	movs	r3, #12
 8004f32:	6033      	str	r3, [r6, #0]
 8004f34:	2000      	movs	r0, #0
 8004f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005010 <_malloc_r+0xfc>
 8004f3e:	f000 f869 	bl	8005014 <__malloc_lock>
 8004f42:	f8d8 3000 	ldr.w	r3, [r8]
 8004f46:	461c      	mov	r4, r3
 8004f48:	bb44      	cbnz	r4, 8004f9c <_malloc_r+0x88>
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7ff ffbf 	bl	8004ed0 <sbrk_aligned>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	4604      	mov	r4, r0
 8004f56:	d158      	bne.n	800500a <_malloc_r+0xf6>
 8004f58:	f8d8 4000 	ldr.w	r4, [r8]
 8004f5c:	4627      	mov	r7, r4
 8004f5e:	2f00      	cmp	r7, #0
 8004f60:	d143      	bne.n	8004fea <_malloc_r+0xd6>
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	d04b      	beq.n	8004ffe <_malloc_r+0xea>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	4639      	mov	r1, r7
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	eb04 0903 	add.w	r9, r4, r3
 8004f70:	f000 fb5a 	bl	8005628 <_sbrk_r>
 8004f74:	4581      	cmp	r9, r0
 8004f76:	d142      	bne.n	8004ffe <_malloc_r+0xea>
 8004f78:	6821      	ldr	r1, [r4, #0]
 8004f7a:	1a6d      	subs	r5, r5, r1
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7ff ffa6 	bl	8004ed0 <sbrk_aligned>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d03a      	beq.n	8004ffe <_malloc_r+0xea>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	442b      	add	r3, r5
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	bb62      	cbnz	r2, 8004ff0 <_malloc_r+0xdc>
 8004f96:	f8c8 7000 	str.w	r7, [r8]
 8004f9a:	e00f      	b.n	8004fbc <_malloc_r+0xa8>
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	1b52      	subs	r2, r2, r5
 8004fa0:	d420      	bmi.n	8004fe4 <_malloc_r+0xd0>
 8004fa2:	2a0b      	cmp	r2, #11
 8004fa4:	d917      	bls.n	8004fd6 <_malloc_r+0xc2>
 8004fa6:	1961      	adds	r1, r4, r5
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	6025      	str	r5, [r4, #0]
 8004fac:	bf18      	it	ne
 8004fae:	6059      	strne	r1, [r3, #4]
 8004fb0:	6863      	ldr	r3, [r4, #4]
 8004fb2:	bf08      	it	eq
 8004fb4:	f8c8 1000 	streq.w	r1, [r8]
 8004fb8:	5162      	str	r2, [r4, r5]
 8004fba:	604b      	str	r3, [r1, #4]
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f000 f82f 	bl	8005020 <__malloc_unlock>
 8004fc2:	f104 000b 	add.w	r0, r4, #11
 8004fc6:	1d23      	adds	r3, r4, #4
 8004fc8:	f020 0007 	bic.w	r0, r0, #7
 8004fcc:	1ac2      	subs	r2, r0, r3
 8004fce:	bf1c      	itt	ne
 8004fd0:	1a1b      	subne	r3, r3, r0
 8004fd2:	50a3      	strne	r3, [r4, r2]
 8004fd4:	e7af      	b.n	8004f36 <_malloc_r+0x22>
 8004fd6:	6862      	ldr	r2, [r4, #4]
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	bf0c      	ite	eq
 8004fdc:	f8c8 2000 	streq.w	r2, [r8]
 8004fe0:	605a      	strne	r2, [r3, #4]
 8004fe2:	e7eb      	b.n	8004fbc <_malloc_r+0xa8>
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	6864      	ldr	r4, [r4, #4]
 8004fe8:	e7ae      	b.n	8004f48 <_malloc_r+0x34>
 8004fea:	463c      	mov	r4, r7
 8004fec:	687f      	ldr	r7, [r7, #4]
 8004fee:	e7b6      	b.n	8004f5e <_malloc_r+0x4a>
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	d1fb      	bne.n	8004ff0 <_malloc_r+0xdc>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6053      	str	r3, [r2, #4]
 8004ffc:	e7de      	b.n	8004fbc <_malloc_r+0xa8>
 8004ffe:	230c      	movs	r3, #12
 8005000:	6033      	str	r3, [r6, #0]
 8005002:	4630      	mov	r0, r6
 8005004:	f000 f80c 	bl	8005020 <__malloc_unlock>
 8005008:	e794      	b.n	8004f34 <_malloc_r+0x20>
 800500a:	6005      	str	r5, [r0, #0]
 800500c:	e7d6      	b.n	8004fbc <_malloc_r+0xa8>
 800500e:	bf00      	nop
 8005010:	200003f0 	.word	0x200003f0

08005014 <__malloc_lock>:
 8005014:	4801      	ldr	r0, [pc, #4]	@ (800501c <__malloc_lock+0x8>)
 8005016:	f7ff bf01 	b.w	8004e1c <__retarget_lock_acquire_recursive>
 800501a:	bf00      	nop
 800501c:	200003e8 	.word	0x200003e8

08005020 <__malloc_unlock>:
 8005020:	4801      	ldr	r0, [pc, #4]	@ (8005028 <__malloc_unlock+0x8>)
 8005022:	f7ff befc 	b.w	8004e1e <__retarget_lock_release_recursive>
 8005026:	bf00      	nop
 8005028:	200003e8 	.word	0x200003e8

0800502c <__ssputs_r>:
 800502c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005030:	688e      	ldr	r6, [r1, #8]
 8005032:	461f      	mov	r7, r3
 8005034:	42be      	cmp	r6, r7
 8005036:	680b      	ldr	r3, [r1, #0]
 8005038:	4682      	mov	sl, r0
 800503a:	460c      	mov	r4, r1
 800503c:	4690      	mov	r8, r2
 800503e:	d82d      	bhi.n	800509c <__ssputs_r+0x70>
 8005040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005044:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005048:	d026      	beq.n	8005098 <__ssputs_r+0x6c>
 800504a:	6965      	ldr	r5, [r4, #20]
 800504c:	6909      	ldr	r1, [r1, #16]
 800504e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005052:	eba3 0901 	sub.w	r9, r3, r1
 8005056:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800505a:	1c7b      	adds	r3, r7, #1
 800505c:	444b      	add	r3, r9
 800505e:	106d      	asrs	r5, r5, #1
 8005060:	429d      	cmp	r5, r3
 8005062:	bf38      	it	cc
 8005064:	461d      	movcc	r5, r3
 8005066:	0553      	lsls	r3, r2, #21
 8005068:	d527      	bpl.n	80050ba <__ssputs_r+0x8e>
 800506a:	4629      	mov	r1, r5
 800506c:	f7ff ff52 	bl	8004f14 <_malloc_r>
 8005070:	4606      	mov	r6, r0
 8005072:	b360      	cbz	r0, 80050ce <__ssputs_r+0xa2>
 8005074:	6921      	ldr	r1, [r4, #16]
 8005076:	464a      	mov	r2, r9
 8005078:	f7ff fed2 	bl	8004e20 <memcpy>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	6126      	str	r6, [r4, #16]
 800508a:	6165      	str	r5, [r4, #20]
 800508c:	444e      	add	r6, r9
 800508e:	eba5 0509 	sub.w	r5, r5, r9
 8005092:	6026      	str	r6, [r4, #0]
 8005094:	60a5      	str	r5, [r4, #8]
 8005096:	463e      	mov	r6, r7
 8005098:	42be      	cmp	r6, r7
 800509a:	d900      	bls.n	800509e <__ssputs_r+0x72>
 800509c:	463e      	mov	r6, r7
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	4632      	mov	r2, r6
 80050a2:	4641      	mov	r1, r8
 80050a4:	f000 faa6 	bl	80055f4 <memmove>
 80050a8:	68a3      	ldr	r3, [r4, #8]
 80050aa:	1b9b      	subs	r3, r3, r6
 80050ac:	60a3      	str	r3, [r4, #8]
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	4433      	add	r3, r6
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	2000      	movs	r0, #0
 80050b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ba:	462a      	mov	r2, r5
 80050bc:	f000 fac4 	bl	8005648 <_realloc_r>
 80050c0:	4606      	mov	r6, r0
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d1e0      	bne.n	8005088 <__ssputs_r+0x5c>
 80050c6:	6921      	ldr	r1, [r4, #16]
 80050c8:	4650      	mov	r0, sl
 80050ca:	f7ff feb7 	bl	8004e3c <_free_r>
 80050ce:	230c      	movs	r3, #12
 80050d0:	f8ca 3000 	str.w	r3, [sl]
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	e7e9      	b.n	80050b6 <__ssputs_r+0x8a>
	...

080050e4 <_svfiprintf_r>:
 80050e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e8:	4698      	mov	r8, r3
 80050ea:	898b      	ldrh	r3, [r1, #12]
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	b09d      	sub	sp, #116	@ 0x74
 80050f0:	4607      	mov	r7, r0
 80050f2:	460d      	mov	r5, r1
 80050f4:	4614      	mov	r4, r2
 80050f6:	d510      	bpl.n	800511a <_svfiprintf_r+0x36>
 80050f8:	690b      	ldr	r3, [r1, #16]
 80050fa:	b973      	cbnz	r3, 800511a <_svfiprintf_r+0x36>
 80050fc:	2140      	movs	r1, #64	@ 0x40
 80050fe:	f7ff ff09 	bl	8004f14 <_malloc_r>
 8005102:	6028      	str	r0, [r5, #0]
 8005104:	6128      	str	r0, [r5, #16]
 8005106:	b930      	cbnz	r0, 8005116 <_svfiprintf_r+0x32>
 8005108:	230c      	movs	r3, #12
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	b01d      	add	sp, #116	@ 0x74
 8005112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005116:	2340      	movs	r3, #64	@ 0x40
 8005118:	616b      	str	r3, [r5, #20]
 800511a:	2300      	movs	r3, #0
 800511c:	9309      	str	r3, [sp, #36]	@ 0x24
 800511e:	2320      	movs	r3, #32
 8005120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005124:	f8cd 800c 	str.w	r8, [sp, #12]
 8005128:	2330      	movs	r3, #48	@ 0x30
 800512a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052c8 <_svfiprintf_r+0x1e4>
 800512e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005132:	f04f 0901 	mov.w	r9, #1
 8005136:	4623      	mov	r3, r4
 8005138:	469a      	mov	sl, r3
 800513a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800513e:	b10a      	cbz	r2, 8005144 <_svfiprintf_r+0x60>
 8005140:	2a25      	cmp	r2, #37	@ 0x25
 8005142:	d1f9      	bne.n	8005138 <_svfiprintf_r+0x54>
 8005144:	ebba 0b04 	subs.w	fp, sl, r4
 8005148:	d00b      	beq.n	8005162 <_svfiprintf_r+0x7e>
 800514a:	465b      	mov	r3, fp
 800514c:	4622      	mov	r2, r4
 800514e:	4629      	mov	r1, r5
 8005150:	4638      	mov	r0, r7
 8005152:	f7ff ff6b 	bl	800502c <__ssputs_r>
 8005156:	3001      	adds	r0, #1
 8005158:	f000 80a7 	beq.w	80052aa <_svfiprintf_r+0x1c6>
 800515c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800515e:	445a      	add	r2, fp
 8005160:	9209      	str	r2, [sp, #36]	@ 0x24
 8005162:	f89a 3000 	ldrb.w	r3, [sl]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 809f 	beq.w	80052aa <_svfiprintf_r+0x1c6>
 800516c:	2300      	movs	r3, #0
 800516e:	f04f 32ff 	mov.w	r2, #4294967295
 8005172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005176:	f10a 0a01 	add.w	sl, sl, #1
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	9307      	str	r3, [sp, #28]
 800517e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005182:	931a      	str	r3, [sp, #104]	@ 0x68
 8005184:	4654      	mov	r4, sl
 8005186:	2205      	movs	r2, #5
 8005188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518c:	484e      	ldr	r0, [pc, #312]	@ (80052c8 <_svfiprintf_r+0x1e4>)
 800518e:	f7fb f827 	bl	80001e0 <memchr>
 8005192:	9a04      	ldr	r2, [sp, #16]
 8005194:	b9d8      	cbnz	r0, 80051ce <_svfiprintf_r+0xea>
 8005196:	06d0      	lsls	r0, r2, #27
 8005198:	bf44      	itt	mi
 800519a:	2320      	movmi	r3, #32
 800519c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051a0:	0711      	lsls	r1, r2, #28
 80051a2:	bf44      	itt	mi
 80051a4:	232b      	movmi	r3, #43	@ 0x2b
 80051a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051aa:	f89a 3000 	ldrb.w	r3, [sl]
 80051ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b0:	d015      	beq.n	80051de <_svfiprintf_r+0xfa>
 80051b2:	9a07      	ldr	r2, [sp, #28]
 80051b4:	4654      	mov	r4, sl
 80051b6:	2000      	movs	r0, #0
 80051b8:	f04f 0c0a 	mov.w	ip, #10
 80051bc:	4621      	mov	r1, r4
 80051be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051c2:	3b30      	subs	r3, #48	@ 0x30
 80051c4:	2b09      	cmp	r3, #9
 80051c6:	d94b      	bls.n	8005260 <_svfiprintf_r+0x17c>
 80051c8:	b1b0      	cbz	r0, 80051f8 <_svfiprintf_r+0x114>
 80051ca:	9207      	str	r2, [sp, #28]
 80051cc:	e014      	b.n	80051f8 <_svfiprintf_r+0x114>
 80051ce:	eba0 0308 	sub.w	r3, r0, r8
 80051d2:	fa09 f303 	lsl.w	r3, r9, r3
 80051d6:	4313      	orrs	r3, r2
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	46a2      	mov	sl, r4
 80051dc:	e7d2      	b.n	8005184 <_svfiprintf_r+0xa0>
 80051de:	9b03      	ldr	r3, [sp, #12]
 80051e0:	1d19      	adds	r1, r3, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	9103      	str	r1, [sp, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bfbb      	ittet	lt
 80051ea:	425b      	neglt	r3, r3
 80051ec:	f042 0202 	orrlt.w	r2, r2, #2
 80051f0:	9307      	strge	r3, [sp, #28]
 80051f2:	9307      	strlt	r3, [sp, #28]
 80051f4:	bfb8      	it	lt
 80051f6:	9204      	strlt	r2, [sp, #16]
 80051f8:	7823      	ldrb	r3, [r4, #0]
 80051fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80051fc:	d10a      	bne.n	8005214 <_svfiprintf_r+0x130>
 80051fe:	7863      	ldrb	r3, [r4, #1]
 8005200:	2b2a      	cmp	r3, #42	@ 0x2a
 8005202:	d132      	bne.n	800526a <_svfiprintf_r+0x186>
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	1d1a      	adds	r2, r3, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	9203      	str	r2, [sp, #12]
 800520c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005210:	3402      	adds	r4, #2
 8005212:	9305      	str	r3, [sp, #20]
 8005214:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80052d8 <_svfiprintf_r+0x1f4>
 8005218:	7821      	ldrb	r1, [r4, #0]
 800521a:	2203      	movs	r2, #3
 800521c:	4650      	mov	r0, sl
 800521e:	f7fa ffdf 	bl	80001e0 <memchr>
 8005222:	b138      	cbz	r0, 8005234 <_svfiprintf_r+0x150>
 8005224:	9b04      	ldr	r3, [sp, #16]
 8005226:	eba0 000a 	sub.w	r0, r0, sl
 800522a:	2240      	movs	r2, #64	@ 0x40
 800522c:	4082      	lsls	r2, r0
 800522e:	4313      	orrs	r3, r2
 8005230:	3401      	adds	r4, #1
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005238:	4824      	ldr	r0, [pc, #144]	@ (80052cc <_svfiprintf_r+0x1e8>)
 800523a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800523e:	2206      	movs	r2, #6
 8005240:	f7fa ffce 	bl	80001e0 <memchr>
 8005244:	2800      	cmp	r0, #0
 8005246:	d036      	beq.n	80052b6 <_svfiprintf_r+0x1d2>
 8005248:	4b21      	ldr	r3, [pc, #132]	@ (80052d0 <_svfiprintf_r+0x1ec>)
 800524a:	bb1b      	cbnz	r3, 8005294 <_svfiprintf_r+0x1b0>
 800524c:	9b03      	ldr	r3, [sp, #12]
 800524e:	3307      	adds	r3, #7
 8005250:	f023 0307 	bic.w	r3, r3, #7
 8005254:	3308      	adds	r3, #8
 8005256:	9303      	str	r3, [sp, #12]
 8005258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800525a:	4433      	add	r3, r6
 800525c:	9309      	str	r3, [sp, #36]	@ 0x24
 800525e:	e76a      	b.n	8005136 <_svfiprintf_r+0x52>
 8005260:	fb0c 3202 	mla	r2, ip, r2, r3
 8005264:	460c      	mov	r4, r1
 8005266:	2001      	movs	r0, #1
 8005268:	e7a8      	b.n	80051bc <_svfiprintf_r+0xd8>
 800526a:	2300      	movs	r3, #0
 800526c:	3401      	adds	r4, #1
 800526e:	9305      	str	r3, [sp, #20]
 8005270:	4619      	mov	r1, r3
 8005272:	f04f 0c0a 	mov.w	ip, #10
 8005276:	4620      	mov	r0, r4
 8005278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800527c:	3a30      	subs	r2, #48	@ 0x30
 800527e:	2a09      	cmp	r2, #9
 8005280:	d903      	bls.n	800528a <_svfiprintf_r+0x1a6>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0c6      	beq.n	8005214 <_svfiprintf_r+0x130>
 8005286:	9105      	str	r1, [sp, #20]
 8005288:	e7c4      	b.n	8005214 <_svfiprintf_r+0x130>
 800528a:	fb0c 2101 	mla	r1, ip, r1, r2
 800528e:	4604      	mov	r4, r0
 8005290:	2301      	movs	r3, #1
 8005292:	e7f0      	b.n	8005276 <_svfiprintf_r+0x192>
 8005294:	ab03      	add	r3, sp, #12
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	462a      	mov	r2, r5
 800529a:	4b0e      	ldr	r3, [pc, #56]	@ (80052d4 <_svfiprintf_r+0x1f0>)
 800529c:	a904      	add	r1, sp, #16
 800529e:	4638      	mov	r0, r7
 80052a0:	f3af 8000 	nop.w
 80052a4:	1c42      	adds	r2, r0, #1
 80052a6:	4606      	mov	r6, r0
 80052a8:	d1d6      	bne.n	8005258 <_svfiprintf_r+0x174>
 80052aa:	89ab      	ldrh	r3, [r5, #12]
 80052ac:	065b      	lsls	r3, r3, #25
 80052ae:	f53f af2d 	bmi.w	800510c <_svfiprintf_r+0x28>
 80052b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052b4:	e72c      	b.n	8005110 <_svfiprintf_r+0x2c>
 80052b6:	ab03      	add	r3, sp, #12
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	462a      	mov	r2, r5
 80052bc:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <_svfiprintf_r+0x1f0>)
 80052be:	a904      	add	r1, sp, #16
 80052c0:	4638      	mov	r0, r7
 80052c2:	f000 f879 	bl	80053b8 <_printf_i>
 80052c6:	e7ed      	b.n	80052a4 <_svfiprintf_r+0x1c0>
 80052c8:	08005c64 	.word	0x08005c64
 80052cc:	08005c6e 	.word	0x08005c6e
 80052d0:	00000000 	.word	0x00000000
 80052d4:	0800502d 	.word	0x0800502d
 80052d8:	08005c6a 	.word	0x08005c6a

080052dc <_printf_common>:
 80052dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	4616      	mov	r6, r2
 80052e2:	4698      	mov	r8, r3
 80052e4:	688a      	ldr	r2, [r1, #8]
 80052e6:	690b      	ldr	r3, [r1, #16]
 80052e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052ec:	4293      	cmp	r3, r2
 80052ee:	bfb8      	it	lt
 80052f0:	4613      	movlt	r3, r2
 80052f2:	6033      	str	r3, [r6, #0]
 80052f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052f8:	4607      	mov	r7, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	b10a      	cbz	r2, 8005302 <_printf_common+0x26>
 80052fe:	3301      	adds	r3, #1
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	0699      	lsls	r1, r3, #26
 8005306:	bf42      	ittt	mi
 8005308:	6833      	ldrmi	r3, [r6, #0]
 800530a:	3302      	addmi	r3, #2
 800530c:	6033      	strmi	r3, [r6, #0]
 800530e:	6825      	ldr	r5, [r4, #0]
 8005310:	f015 0506 	ands.w	r5, r5, #6
 8005314:	d106      	bne.n	8005324 <_printf_common+0x48>
 8005316:	f104 0a19 	add.w	sl, r4, #25
 800531a:	68e3      	ldr	r3, [r4, #12]
 800531c:	6832      	ldr	r2, [r6, #0]
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	42ab      	cmp	r3, r5
 8005322:	dc26      	bgt.n	8005372 <_printf_common+0x96>
 8005324:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	3b00      	subs	r3, #0
 800532c:	bf18      	it	ne
 800532e:	2301      	movne	r3, #1
 8005330:	0692      	lsls	r2, r2, #26
 8005332:	d42b      	bmi.n	800538c <_printf_common+0xb0>
 8005334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005338:	4641      	mov	r1, r8
 800533a:	4638      	mov	r0, r7
 800533c:	47c8      	blx	r9
 800533e:	3001      	adds	r0, #1
 8005340:	d01e      	beq.n	8005380 <_printf_common+0xa4>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	6922      	ldr	r2, [r4, #16]
 8005346:	f003 0306 	and.w	r3, r3, #6
 800534a:	2b04      	cmp	r3, #4
 800534c:	bf02      	ittt	eq
 800534e:	68e5      	ldreq	r5, [r4, #12]
 8005350:	6833      	ldreq	r3, [r6, #0]
 8005352:	1aed      	subeq	r5, r5, r3
 8005354:	68a3      	ldr	r3, [r4, #8]
 8005356:	bf0c      	ite	eq
 8005358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800535c:	2500      	movne	r5, #0
 800535e:	4293      	cmp	r3, r2
 8005360:	bfc4      	itt	gt
 8005362:	1a9b      	subgt	r3, r3, r2
 8005364:	18ed      	addgt	r5, r5, r3
 8005366:	2600      	movs	r6, #0
 8005368:	341a      	adds	r4, #26
 800536a:	42b5      	cmp	r5, r6
 800536c:	d11a      	bne.n	80053a4 <_printf_common+0xc8>
 800536e:	2000      	movs	r0, #0
 8005370:	e008      	b.n	8005384 <_printf_common+0xa8>
 8005372:	2301      	movs	r3, #1
 8005374:	4652      	mov	r2, sl
 8005376:	4641      	mov	r1, r8
 8005378:	4638      	mov	r0, r7
 800537a:	47c8      	blx	r9
 800537c:	3001      	adds	r0, #1
 800537e:	d103      	bne.n	8005388 <_printf_common+0xac>
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005388:	3501      	adds	r5, #1
 800538a:	e7c6      	b.n	800531a <_printf_common+0x3e>
 800538c:	18e1      	adds	r1, r4, r3
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	2030      	movs	r0, #48	@ 0x30
 8005392:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005396:	4422      	add	r2, r4
 8005398:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800539c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053a0:	3302      	adds	r3, #2
 80053a2:	e7c7      	b.n	8005334 <_printf_common+0x58>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4622      	mov	r2, r4
 80053a8:	4641      	mov	r1, r8
 80053aa:	4638      	mov	r0, r7
 80053ac:	47c8      	blx	r9
 80053ae:	3001      	adds	r0, #1
 80053b0:	d0e6      	beq.n	8005380 <_printf_common+0xa4>
 80053b2:	3601      	adds	r6, #1
 80053b4:	e7d9      	b.n	800536a <_printf_common+0x8e>
	...

080053b8 <_printf_i>:
 80053b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	7e0f      	ldrb	r7, [r1, #24]
 80053be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053c0:	2f78      	cmp	r7, #120	@ 0x78
 80053c2:	4691      	mov	r9, r2
 80053c4:	4680      	mov	r8, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	469a      	mov	sl, r3
 80053ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053ce:	d807      	bhi.n	80053e0 <_printf_i+0x28>
 80053d0:	2f62      	cmp	r7, #98	@ 0x62
 80053d2:	d80a      	bhi.n	80053ea <_printf_i+0x32>
 80053d4:	2f00      	cmp	r7, #0
 80053d6:	f000 80d1 	beq.w	800557c <_printf_i+0x1c4>
 80053da:	2f58      	cmp	r7, #88	@ 0x58
 80053dc:	f000 80b8 	beq.w	8005550 <_printf_i+0x198>
 80053e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053e8:	e03a      	b.n	8005460 <_printf_i+0xa8>
 80053ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053ee:	2b15      	cmp	r3, #21
 80053f0:	d8f6      	bhi.n	80053e0 <_printf_i+0x28>
 80053f2:	a101      	add	r1, pc, #4	@ (adr r1, 80053f8 <_printf_i+0x40>)
 80053f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053f8:	08005451 	.word	0x08005451
 80053fc:	08005465 	.word	0x08005465
 8005400:	080053e1 	.word	0x080053e1
 8005404:	080053e1 	.word	0x080053e1
 8005408:	080053e1 	.word	0x080053e1
 800540c:	080053e1 	.word	0x080053e1
 8005410:	08005465 	.word	0x08005465
 8005414:	080053e1 	.word	0x080053e1
 8005418:	080053e1 	.word	0x080053e1
 800541c:	080053e1 	.word	0x080053e1
 8005420:	080053e1 	.word	0x080053e1
 8005424:	08005563 	.word	0x08005563
 8005428:	0800548f 	.word	0x0800548f
 800542c:	0800551d 	.word	0x0800551d
 8005430:	080053e1 	.word	0x080053e1
 8005434:	080053e1 	.word	0x080053e1
 8005438:	08005585 	.word	0x08005585
 800543c:	080053e1 	.word	0x080053e1
 8005440:	0800548f 	.word	0x0800548f
 8005444:	080053e1 	.word	0x080053e1
 8005448:	080053e1 	.word	0x080053e1
 800544c:	08005525 	.word	0x08005525
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	1d1a      	adds	r2, r3, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6032      	str	r2, [r6, #0]
 8005458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800545c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005460:	2301      	movs	r3, #1
 8005462:	e09c      	b.n	800559e <_printf_i+0x1e6>
 8005464:	6833      	ldr	r3, [r6, #0]
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	1d19      	adds	r1, r3, #4
 800546a:	6031      	str	r1, [r6, #0]
 800546c:	0606      	lsls	r6, r0, #24
 800546e:	d501      	bpl.n	8005474 <_printf_i+0xbc>
 8005470:	681d      	ldr	r5, [r3, #0]
 8005472:	e003      	b.n	800547c <_printf_i+0xc4>
 8005474:	0645      	lsls	r5, r0, #25
 8005476:	d5fb      	bpl.n	8005470 <_printf_i+0xb8>
 8005478:	f9b3 5000 	ldrsh.w	r5, [r3]
 800547c:	2d00      	cmp	r5, #0
 800547e:	da03      	bge.n	8005488 <_printf_i+0xd0>
 8005480:	232d      	movs	r3, #45	@ 0x2d
 8005482:	426d      	negs	r5, r5
 8005484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005488:	4858      	ldr	r0, [pc, #352]	@ (80055ec <_printf_i+0x234>)
 800548a:	230a      	movs	r3, #10
 800548c:	e011      	b.n	80054b2 <_printf_i+0xfa>
 800548e:	6821      	ldr	r1, [r4, #0]
 8005490:	6833      	ldr	r3, [r6, #0]
 8005492:	0608      	lsls	r0, r1, #24
 8005494:	f853 5b04 	ldr.w	r5, [r3], #4
 8005498:	d402      	bmi.n	80054a0 <_printf_i+0xe8>
 800549a:	0649      	lsls	r1, r1, #25
 800549c:	bf48      	it	mi
 800549e:	b2ad      	uxthmi	r5, r5
 80054a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054a2:	4852      	ldr	r0, [pc, #328]	@ (80055ec <_printf_i+0x234>)
 80054a4:	6033      	str	r3, [r6, #0]
 80054a6:	bf14      	ite	ne
 80054a8:	230a      	movne	r3, #10
 80054aa:	2308      	moveq	r3, #8
 80054ac:	2100      	movs	r1, #0
 80054ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054b2:	6866      	ldr	r6, [r4, #4]
 80054b4:	60a6      	str	r6, [r4, #8]
 80054b6:	2e00      	cmp	r6, #0
 80054b8:	db05      	blt.n	80054c6 <_printf_i+0x10e>
 80054ba:	6821      	ldr	r1, [r4, #0]
 80054bc:	432e      	orrs	r6, r5
 80054be:	f021 0104 	bic.w	r1, r1, #4
 80054c2:	6021      	str	r1, [r4, #0]
 80054c4:	d04b      	beq.n	800555e <_printf_i+0x1a6>
 80054c6:	4616      	mov	r6, r2
 80054c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054cc:	fb03 5711 	mls	r7, r3, r1, r5
 80054d0:	5dc7      	ldrb	r7, [r0, r7]
 80054d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054d6:	462f      	mov	r7, r5
 80054d8:	42bb      	cmp	r3, r7
 80054da:	460d      	mov	r5, r1
 80054dc:	d9f4      	bls.n	80054c8 <_printf_i+0x110>
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d10b      	bne.n	80054fa <_printf_i+0x142>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	07df      	lsls	r7, r3, #31
 80054e6:	d508      	bpl.n	80054fa <_printf_i+0x142>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	6861      	ldr	r1, [r4, #4]
 80054ec:	4299      	cmp	r1, r3
 80054ee:	bfde      	ittt	le
 80054f0:	2330      	movle	r3, #48	@ 0x30
 80054f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054fa:	1b92      	subs	r2, r2, r6
 80054fc:	6122      	str	r2, [r4, #16]
 80054fe:	f8cd a000 	str.w	sl, [sp]
 8005502:	464b      	mov	r3, r9
 8005504:	aa03      	add	r2, sp, #12
 8005506:	4621      	mov	r1, r4
 8005508:	4640      	mov	r0, r8
 800550a:	f7ff fee7 	bl	80052dc <_printf_common>
 800550e:	3001      	adds	r0, #1
 8005510:	d14a      	bne.n	80055a8 <_printf_i+0x1f0>
 8005512:	f04f 30ff 	mov.w	r0, #4294967295
 8005516:	b004      	add	sp, #16
 8005518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	f043 0320 	orr.w	r3, r3, #32
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	4832      	ldr	r0, [pc, #200]	@ (80055f0 <_printf_i+0x238>)
 8005526:	2778      	movs	r7, #120	@ 0x78
 8005528:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	6831      	ldr	r1, [r6, #0]
 8005530:	061f      	lsls	r7, r3, #24
 8005532:	f851 5b04 	ldr.w	r5, [r1], #4
 8005536:	d402      	bmi.n	800553e <_printf_i+0x186>
 8005538:	065f      	lsls	r7, r3, #25
 800553a:	bf48      	it	mi
 800553c:	b2ad      	uxthmi	r5, r5
 800553e:	6031      	str	r1, [r6, #0]
 8005540:	07d9      	lsls	r1, r3, #31
 8005542:	bf44      	itt	mi
 8005544:	f043 0320 	orrmi.w	r3, r3, #32
 8005548:	6023      	strmi	r3, [r4, #0]
 800554a:	b11d      	cbz	r5, 8005554 <_printf_i+0x19c>
 800554c:	2310      	movs	r3, #16
 800554e:	e7ad      	b.n	80054ac <_printf_i+0xf4>
 8005550:	4826      	ldr	r0, [pc, #152]	@ (80055ec <_printf_i+0x234>)
 8005552:	e7e9      	b.n	8005528 <_printf_i+0x170>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	f023 0320 	bic.w	r3, r3, #32
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	e7f6      	b.n	800554c <_printf_i+0x194>
 800555e:	4616      	mov	r6, r2
 8005560:	e7bd      	b.n	80054de <_printf_i+0x126>
 8005562:	6833      	ldr	r3, [r6, #0]
 8005564:	6825      	ldr	r5, [r4, #0]
 8005566:	6961      	ldr	r1, [r4, #20]
 8005568:	1d18      	adds	r0, r3, #4
 800556a:	6030      	str	r0, [r6, #0]
 800556c:	062e      	lsls	r6, r5, #24
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	d501      	bpl.n	8005576 <_printf_i+0x1be>
 8005572:	6019      	str	r1, [r3, #0]
 8005574:	e002      	b.n	800557c <_printf_i+0x1c4>
 8005576:	0668      	lsls	r0, r5, #25
 8005578:	d5fb      	bpl.n	8005572 <_printf_i+0x1ba>
 800557a:	8019      	strh	r1, [r3, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	4616      	mov	r6, r2
 8005582:	e7bc      	b.n	80054fe <_printf_i+0x146>
 8005584:	6833      	ldr	r3, [r6, #0]
 8005586:	1d1a      	adds	r2, r3, #4
 8005588:	6032      	str	r2, [r6, #0]
 800558a:	681e      	ldr	r6, [r3, #0]
 800558c:	6862      	ldr	r2, [r4, #4]
 800558e:	2100      	movs	r1, #0
 8005590:	4630      	mov	r0, r6
 8005592:	f7fa fe25 	bl	80001e0 <memchr>
 8005596:	b108      	cbz	r0, 800559c <_printf_i+0x1e4>
 8005598:	1b80      	subs	r0, r0, r6
 800559a:	6060      	str	r0, [r4, #4]
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	2300      	movs	r3, #0
 80055a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055a6:	e7aa      	b.n	80054fe <_printf_i+0x146>
 80055a8:	6923      	ldr	r3, [r4, #16]
 80055aa:	4632      	mov	r2, r6
 80055ac:	4649      	mov	r1, r9
 80055ae:	4640      	mov	r0, r8
 80055b0:	47d0      	blx	sl
 80055b2:	3001      	adds	r0, #1
 80055b4:	d0ad      	beq.n	8005512 <_printf_i+0x15a>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	079b      	lsls	r3, r3, #30
 80055ba:	d413      	bmi.n	80055e4 <_printf_i+0x22c>
 80055bc:	68e0      	ldr	r0, [r4, #12]
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	4298      	cmp	r0, r3
 80055c2:	bfb8      	it	lt
 80055c4:	4618      	movlt	r0, r3
 80055c6:	e7a6      	b.n	8005516 <_printf_i+0x15e>
 80055c8:	2301      	movs	r3, #1
 80055ca:	4632      	mov	r2, r6
 80055cc:	4649      	mov	r1, r9
 80055ce:	4640      	mov	r0, r8
 80055d0:	47d0      	blx	sl
 80055d2:	3001      	adds	r0, #1
 80055d4:	d09d      	beq.n	8005512 <_printf_i+0x15a>
 80055d6:	3501      	adds	r5, #1
 80055d8:	68e3      	ldr	r3, [r4, #12]
 80055da:	9903      	ldr	r1, [sp, #12]
 80055dc:	1a5b      	subs	r3, r3, r1
 80055de:	42ab      	cmp	r3, r5
 80055e0:	dcf2      	bgt.n	80055c8 <_printf_i+0x210>
 80055e2:	e7eb      	b.n	80055bc <_printf_i+0x204>
 80055e4:	2500      	movs	r5, #0
 80055e6:	f104 0619 	add.w	r6, r4, #25
 80055ea:	e7f5      	b.n	80055d8 <_printf_i+0x220>
 80055ec:	08005c75 	.word	0x08005c75
 80055f0:	08005c86 	.word	0x08005c86

080055f4 <memmove>:
 80055f4:	4288      	cmp	r0, r1
 80055f6:	b510      	push	{r4, lr}
 80055f8:	eb01 0402 	add.w	r4, r1, r2
 80055fc:	d902      	bls.n	8005604 <memmove+0x10>
 80055fe:	4284      	cmp	r4, r0
 8005600:	4623      	mov	r3, r4
 8005602:	d807      	bhi.n	8005614 <memmove+0x20>
 8005604:	1e43      	subs	r3, r0, #1
 8005606:	42a1      	cmp	r1, r4
 8005608:	d008      	beq.n	800561c <memmove+0x28>
 800560a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800560e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005612:	e7f8      	b.n	8005606 <memmove+0x12>
 8005614:	4402      	add	r2, r0
 8005616:	4601      	mov	r1, r0
 8005618:	428a      	cmp	r2, r1
 800561a:	d100      	bne.n	800561e <memmove+0x2a>
 800561c:	bd10      	pop	{r4, pc}
 800561e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005626:	e7f7      	b.n	8005618 <memmove+0x24>

08005628 <_sbrk_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d06      	ldr	r5, [pc, #24]	@ (8005644 <_sbrk_r+0x1c>)
 800562c:	2300      	movs	r3, #0
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fc f930 	bl	8001898 <_sbrk>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_sbrk_r+0x1a>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_sbrk_r+0x1a>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	200003e4 	.word	0x200003e4

08005648 <_realloc_r>:
 8005648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800564c:	4607      	mov	r7, r0
 800564e:	4614      	mov	r4, r2
 8005650:	460d      	mov	r5, r1
 8005652:	b921      	cbnz	r1, 800565e <_realloc_r+0x16>
 8005654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005658:	4611      	mov	r1, r2
 800565a:	f7ff bc5b 	b.w	8004f14 <_malloc_r>
 800565e:	b92a      	cbnz	r2, 800566c <_realloc_r+0x24>
 8005660:	f7ff fbec 	bl	8004e3c <_free_r>
 8005664:	4625      	mov	r5, r4
 8005666:	4628      	mov	r0, r5
 8005668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566c:	f000 f81a 	bl	80056a4 <_malloc_usable_size_r>
 8005670:	4284      	cmp	r4, r0
 8005672:	4606      	mov	r6, r0
 8005674:	d802      	bhi.n	800567c <_realloc_r+0x34>
 8005676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800567a:	d8f4      	bhi.n	8005666 <_realloc_r+0x1e>
 800567c:	4621      	mov	r1, r4
 800567e:	4638      	mov	r0, r7
 8005680:	f7ff fc48 	bl	8004f14 <_malloc_r>
 8005684:	4680      	mov	r8, r0
 8005686:	b908      	cbnz	r0, 800568c <_realloc_r+0x44>
 8005688:	4645      	mov	r5, r8
 800568a:	e7ec      	b.n	8005666 <_realloc_r+0x1e>
 800568c:	42b4      	cmp	r4, r6
 800568e:	4622      	mov	r2, r4
 8005690:	4629      	mov	r1, r5
 8005692:	bf28      	it	cs
 8005694:	4632      	movcs	r2, r6
 8005696:	f7ff fbc3 	bl	8004e20 <memcpy>
 800569a:	4629      	mov	r1, r5
 800569c:	4638      	mov	r0, r7
 800569e:	f7ff fbcd 	bl	8004e3c <_free_r>
 80056a2:	e7f1      	b.n	8005688 <_realloc_r+0x40>

080056a4 <_malloc_usable_size_r>:
 80056a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a8:	1f18      	subs	r0, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bfbc      	itt	lt
 80056ae:	580b      	ldrlt	r3, [r1, r0]
 80056b0:	18c0      	addlt	r0, r0, r3
 80056b2:	4770      	bx	lr

080056b4 <_init>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr

080056c0 <_fini>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr
